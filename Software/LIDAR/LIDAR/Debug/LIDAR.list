
LIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08006d50  08006d50  00007d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007248  08007248  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007248  08007248  00008248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007250  08007250  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007250  08007250  00008250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007254  08007254  00008254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007258  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000006f8  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008cc  200008cc  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009371  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1b  00000000  00000000  00012575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00014290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000062f  00000000  00000000  00014ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022165  00000000  00000000  000150ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b7f5  00000000  00000000  00037264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c66df  00000000  00000000  00042a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109138  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030a0  00000000  00000000  0010917c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0010c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d38 	.word	0x08006d38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006d38 	.word	0x08006d38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_DMA_Init+0x3c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <MX_DMA_Init+0x3c>)
 8000f84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_DMA_Init+0x3c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	f000 ffcb 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fa0:	200c      	movs	r0, #12
 8000fa2:	f000 ffe4 	bl	8001f6e <HAL_NVIC_EnableIRQ>

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <YLIDARX2_PrintData>:




void YLIDARX2_PrintData(h_YLIDARX2_t * hYLIDAR)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

		printf("Packet Header: 0x%X\r\n", packetHeader);
		printf("Package Type: %s\r\n", YLIDAR_PACKAGE_TYPE(packageType));
		printf("Scan frequency: %d Hz\r\n", scan_frequency);
#endif
		printf("Sample Quantity: %d\r\n", hYLIDAR->sample_quantity);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7b1b      	ldrb	r3, [r3, #12]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4819      	ldr	r0, [pc, #100]	@ (8001028 <YLIDARX2_PrintData+0x74>)
 8000fc4:	f003 fd22 	bl	8004a0c <iprintf>

	printf("Data: ");
 8000fc8:	4818      	ldr	r0, [pc, #96]	@ (800102c <YLIDARX2_PrintData+0x78>)
 8000fca:	f003 fd1f 	bl	8004a0c <iprintf>

	for (int i=0; i < hYLIDAR->data_length; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	e01c      	b.n	800100e <YLIDARX2_PrintData+0x5a>
	{
		printf("0x%X ", hYLIDAR->data_buffer[i]);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4813      	ldr	r0, [pc, #76]	@ (8001030 <YLIDARX2_PrintData+0x7c>)
 8000fe2:	f003 fd13 	bl	8004a0c <iprintf>

		if (i%10 == 0) printf("\r\n");
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <YLIDARX2_PrintData+0x80>)
 8000fea:	fb83 2301 	smull	r2, r3, r3, r1
 8000fee:	109a      	asrs	r2, r3, #2
 8000ff0:	17cb      	asrs	r3, r1, #31
 8000ff2:	1ad2      	subs	r2, r2, r3
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1aca      	subs	r2, r1, r3
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d102      	bne.n	8001008 <YLIDARX2_PrintData+0x54>
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <YLIDARX2_PrintData+0x84>)
 8001004:	f003 fd6a 	bl	8004adc <puts>
	for (int i=0; i < hYLIDAR->data_length; i++)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbdd      	blt.n	8000fd4 <YLIDARX2_PrintData+0x20>
	}

	printf("\r\n");
 8001018:	4807      	ldr	r0, [pc, #28]	@ (8001038 <YLIDARX2_PrintData+0x84>)
 800101a:	f003 fd5f 	bl	8004adc <puts>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	08006d7c 	.word	0x08006d7c
 800102c:	08006d94 	.word	0x08006d94
 8001030:	08006d9c 	.word	0x08006d9c
 8001034:	66666667 	.word	0x66666667
 8001038:	08006da4 	.word	0x08006da4

0800103c <YLIDARX2_CalculateChecksum>:

uint16_t YLIDARX2_CalculateChecksum(uint8_t *data, uint16_t length)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	uint16_t checksum = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < length; i+=2) // Exclude received checksum bytes
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	e016      	b.n	8001080 <YLIDARX2_CalculateChecksum+0x44>
	{
		checksum ^= data[i] | (data[i+1] << 8);
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b21a      	sxth	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	440b      	add	r3, r1
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b21b      	sxth	r3, r3
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001074:	4053      	eors	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < length; i+=2) // Exclude received checksum bytes
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3302      	adds	r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbe4      	blt.n	8001052 <YLIDARX2_CalculateChecksum+0x16>
	}

	return checksum;
 8001088:	89fb      	ldrh	r3, [r7, #14]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <YLIDARX2_ParseData>:
 * @brief Parse and print YDLIDAR X2 scan data.
 * @param data: Pointer to the received data buffer.
 * @retval None
 */
void YLIDARX2_ParseData(h_YLIDARX2_t * hYLIDAR)
{
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109c:	b095      	sub	sp, #84	@ 0x54
 800109e:	af00      	add	r7, sp, #0
 80010a0:	61f8      	str	r0, [r7, #28]
	if (hYLIDAR->data_buffer[0] == YLIDAR_START_BYTE2 && hYLIDAR->data_buffer[1] == YLIDAR_START_BYTE1)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2baa      	cmp	r3, #170	@ 0xaa
 80010aa:	f040 81ca 	bne.w	8001442 <YLIDARX2_ParseData+0x3aa>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	3301      	adds	r3, #1
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b55      	cmp	r3, #85	@ 0x55
 80010b8:	f040 81c3 	bne.w	8001442 <YLIDARX2_ParseData+0x3aa>
	{
 80010bc:	466b      	mov	r3, sp
 80010be:	461e      	mov	r6, r3
#if (LOGS)
		printf("Started parsing\r\n");
#endif

		// Verify checksum
		uint16_t checksum = hYLIDAR->data_buffer[8] | (hYLIDAR->data_buffer[9] << 8);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	3308      	adds	r3, #8
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	3309      	adds	r3, #9
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b21b      	sxth	r3, r3
 80010dc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		uint16_t calculatedChecksum = YLIDARX2_CalculateChecksum(hYLIDAR->data_buffer, YLIDAR_SAMPLE_BYTE_OFFSET);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2108      	movs	r1, #8
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffa8 	bl	800103c <YLIDARX2_CalculateChecksum>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

		if (calculatedChecksum != checksum)
 80010f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80010f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d001      	beq.n	8001102 <YLIDARX2_ParseData+0x6a>
		{
#if (LOGS)
			printf("Checksum mismatch! Calculated: 0x%X, Received: 0x%X\r\n", calculatedChecksum, checksum);
#endif
			return;
 80010fe:	46b5      	mov	sp, r6
 8001100:	e1a2      	b.n	8001448 <YLIDARX2_ParseData+0x3b0>
		}

		YLIDARX2_PrintData(hYLIDAR);
 8001102:	69f8      	ldr	r0, [r7, #28]
 8001104:	f7ff ff56 	bl	8000fb4 <YLIDARX2_PrintData>

		uint16_t startAngleRaw = hYLIDAR->data_buffer[4] | (hYLIDAR->data_buffer[5] << 8);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	3304      	adds	r3, #4
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b21a      	sxth	r2, r3
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	3305      	adds	r3, #5
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b21b      	sxth	r3, r3
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		uint16_t endAngleRaw = hYLIDAR->data_buffer[6] | (hYLIDAR->data_buffer[7] << 8);
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	3306      	adds	r3, #6
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b21a      	sxth	r2, r3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	3307      	adds	r3, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b21b      	sxth	r3, r3
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	87bb      	strh	r3, [r7, #60]	@ 0x3c

		// Calculate starting and ending angles
		float Angle_FSA = (startAngleRaw >> 1) / 64.0f; // Formula: Rshiftbit(FSA) / 64
 8001144:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001146:	085b      	lsrs	r3, r3, #1
 8001148:	b29b      	uxth	r3, r3
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001152:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8001458 <YLIDARX2_ParseData+0x3c0>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		float Angle_LSA = (endAngleRaw >> 1) / 64.0f;   // Formula: Rshiftbit(LSA) / 64
 800115e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	b29b      	uxth	r3, r3
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116c:	eddf 6aba 	vldr	s13, [pc, #744]	@ 8001458 <YLIDARX2_ParseData+0x3c0>
 8001170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001174:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
#if (LOGS)
		printf("Start Angle: %.2f°, End Angle: %.2f°\r\n", Angle_FSA, Angle_LSA);
#endif

		// Calculate the angle difference
		float diffAngle = (Angle_LSA > Angle_FSA) ? (Angle_LSA - Angle_FSA) : (360.0f + Angle_LSA - Angle_FSA);
 8001178:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800117c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001188:	dd06      	ble.n	8001198 <YLIDARX2_ParseData+0x100>
 800118a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800118e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001196:	e009      	b.n	80011ac <YLIDARX2_ParseData+0x114>
 8001198:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800119c:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 800145c <YLIDARX2_ParseData+0x3c4>
 80011a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011a4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ac:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Process sample data
		printf("Sample Data:\r\n");
 80011b0:	48ab      	ldr	r0, [pc, #684]	@ (8001460 <YLIDARX2_ParseData+0x3c8>)
 80011b2:	f003 fc93 	bl	8004adc <puts>

		YLIDARX2_sample_t samples[hYLIDAR->sample_quantity];
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	7b19      	ldrb	r1, [r3, #12]
 80011ba:	460b      	mov	r3, r1
 80011bc:	3b01      	subs	r3, #1
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011c0:	b2cb      	uxtb	r3, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	617a      	str	r2, [r7, #20]
 80011c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011cc:	1890      	adds	r0, r2, r2
 80011ce:	60b8      	str	r0, [r7, #8]
 80011d0:	415b      	adcs	r3, r3
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011d8:	6938      	ldr	r0, [r7, #16]
 80011da:	eb12 0800 	adds.w	r8, r2, r0
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	eb43 0900 	adc.w	r9, r3, r0
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80011f0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80011f4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80011f8:	b2cb      	uxtb	r3, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	469a      	mov	sl, r3
 80011fe:	4693      	mov	fp, r2
 8001200:	4652      	mov	r2, sl
 8001202:	465b      	mov	r3, fp
 8001204:	1890      	adds	r0, r2, r2
 8001206:	6038      	str	r0, [r7, #0]
 8001208:	415b      	adcs	r3, r3
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001210:	eb12 040a 	adds.w	r4, r2, sl
 8001214:	eb43 050b 	adc.w	r5, r3, fp
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	016b      	lsls	r3, r5, #5
 8001222:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001226:	0162      	lsls	r2, r4, #5
 8001228:	460a      	mov	r2, r1
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	3307      	adds	r3, #7
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	ebad 0d03 	sub.w	sp, sp, r3
 800123c:	466b      	mov	r3, sp
 800123e:	3303      	adds	r3, #3
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28

		for (int i = 0; i < hYLIDAR->sample_quantity; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800124a:	e0c1      	b.n	80013d0 <YLIDARX2_ParseData+0x338>
		{
			samples[i].data = hYLIDAR->data_buffer[10 + i*2] | (hYLIDAR->data_buffer[11 + i*2] << 8);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001252:	3205      	adds	r2, #5
 8001254:	0052      	lsls	r2, r2, #1
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b21a      	sxth	r2, r3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001262:	0049      	lsls	r1, r1, #1
 8001264:	310b      	adds	r1, #11
 8001266:	440b      	add	r3, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b21b      	sxth	r3, r3
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b21b      	sxth	r3, r3
 8001274:	b298      	uxth	r0, r3
 8001276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001278:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	4602      	mov	r2, r0
 8001286:	801a      	strh	r2, [r3, #0]
			samples[i].distance = (uint16_t)((samples[i].data) >> 2);
 8001288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800128a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	b298      	uxth	r0, r3
 800129c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800129e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3302      	adds	r3, #2
 80012ac:	4602      	mov	r2, r0
 80012ae:	801a      	strh	r2, [r3, #0]
			samples[i].interference_flag = (samples[i].data) & 0b11; // Lower 2 bits
 80012b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	b2d8      	uxtb	r0, r3
 80012c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	3304      	adds	r3, #4
 80012d8:	4602      	mov	r2, r0
 80012da:	701a      	strb	r2, [r3, #0]

			// Compute the intermediate angle
			//float Angle_i = diffAngle * (float)((i - 1)/(hYLIDAR->sample_quantity-1)) + Angle_FSA;
			float Angle_i = diffAngle * ((float)i / (hYLIDAR->sample_quantity - 1)) + Angle_FSA;
 80012dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	7b1b      	ldrb	r3, [r3, #12]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

			// Compute angle correction
			float AngCorrect = 0.0f;
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	64bb      	str	r3, [r7, #72]	@ 0x48

			if (samples[i].distance > 0)
 8001312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001314:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	3302      	adds	r3, #2
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d040      	beq.n	80013aa <YLIDARX2_ParseData+0x312>
			{
				AngCorrect = atan(21.8f * (155.3f - samples[i].distance)/(155.3f * samples[i].distance) ) * (180.0f / PI);
 8001328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800132a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	3302      	adds	r3, #2
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001464 <YLIDARX2_ParseData+0x3cc>
 8001346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001468 <YLIDARX2_ParseData+0x3d0>
 800134e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001354:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3302      	adds	r3, #2
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001464 <YLIDARX2_ParseData+0x3cc>
 8001370:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001374:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001378:	ee16 0a90 	vmov	r0, s13
 800137c:	f7ff f8e4 	bl	8000548 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	ec43 2b10 	vmov	d0, r2, r3
 8001388:	f005 fb36 	bl	80069f8 <atan>
 800138c:	ec51 0b10 	vmov	r0, r1, d0
 8001390:	a32f      	add	r3, pc, #188	@ (adr r3, 8001450 <YLIDARX2_ParseData+0x3b8>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f92f 	bl	80005f8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fc01 	bl	8000ba8 <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	64bb      	str	r3, [r7, #72]	@ 0x48
			}

			samples[i].corrected_angle = Angle_i + AngCorrect;
 80013aa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80013ae:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	3308      	adds	r3, #8
 80013c6:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < hYLIDAR->sample_quantity; i++)
 80013ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013cc:	3301      	adds	r3, #1
 80013ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	7b1b      	ldrb	r3, [r3, #12]
 80013d4:	461a      	mov	r2, r3
 80013d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013d8:	4293      	cmp	r3, r2
 80013da:	f6ff af37 	blt.w	800124c <YLIDARX2_ParseData+0x1b4>
		}

		hYLIDAR->samples = samples;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013e2:	611a      	str	r2, [r3, #16]

		for (int i=0; i < hYLIDAR->sample_quantity; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80013e8:	e023      	b.n	8001432 <YLIDARX2_ParseData+0x39a>
		{
			printf("Sample %d: Distance = %d mm, ", i + 1, hYLIDAR->samples[i].distance);
 80013ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013ec:	1c58      	adds	r0, r3, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	6919      	ldr	r1, [r3, #16]
 80013f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	885b      	ldrh	r3, [r3, #2]
 8001400:	461a      	mov	r2, r3
 8001402:	4601      	mov	r1, r0
 8001404:	4819      	ldr	r0, [pc, #100]	@ (800146c <YLIDARX2_ParseData+0x3d4>)
 8001406:	f003 fb01 	bl	8004a0c <iprintf>
#if (LOGS)
			printf("Interference = %d, ", hYLIDAR->samples[i].interference_flag);
#endif
			printf("Corrected Angle = %.2f°\r\n", hYLIDAR->samples[i].corrected_angle);
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	6919      	ldr	r1, [r3, #16]
 800140e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f893 	bl	8000548 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4812      	ldr	r0, [pc, #72]	@ (8001470 <YLIDARX2_ParseData+0x3d8>)
 8001428:	f003 faf0 	bl	8004a0c <iprintf>
		for (int i=0; i < hYLIDAR->sample_quantity; i++)
 800142c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800142e:	3301      	adds	r3, #1
 8001430:	647b      	str	r3, [r7, #68]	@ 0x44
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	7b1b      	ldrb	r3, [r3, #12]
 8001436:	461a      	mov	r2, r3
 8001438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800143a:	4293      	cmp	r3, r2
 800143c:	dbd5      	blt.n	80013ea <YLIDARX2_ParseData+0x352>
 800143e:	46b5      	mov	sp, r6
	{
 8001440:	e002      	b.n	8001448 <YLIDARX2_ParseData+0x3b0>
		}
	}
	else
	{
		printf("Invalid start bytes!\r\n");
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <YLIDARX2_ParseData+0x3dc>)
 8001444:	f003 fb4a 	bl	8004adc <puts>
	}
}
 8001448:	3754      	adds	r7, #84	@ 0x54
 800144a:	46bd      	mov	sp, r7
 800144c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001450:	1a63bfe5 	.word	0x1a63bfe5
 8001454:	404ca5dc 	.word	0x404ca5dc
 8001458:	42800000 	.word	0x42800000
 800145c:	43b40000 	.word	0x43b40000
 8001460:	08006da8 	.word	0x08006da8
 8001464:	431b4ccd 	.word	0x431b4ccd
 8001468:	41ae6666 	.word	0x41ae6666
 800146c:	08006db8 	.word	0x08006db8
 8001470:	08006dd8 	.word	0x08006dd8
 8001474:	08006df4 	.word	0x08006df4

08001478 <YLIDARX2_UART_irq>:

/**
 * @param	UART buffer, should be a variable or an array of 1.
 */
void YLIDARX2_UART_irq(h_YLIDARX2_t * hYLIDAR)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	// Add received byte to the buffer
	uartBuffer[bufferIndex++] = hYLIDAR->uart_buffer[0];
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	b288      	uxth	r0, r1
 800148c:	492a      	ldr	r1, [pc, #168]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 800148e:	8008      	strh	r0, [r1, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	7812      	ldrb	r2, [r2, #0]
 8001494:	4b29      	ldr	r3, [pc, #164]	@ (800153c <YLIDARX2_UART_irq+0xc4>)
 8001496:	545a      	strb	r2, [r3, r1]

	// Check for start bytes and process data only if a full packet is received
	if (bufferIndex >= 2)
 8001498:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d93e      	bls.n	800151e <YLIDARX2_UART_irq+0xa6>
	{
		if(uartBuffer[0] == YLIDAR_START_BYTE2 && uartBuffer[1] == YLIDAR_START_BYTE1)
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <YLIDARX2_UART_irq+0xc4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2baa      	cmp	r3, #170	@ 0xaa
 80014a6:	d12b      	bne.n	8001500 <YLIDARX2_UART_irq+0x88>
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <YLIDARX2_UART_irq+0xc4>)
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	2b55      	cmp	r3, #85	@ 0x55
 80014ae:	d127      	bne.n	8001500 <YLIDARX2_UART_irq+0x88>
		{
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 80014b0:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	2b19      	cmp	r3, #25
 80014b6:	d931      	bls.n	800151c <YLIDARX2_UART_irq+0xa4>
			{
				// Extract sample quantity
				hYLIDAR->sample_quantity = uartBuffer[3];
 80014b8:	4b20      	ldr	r3, [pc, #128]	@ (800153c <YLIDARX2_UART_irq+0xc4>)
 80014ba:	78da      	ldrb	r2, [r3, #3]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	731a      	strb	r2, [r3, #12]
				uint16_t expectedLength = YLIDAR_PACKET_HEADER_LENGTH + (hYLIDAR->sample_quantity * 2);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7b1b      	ldrb	r3, [r3, #12]
 80014c4:	330d      	adds	r3, #13
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	81fb      	strh	r3, [r7, #14]

				// Process only when the full packet is received
				if (bufferIndex >= expectedLength)
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	89fa      	ldrh	r2, [r7, #14]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d822      	bhi.n	800151c <YLIDARX2_UART_irq+0xa4>
				{
					hYLIDAR->data_buffer = uartBuffer;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a18      	ldr	r2, [pc, #96]	@ (800153c <YLIDARX2_UART_irq+0xc4>)
 80014da:	605a      	str	r2, [r3, #4]
					hYLIDAR->data_length = bufferIndex;
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	609a      	str	r2, [r3, #8]

					YLIDARX2_ParseData(hYLIDAR);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fdd6 	bl	8001098 <YLIDARX2_ParseData>

					// Reset the buffer
					bufferIndex = 0;
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
					memset(uartBuffer, 0, sizeof(uartBuffer));
 80014f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f6:	2100      	movs	r1, #0
 80014f8:	4810      	ldr	r0, [pc, #64]	@ (800153c <YLIDARX2_UART_irq+0xc4>)
 80014fa:	f003 fbe9 	bl	8004cd0 <memset>
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 80014fe:	e00d      	b.n	800151c <YLIDARX2_UART_irq+0xa4>
			}
		}
		else
		{
			// Shift buffer to discard invalid start bytes
			memmove(uartBuffer, uartBuffer + 1, --bufferIndex);
 8001500:	490f      	ldr	r1, [pc, #60]	@ (8001540 <YLIDARX2_UART_irq+0xc8>)
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4809      	ldr	r0, [pc, #36]	@ (800153c <YLIDARX2_UART_irq+0xc4>)
 8001516:	f003 fbc1 	bl	8004c9c <memmove>
 800151a:	e000      	b.n	800151e <YLIDARX2_UART_irq+0xa6>
			if (bufferIndex >= YLIDAR_PACKET_HEADER_LENGTH) // Minimum packet size
 800151c:	bf00      	nop
		}
	}

	if (bufferIndex >= USART_BUFFER_SIZE)
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001526:	d302      	bcc.n	800152e <YLIDARX2_UART_irq+0xb6>
	{
		// Reset buffer if overflow occurs
		bufferIndex = 0;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <YLIDARX2_UART_irq+0xc0>)
 800152a:	2200      	movs	r2, #0
 800152c:	801a      	strh	r2, [r3, #0]
#if (LOGS)
		printf("Buffer overflow! Clearing buffer.\r\n");
#endif
	}
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001f0 	.word	0x200001f0
 800153c:	200001f4 	.word	0x200001f4
 8001540:	200001f5 	.word	0x200001f5

08001544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_GPIO_Init+0x68>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <MX_GPIO_Init+0x68>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_GPIO_Init+0x68>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_GPIO_Init+0x68>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <MX_GPIO_Init+0x68>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <MX_GPIO_Init+0x68>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_GPIO_Init+0x68>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a08      	ldr	r2, [pc, #32]	@ (80015ac <MX_GPIO_Init+0x68>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_GPIO_Init+0x68>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015b8:	1d39      	adds	r1, r7, #4
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	2201      	movs	r2, #1
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <__io_putchar+0x20>)
 80015c2:	f001 ff3b 	bl	800343c <HAL_UART_Transmit>
	return ch;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000068c 	.word	0x2000068c

080015d4 <HAL_UART_RxCpltCallback>:

// Callback DMA pour réception UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	@ (8001600 <HAL_UART_RxCpltCallback+0x2c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d107      	bne.n	80015f6 <HAL_UART_RxCpltCallback+0x22>
    {
        // Ajouter chaque octet reçu au buffer du Lidar
        YLIDARX2_UART_irq(&lidar);
 80015e6:	4807      	ldr	r0, [pc, #28]	@ (8001604 <HAL_UART_RxCpltCallback+0x30>)
 80015e8:	f7ff ff46 	bl	8001478 <YLIDARX2_UART_irq>

        // Relancer la réception DMA pour le prochain octet
        HAL_UART_Receive_DMA(&huart3, rxBuffer, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	4906      	ldr	r1, [pc, #24]	@ (8001608 <HAL_UART_RxCpltCallback+0x34>)
 80015f0:	4806      	ldr	r0, [pc, #24]	@ (800160c <HAL_UART_RxCpltCallback+0x38>)
 80015f2:	f001 ffae 	bl	8003552 <HAL_UART_Receive_DMA>
    }
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40004800 	.word	0x40004800
 8001604:	200005f4 	.word	0x200005f4
 8001608:	20000608 	.word	0x20000608
 800160c:	200006d4 	.word	0x200006d4

08001610 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_UART_ErrorCallback+0x74>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_UART_ErrorCallback+0x6a>
	{
		if(HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f001 ffd0 	bl	80035c8 <HAL_UART_GetError>
 8001628:	4603      	mov	r3, r0
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_UART_ErrorCallback+0x28>
			printf("Parity Error!\r\n");
 8001632:	4815      	ldr	r0, [pc, #84]	@ (8001688 <HAL_UART_ErrorCallback+0x78>)
 8001634:	f003 fa52 	bl	8004adc <puts>
		if(HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f001 ffc5 	bl	80035c8 <HAL_UART_GetError>
 800163e:	4603      	mov	r3, r0
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_UART_ErrorCallback+0x3e>
			printf("Noise Error!\r\n");
 8001648:	4810      	ldr	r0, [pc, #64]	@ (800168c <HAL_UART_ErrorCallback+0x7c>)
 800164a:	f003 fa47 	bl	8004adc <puts>
		if(HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f001 ffba 	bl	80035c8 <HAL_UART_GetError>
 8001654:	4603      	mov	r3, r0
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_UART_ErrorCallback+0x54>
			printf("Framing Error!\r\n");
 800165e:	480c      	ldr	r0, [pc, #48]	@ (8001690 <HAL_UART_ErrorCallback+0x80>)
 8001660:	f003 fa3c 	bl	8004adc <puts>
		if(HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f001 ffaf 	bl	80035c8 <HAL_UART_GetError>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_UART_ErrorCallback+0x6a>
			printf("Overrun Error!\r\n");
 8001674:	4807      	ldr	r0, [pc, #28]	@ (8001694 <HAL_UART_ErrorCallback+0x84>)
 8001676:	f003 fa31 	bl	8004adc <puts>
	}
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40004800 	.word	0x40004800
 8001688:	08006e0c 	.word	0x08006e0c
 800168c:	08006e1c 	.word	0x08006e1c
 8001690:	08006e2c 	.word	0x08006e2c
 8001694:	08006e3c 	.word	0x08006e3c

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169c:	f000 fafe 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f822 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f7ff ff4e 	bl	8001544 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a8:	f7ff fc64 	bl	8000f74 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016ac:	f000 f9c6 	bl	8001a3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016b0:	f000 f9ee 	bl	8001a90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	 printf("\r\n***** TEST LIDAR STM32F407 *****\r\n");
 80016b4:	4808      	ldr	r0, [pc, #32]	@ (80016d8 <main+0x40>)
 80016b6:	f003 fa11 	bl	8004adc <puts>

	    // Initialiser la structure Lidar
	    memset(&lidar, 0, sizeof(h_YLIDARX2_t));
 80016ba:	2214      	movs	r2, #20
 80016bc:	2100      	movs	r1, #0
 80016be:	4807      	ldr	r0, [pc, #28]	@ (80016dc <main+0x44>)
 80016c0:	f003 fb06 	bl	8004cd0 <memset>
	    lidar.uart_buffer = rxBuffer;
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <main+0x44>)
 80016c6:	4a06      	ldr	r2, [pc, #24]	@ (80016e0 <main+0x48>)
 80016c8:	601a      	str	r2, [r3, #0]

	    // Lancer la réception DMA 1 octet à la fois
	    HAL_UART_Receive_DMA(&huart3, rxBuffer, 1);
 80016ca:	2201      	movs	r2, #1
 80016cc:	4904      	ldr	r1, [pc, #16]	@ (80016e0 <main+0x48>)
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <main+0x4c>)
 80016d0:	f001 ff3f 	bl	8003552 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <main+0x3c>
 80016d8:	08006e4c 	.word	0x08006e4c
 80016dc:	200005f4 	.word	0x200005f4
 80016e0:	20000608 	.word	0x20000608
 80016e4:	200006d4 	.word	0x200006d4

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b094      	sub	sp, #80	@ 0x50
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	2230      	movs	r2, #48	@ 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 faea 	bl	8004cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b28      	ldr	r3, [pc, #160]	@ (80017b4 <SystemClock_Config+0xcc>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	4a27      	ldr	r2, [pc, #156]	@ (80017b4 <SystemClock_Config+0xcc>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6413      	str	r3, [r2, #64]	@ 0x40
 800171c:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <SystemClock_Config+0xcc>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <SystemClock_Config+0xd0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a21      	ldr	r2, [pc, #132]	@ (80017b8 <SystemClock_Config+0xd0>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <SystemClock_Config+0xd0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001744:	2301      	movs	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001748:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174e:	2302      	movs	r3, #2
 8001750:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001752:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001758:	2308      	movs	r3, #8
 800175a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800175c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001760:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001762:	2302      	movs	r3, #2
 8001764:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001766:	2304      	movs	r3, #4
 8001768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176a:	f107 0320 	add.w	r3, r7, #32
 800176e:	4618      	mov	r0, r3
 8001770:	f001 f924 	bl	80029bc <HAL_RCC_OscConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800177a:	f000 f81f 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177e:	230f      	movs	r3, #15
 8001780:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001782:	2302      	movs	r3, #2
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800178a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800178e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001794:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2105      	movs	r1, #5
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fb85 	bl	8002eac <HAL_RCC_ClockConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017a8:	f000 f808 	bl	80017bc <Error_Handler>
  }
}
 80017ac:	bf00      	nop
 80017ae:	3750      	adds	r7, #80	@ 0x50
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <Error_Handler+0x8>

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_MspInit+0x4c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <HAL_MspInit+0x4c>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_MspInit+0x4c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <HAL_MspInit+0x4c>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <NMI_Handler+0x4>

08001820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <MemManage_Handler+0x4>

08001830 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <UsageFault_Handler+0x4>

08001840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186e:	f000 fa67 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <DMA1_Stream1_IRQHandler+0x10>)
 800187e:	f000 fc97 	bl	80021b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000071c 	.word	0x2000071c

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a6:	f003 fa65 	bl	8004d74 <__errno>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2216      	movs	r2, #22
 80018ae:	601a      	str	r2, [r3, #0]
  return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_exit>:

void _exit (int status)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe7 	bl	800189c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ce:	bf00      	nop
 80018d0:	e7fd      	b.n	80018ce <_exit+0x12>

080018d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e00a      	b.n	80018fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e4:	f3af 8000 	nop.w
 80018e8:	4601      	mov	r1, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	60ba      	str	r2, [r7, #8]
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	dbf0      	blt.n	80018e4 <_read+0x12>
  }

  return len;
 8001902:	687b      	ldr	r3, [r7, #4]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e009      	b.n	8001932 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	60ba      	str	r2, [r7, #8]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe42 	bl	80015b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	dbf1      	blt.n	800191e <_write+0x12>
  }
  return len;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_close>:

int _close(int file)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800196c:	605a      	str	r2, [r3, #4]
  return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_isatty>:

int _isatty(int file)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f003 f9ca 	bl	8004d74 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20020000 	.word	0x20020000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	20000688 	.word	0x20000688
 8001a14:	200008d0 	.word	0x200008d0

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <MX_USART2_UART_Init+0x50>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a74:	f001 fc3a 	bl	80032ec <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a7e:	f7ff fe9d 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000068c 	.word	0x2000068c
 8001a8c:	40004400 	.word	0x40004400

08001a90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <MX_USART3_UART_Init+0x50>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_USART3_UART_Init+0x4c>)
 8001ac8:	f001 fc60 	bl	800338c <HAL_HalfDuplex_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ad2:	f7ff fe73 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200006d4 	.word	0x200006d4
 8001ae0:	40004800 	.word	0x40004800

08001ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	@ 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a4a      	ldr	r2, [pc, #296]	@ (8001c2c <HAL_UART_MspInit+0x148>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12c      	bne.n	8001b60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	4b49      	ldr	r3, [pc, #292]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a48      	ldr	r2, [pc, #288]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b46      	ldr	r3, [pc, #280]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	4b42      	ldr	r3, [pc, #264]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a41      	ldr	r2, [pc, #260]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b3f      	ldr	r3, [pc, #252]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4836      	ldr	r0, [pc, #216]	@ (8001c34 <HAL_UART_MspInit+0x150>)
 8001b5a:	f000 fd93 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b5e:	e061      	b.n	8001c24 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a34      	ldr	r2, [pc, #208]	@ (8001c38 <HAL_UART_MspInit+0x154>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d15c      	bne.n	8001c24 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b30      	ldr	r3, [pc, #192]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a2f      	ldr	r2, [pc, #188]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b29      	ldr	r3, [pc, #164]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a28      	ldr	r2, [pc, #160]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b26      	ldr	r3, [pc, #152]	@ (8001c30 <HAL_UART_MspInit+0x14c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481f      	ldr	r0, [pc, #124]	@ (8001c3c <HAL_UART_MspInit+0x158>)
 8001bc0:	f000 fd60 	bl	8002684 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c44 <HAL_UART_MspInit+0x160>)
 8001bc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001bcc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bd0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001be0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001bfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c00:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c08:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001c0a:	f000 f9cb 	bl	8001fa4 <HAL_DMA_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8001c14:	f7ff fdd2 	bl	80017bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_UART_MspInit+0x15c>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c24:	bf00      	nop
 8001c26:	3730      	adds	r7, #48	@ 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40004800 	.word	0x40004800
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	2000071c 	.word	0x2000071c
 8001c44:	40026028 	.word	0x40026028

08001c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c4c:	f7ff fee4 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c50:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c52:	490d      	ldr	r1, [pc, #52]	@ (8001c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c68:	4c0a      	ldr	r4, [pc, #40]	@ (8001c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c76:	f003 f883 	bl	8004d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7a:	f7ff fd0d 	bl	8001698 <main>
  bx  lr    
 8001c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c8c:	08007258 	.word	0x08007258
  ldr r2, =_sbss
 8001c90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c94:	200008cc 	.word	0x200008cc

08001c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <HAL_Init+0x40>)
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <HAL_Init+0x40>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <HAL_Init+0x40>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f92b 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fd7a 	bl	80017c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f943 	bl	8001f8a <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 f90b 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	2000077c 	.word	0x2000077c

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000077c 	.word	0x2000077c

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4907      	ldr	r1, [pc, #28]	@ (8001e1c <__NVIC_EnableIRQ+0x38>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	@ (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	@ (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f7ff ff8e 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff29 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff3e 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff8e 	bl	8001e74 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5d 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff31 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa2 	bl	8001edc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff feda 	bl	8001d68 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e099      	b.n	80020f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	e00f      	b.n	8002002 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe2:	f7ff fec1 	bl	8001d68 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d908      	bls.n	8002002 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e078      	b.n	80020f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e8      	bne.n	8001fe2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4b38      	ldr	r3, [pc, #224]	@ (80020fc <HAL_DMA_Init+0x158>)
 800201c:	4013      	ands	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	2b04      	cmp	r3, #4
 800205a:	d107      	bne.n	800206c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4313      	orrs	r3, r2
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f023 0307 	bic.w	r3, r3, #7
 8002082:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	2b04      	cmp	r3, #4
 8002094:	d117      	bne.n	80020c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fa6f 	bl	800258c <DMA_CheckFifoParam>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2240      	movs	r2, #64	@ 0x40
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020c2:	2301      	movs	r3, #1
 80020c4:	e016      	b.n	80020f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fa26 	bl	8002520 <DMA_CalcBaseAndBitshift>
 80020d4:	4603      	mov	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	223f      	movs	r2, #63	@ 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	f010803f 	.word	0xf010803f

08002100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_DMA_Start_IT+0x26>
 8002122:	2302      	movs	r3, #2
 8002124:	e040      	b.n	80021a8 <HAL_DMA_Start_IT+0xa8>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d12f      	bne.n	800219a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f9b8 	bl	80024c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	223f      	movs	r2, #63	@ 0x3f
 800215a:	409a      	lsls	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0216 	orr.w	r2, r2, #22
 800216e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e005      	b.n	80021a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021a2:	2302      	movs	r3, #2
 80021a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021bc:	4b8e      	ldr	r3, [pc, #568]	@ (80023f8 <HAL_DMA_IRQHandler+0x248>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a8e      	ldr	r2, [pc, #568]	@ (80023fc <HAL_DMA_IRQHandler+0x24c>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	2208      	movs	r2, #8
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01a      	beq.n	800221c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0204 	bic.w	r2, r2, #4
 8002202:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	2208      	movs	r2, #8
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002220:	2201      	movs	r2, #1
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d012      	beq.n	8002252 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	2201      	movs	r2, #1
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224a:	f043 0202 	orr.w	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	2204      	movs	r2, #4
 8002258:	409a      	lsls	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d012      	beq.n	8002288 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	2204      	movs	r2, #4
 8002276:	409a      	lsls	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002280:	f043 0204 	orr.w	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	2210      	movs	r2, #16
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d043      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d03c      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022aa:	2210      	movs	r2, #16
 80022ac:	409a      	lsls	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d018      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d024      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
 80022de:	e01f      	b.n	8002320 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01b      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
 80022f0:	e016      	b.n	8002320 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0208 	bic.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	2220      	movs	r2, #32
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 808f 	beq.w	8002450 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8087 	beq.w	8002450 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	2220      	movs	r2, #32
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b05      	cmp	r3, #5
 8002358:	d136      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0216 	bic.w	r2, r2, #22
 8002368:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002378:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_DMA_IRQHandler+0x1da>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0208 	bic.w	r2, r2, #8
 8002398:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	223f      	movs	r2, #63	@ 0x3f
 80023a0:	409a      	lsls	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d07e      	beq.n	80024bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
        }
        return;
 80023c6:	e079      	b.n	80024bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01d      	beq.n	8002412 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10d      	bne.n	8002400 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d031      	beq.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e02c      	b.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000
 80023fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
 8002410:	e01e      	b.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10f      	bne.n	8002440 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0210 	bic.w	r2, r2, #16
 800242e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002454:	2b00      	cmp	r3, #0
 8002456:	d032      	beq.n	80024be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d022      	beq.n	80024aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2205      	movs	r2, #5
 8002468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3301      	adds	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	d307      	bcc.n	8002498 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f2      	bne.n	800247c <HAL_DMA_IRQHandler+0x2cc>
 8002496:	e000      	b.n	800249a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002498:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
 80024ba:	e000      	b.n	80024be <HAL_DMA_IRQHandler+0x30e>
        return;
 80024bc:	bf00      	nop
    }
  }
}
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b40      	cmp	r3, #64	@ 0x40
 80024f0:	d108      	bne.n	8002504 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002502:	e007      	b.n	8002514 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3b10      	subs	r3, #16
 8002530:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <DMA_CalcBaseAndBitshift+0x64>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800253a:	4a13      	ldr	r2, [pc, #76]	@ (8002588 <DMA_CalcBaseAndBitshift+0x68>)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d909      	bls.n	8002562 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002556:	f023 0303 	bic.w	r3, r3, #3
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002560:	e007      	b.n	8002572 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	aaaaaaab 	.word	0xaaaaaaab
 8002588:	08006e88 	.word	0x08006e88

0800258c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d856      	bhi.n	800265a <DMA_CheckFifoParam+0xce>
 80025ac:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <DMA_CheckFifoParam+0x28>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d7 	.word	0x080025d7
 80025bc:	080025c5 	.word	0x080025c5
 80025c0:	0800265b 	.word	0x0800265b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d046      	beq.n	800265e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e043      	b.n	800265e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025de:	d140      	bne.n	8002662 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e03d      	b.n	8002662 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ee:	d121      	bne.n	8002634 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d837      	bhi.n	8002666 <DMA_CheckFifoParam+0xda>
 80025f6:	a201      	add	r2, pc, #4	@ (adr r2, 80025fc <DMA_CheckFifoParam+0x70>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	08002613 	.word	0x08002613
 8002604:	0800260d 	.word	0x0800260d
 8002608:	08002625 	.word	0x08002625
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e030      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d025      	beq.n	800266a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e022      	b.n	800266a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800262c:	d11f      	bne.n	800266e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002632:	e01c      	b.n	800266e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d903      	bls.n	8002642 <DMA_CheckFifoParam+0xb6>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d003      	beq.n	8002648 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002640:	e018      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      break;
 8002646:	e015      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e00b      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 800265a:	bf00      	nop
 800265c:	e00a      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e008      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002662:	bf00      	nop
 8002664:	e006      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
 8002668:	e004      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;   
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
    }
  } 
  
  return status; 
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e16b      	b.n	8002978 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 815a 	bne.w	8002972 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d005      	beq.n	80026d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d130      	bne.n	8002738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0201 	and.w	r2, r3, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b03      	cmp	r3, #3
 8002742:	d017      	beq.n	8002774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80b4 	beq.w	8002972 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b60      	ldr	r3, [pc, #384]	@ (8002990 <HAL_GPIO_Init+0x30c>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	4a5f      	ldr	r2, [pc, #380]	@ (8002990 <HAL_GPIO_Init+0x30c>)
 8002814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002818:	6453      	str	r3, [r2, #68]	@ 0x44
 800281a:	4b5d      	ldr	r3, [pc, #372]	@ (8002990 <HAL_GPIO_Init+0x30c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002826:	4a5b      	ldr	r2, [pc, #364]	@ (8002994 <HAL_GPIO_Init+0x310>)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	220f      	movs	r2, #15
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <HAL_GPIO_Init+0x314>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d02b      	beq.n	80028aa <HAL_GPIO_Init+0x226>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a51      	ldr	r2, [pc, #324]	@ (800299c <HAL_GPIO_Init+0x318>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d025      	beq.n	80028a6 <HAL_GPIO_Init+0x222>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a50      	ldr	r2, [pc, #320]	@ (80029a0 <HAL_GPIO_Init+0x31c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01f      	beq.n	80028a2 <HAL_GPIO_Init+0x21e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4f      	ldr	r2, [pc, #316]	@ (80029a4 <HAL_GPIO_Init+0x320>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d019      	beq.n	800289e <HAL_GPIO_Init+0x21a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4e      	ldr	r2, [pc, #312]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <HAL_GPIO_Init+0x216>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4d      	ldr	r2, [pc, #308]	@ (80029ac <HAL_GPIO_Init+0x328>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00d      	beq.n	8002896 <HAL_GPIO_Init+0x212>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4c      	ldr	r2, [pc, #304]	@ (80029b0 <HAL_GPIO_Init+0x32c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <HAL_GPIO_Init+0x20e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4b      	ldr	r2, [pc, #300]	@ (80029b4 <HAL_GPIO_Init+0x330>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_GPIO_Init+0x20a>
 800288a:	2307      	movs	r3, #7
 800288c:	e00e      	b.n	80028ac <HAL_GPIO_Init+0x228>
 800288e:	2308      	movs	r3, #8
 8002890:	e00c      	b.n	80028ac <HAL_GPIO_Init+0x228>
 8002892:	2306      	movs	r3, #6
 8002894:	e00a      	b.n	80028ac <HAL_GPIO_Init+0x228>
 8002896:	2305      	movs	r3, #5
 8002898:	e008      	b.n	80028ac <HAL_GPIO_Init+0x228>
 800289a:	2304      	movs	r3, #4
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x228>
 800289e:	2303      	movs	r3, #3
 80028a0:	e004      	b.n	80028ac <HAL_GPIO_Init+0x228>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e002      	b.n	80028ac <HAL_GPIO_Init+0x228>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x228>
 80028aa:	2300      	movs	r3, #0
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f002 0203 	and.w	r2, r2, #3
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4093      	lsls	r3, r2
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028bc:	4935      	ldr	r1, [pc, #212]	@ (8002994 <HAL_GPIO_Init+0x310>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ca:	4b3b      	ldr	r3, [pc, #236]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ee:	4a32      	ldr	r2, [pc, #200]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f4:	4b30      	ldr	r3, [pc, #192]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002918:	4a27      	ldr	r2, [pc, #156]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800291e:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002942:	4a1d      	ldr	r2, [pc, #116]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002948:	4b1b      	ldr	r3, [pc, #108]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800296c:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3301      	adds	r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b0f      	cmp	r3, #15
 800297c:	f67f ae90 	bls.w	80026a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3724      	adds	r7, #36	@ 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	40013800 	.word	0x40013800
 8002998:	40020000 	.word	0x40020000
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40021400 	.word	0x40021400
 80029b0:	40021800 	.word	0x40021800
 80029b4:	40021c00 	.word	0x40021c00
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e267      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d075      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029da:	4b88      	ldr	r3, [pc, #544]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d00c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e6:	4b85      	ldr	r3, [pc, #532]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d112      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4b82      	ldr	r3, [pc, #520]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029fe:	d10b      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	4b7e      	ldr	r3, [pc, #504]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d05b      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x108>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d157      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e242      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x74>
 8002a22:	4b76      	ldr	r3, [pc, #472]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a75      	ldr	r2, [pc, #468]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xb0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x98>
 8002a3a:	4b70      	ldr	r3, [pc, #448]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6f      	ldr	r2, [pc, #444]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6d      	ldr	r3, [pc, #436]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xb0>
 8002a54:	4b69      	ldr	r3, [pc, #420]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a68      	ldr	r2, [pc, #416]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b66      	ldr	r3, [pc, #408]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a65      	ldr	r2, [pc, #404]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff f978 	bl	8001d68 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7ff f974 	bl	8001d68 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e207      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xc0>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff f964 	bl	8001d68 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff f960 	bl	8001d68 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1f3      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b51      	ldr	r3, [pc, #324]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xe8>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ade:	4b47      	ldr	r3, [pc, #284]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b44      	ldr	r3, [pc, #272]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b41      	ldr	r3, [pc, #260]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x152>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1c7      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4937      	ldr	r1, [pc, #220]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e03a      	b.n	8002b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b34      	ldr	r3, [pc, #208]	@ (8002c00 <HAL_RCC_OscConfig+0x244>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7ff f919 	bl	8001d68 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7ff f915 	bl	8001d68 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1a8      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b28      	ldr	r3, [pc, #160]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4925      	ldr	r1, [pc, #148]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	4b24      	ldr	r3, [pc, #144]	@ (8002c00 <HAL_RCC_OscConfig+0x244>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff f8f8 	bl	8001d68 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff f8f4 	bl	8001d68 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e187      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d036      	beq.n	8002c14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_RCC_OscConfig+0x248>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7ff f8d8 	bl	8001d68 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7ff f8d4 	bl	8001d68 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e167      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x200>
 8002bda:	e01b      	b.n	8002c14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_OscConfig+0x248>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be2:	f7ff f8c1 	bl	8001d68 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	e00e      	b.n	8002c08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bea:	f7ff f8bd 	bl	8001d68 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d907      	bls.n	8002c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e150      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	42470000 	.word	0x42470000
 8002c04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b88      	ldr	r3, [pc, #544]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ea      	bne.n	8002bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8097 	beq.w	8002d50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b81      	ldr	r3, [pc, #516]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b7d      	ldr	r3, [pc, #500]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c42:	4b7a      	ldr	r3, [pc, #488]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b77      	ldr	r3, [pc, #476]	@ (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b74      	ldr	r3, [pc, #464]	@ (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a73      	ldr	r2, [pc, #460]	@ (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff f87d 	bl	8001d68 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7ff f879 	bl	8001d68 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e10c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x2ea>
 8002c98:	4b64      	ldr	r3, [pc, #400]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	4a63      	ldr	r2, [pc, #396]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x324>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x30c>
 8002cae:	4b5f      	ldr	r3, [pc, #380]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cba:	4b5c      	ldr	r3, [pc, #368]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x324>
 8002cc8:	4b58      	ldr	r3, [pc, #352]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ccc:	4a57      	ldr	r2, [pc, #348]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd4:	4b55      	ldr	r3, [pc, #340]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	4a54      	ldr	r2, [pc, #336]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7ff f83e 	bl	8001d68 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7ff f83a 	bl	8001d68 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0cb      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	4b49      	ldr	r3, [pc, #292]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ee      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x334>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7ff f828 	bl	8001d68 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7ff f824 	bl	8001d68 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0b5      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d32:	4b3e      	ldr	r3, [pc, #248]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d44:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	4a38      	ldr	r2, [pc, #224]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a1 	beq.w	8002e9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5a:	4b34      	ldr	r3, [pc, #208]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d05c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d141      	bne.n	8002df2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b31      	ldr	r3, [pc, #196]	@ (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fff8 	bl	8001d68 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fff4 	bl	8001d68 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e087      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	4b27      	ldr	r3, [pc, #156]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	061b      	lsls	r3, r3, #24
 8002dbe:	491b      	ldr	r1, [pc, #108]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe ffcd 	bl	8001d68 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe ffc9 	bl	8001d68 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e05c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x416>
 8002df0:	e054      	b.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe ffb6 	bl	8001d68 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe ffb2 	bl	8001d68 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e045      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x444>
 8002e1e:	e03d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e038      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000
 8002e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x4ec>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d028      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d121      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d11a      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d111      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	3b01      	subs	r3, #1
 8002e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0cc      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b68      	ldr	r3, [pc, #416]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d90c      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b65      	ldr	r3, [pc, #404]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b63      	ldr	r3, [pc, #396]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b8      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b59      	ldr	r3, [pc, #356]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a58      	ldr	r2, [pc, #352]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f18:	4b53      	ldr	r3, [pc, #332]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b50      	ldr	r3, [pc, #320]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	494d      	ldr	r1, [pc, #308]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d044      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b47      	ldr	r3, [pc, #284]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d119      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e067      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b37      	ldr	r3, [pc, #220]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4934      	ldr	r1, [pc, #208]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe fee4 	bl	8001d68 <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7fe fee0 	bl	8001d68 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d20c      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e032      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4916      	ldr	r1, [pc, #88]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490e      	ldr	r1, [pc, #56]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003032:	f000 f821 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490a      	ldr	r1, [pc, #40]	@ (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fe44 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00
 8003068:	40023800 	.word	0x40023800
 800306c:	08006e70 	.word	0x08006e70
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b094      	sub	sp, #80	@ 0x50
 800307e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003090:	4b79      	ldr	r3, [pc, #484]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d00d      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x40>
 800309c:	2b08      	cmp	r3, #8
 800309e:	f200 80e1 	bhi.w	8003264 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030aa:	e0db      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b73      	ldr	r3, [pc, #460]	@ (800327c <HAL_RCC_GetSysClockFreq+0x204>)
 80030ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b0:	e0db      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b2:	4b73      	ldr	r3, [pc, #460]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x208>)
 80030b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b6:	e0d8      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d063      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	2200      	movs	r2, #0
 80030d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030ea:	4622      	mov	r2, r4
 80030ec:	462b      	mov	r3, r5
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	0159      	lsls	r1, r3, #5
 80030f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fc:	0150      	lsls	r0, r2, #5
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4621      	mov	r1, r4
 8003104:	1a51      	subs	r1, r2, r1
 8003106:	6139      	str	r1, [r7, #16]
 8003108:	4629      	mov	r1, r5
 800310a:	eb63 0301 	sbc.w	r3, r3, r1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800311c:	4659      	mov	r1, fp
 800311e:	018b      	lsls	r3, r1, #6
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003126:	4651      	mov	r1, sl
 8003128:	018a      	lsls	r2, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	ebb2 0801 	subs.w	r8, r2, r1
 8003130:	4659      	mov	r1, fp
 8003132:	eb63 0901 	sbc.w	r9, r3, r1
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800314a:	4690      	mov	r8, r2
 800314c:	4699      	mov	r9, r3
 800314e:	4623      	mov	r3, r4
 8003150:	eb18 0303 	adds.w	r3, r8, r3
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	462b      	mov	r3, r5
 8003158:	eb49 0303 	adc.w	r3, r9, r3
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800316a:	4629      	mov	r1, r5
 800316c:	024b      	lsls	r3, r1, #9
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003174:	4621      	mov	r1, r4
 8003176:	024a      	lsls	r2, r1, #9
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003188:	f7fd fd5e 	bl	8000c48 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003194:	e058      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003196:	4b38      	ldr	r3, [pc, #224]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	2200      	movs	r2, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	4611      	mov	r1, r2
 80031a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0159      	lsls	r1, r3, #5
 80031be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c2:	0150      	lsls	r0, r2, #5
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4641      	mov	r1, r8
 80031ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031e8:	ebb2 040a 	subs.w	r4, r2, sl
 80031ec:	eb63 050b 	sbc.w	r5, r3, fp
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	464b      	mov	r3, r9
 800320c:	eb45 0303 	adc.w	r3, r5, r3
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321e:	4629      	mov	r1, r5
 8003220:	028b      	lsls	r3, r1, #10
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003228:	4621      	mov	r1, r4
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003232:	2200      	movs	r2, #0
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	61fa      	str	r2, [r7, #28]
 8003238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323c:	f7fd fd04 	bl	8000c48 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003248:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003258:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800325a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_RCC_GetSysClockFreq+0x204>)
 8003266:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800326c:	4618      	mov	r0, r3
 800326e:	3750      	adds	r7, #80	@ 0x50
 8003270:	46bd      	mov	sp, r7
 8003272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	@ (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a0:	f7ff fff0 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	@ (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08006e80 	.word	0x08006e80

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032c8:	f7ff ffdc 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0b5b      	lsrs	r3, r3, #13
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	@ (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08006e80 	.word	0x08006e80

080032ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e042      	b.n	8003384 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe fbe6 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	@ 0x24
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800332e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fbdf 	bl	8003af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e04a      	b.n	8003434 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe fb96 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	@ 0x24
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fb8f 	bl	8003af4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80033f4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0208 	orr.w	r2, r2, #8
 8003404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b20      	cmp	r3, #32
 800345a:	d175      	bne.n	8003548 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_UART_Transmit+0x2c>
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e06e      	b.n	800354a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	@ 0x21
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800347a:	f7fe fc75 	bl	8001d68 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003494:	d108      	bne.n	80034a8 <HAL_UART_Transmit+0x6c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e003      	b.n	80034b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034b0:	e02e      	b.n	8003510 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2180      	movs	r1, #128	@ 0x80
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f98d 	bl	80037dc <UART_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e03a      	b.n	800354a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3302      	adds	r3, #2
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	e007      	b.n	8003502 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	3301      	adds	r3, #1
 8003500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1cb      	bne.n	80034b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	2140      	movs	r1, #64	@ 0x40
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f959 	bl	80037dc <UART_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e006      	b.n	800354a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b20      	cmp	r3, #32
 800356a:	d112      	bne.n	8003592 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_UART_Receive_DMA+0x26>
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e00b      	b.n	8003594 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	461a      	mov	r2, r3
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f981 	bl	8003890 <UART_Start_Receive_DMA>
 800358e:	4603      	mov	r3, r0
 8003590:	e000      	b.n	8003594 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b09c      	sub	sp, #112	@ 0x70
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d172      	bne.n	80036e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80035fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035fe:	2200      	movs	r2, #0
 8003600:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800361a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003622:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003624:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003628:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3314      	adds	r3, #20
 800363c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	667b      	str	r3, [r7, #100]	@ 0x64
 800364e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3314      	adds	r3, #20
 8003654:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003656:	647a      	str	r2, [r7, #68]	@ 0x44
 8003658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800365c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e5      	bne.n	8003636 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	623b      	str	r3, [r7, #32]
   return(result);
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003680:	663b      	str	r3, [r7, #96]	@ 0x60
 8003682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800368a:	633a      	str	r2, [r7, #48]	@ 0x30
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800369e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d119      	bne.n	80036e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f023 0310 	bic.w	r3, r3, #16
 80036c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80036ce:	61fa      	str	r2, [r7, #28]
 80036d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	617b      	str	r3, [r7, #20]
   return(result);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e5      	bne.n	80036ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d106      	bne.n	80036fe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036f4:	4619      	mov	r1, r3
 80036f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80036f8:	f7ff ff5a 	bl	80035b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036fc:	e002      	b.n	8003704 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80036fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003700:	f7fd ff68 	bl	80015d4 <HAL_UART_RxCpltCallback>
}
 8003704:	bf00      	nop
 8003706:	3770      	adds	r7, #112	@ 0x70
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	2b01      	cmp	r3, #1
 8003726:	d108      	bne.n	800373a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	b29b      	uxth	r3, r3
 8003730:	4619      	mov	r1, r3
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7ff ff3c 	bl	80035b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003738:	e002      	b.n	8003740 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff ff2e 	bl	800359c <HAL_UART_RxHalfCpltCallback>
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003758:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003764:	2b80      	cmp	r3, #128	@ 0x80
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b21      	cmp	r3, #33	@ 0x21
 800377a:	d108      	bne.n	800378e <UART_DMAError+0x46>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2200      	movs	r2, #0
 8003786:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003788:	68b8      	ldr	r0, [r7, #8]
 800378a:	f000 f927 	bl	80039dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b22      	cmp	r3, #34	@ 0x22
 80037ae:	d108      	bne.n	80037c2 <UART_DMAError+0x7a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2200      	movs	r2, #0
 80037ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80037bc:	68b8      	ldr	r0, [r7, #8]
 80037be:	f000 f935 	bl	8003a2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f043 0210 	orr.w	r2, r3, #16
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ce:	68b8      	ldr	r0, [r7, #8]
 80037d0:	f7fd ff1e 	bl	8001610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ec:	e03b      	b.n	8003866 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d037      	beq.n	8003866 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe fab7 	bl	8001d68 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <UART_WaitOnFlagUntilTimeout+0x30>
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e03a      	b.n	8003886 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d023      	beq.n	8003866 <UART_WaitOnFlagUntilTimeout+0x8a>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b80      	cmp	r3, #128	@ 0x80
 8003822:	d020      	beq.n	8003866 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b40      	cmp	r3, #64	@ 0x40
 8003828:	d01d      	beq.n	8003866 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d116      	bne.n	8003866 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f8ec 	bl	8003a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2208      	movs	r2, #8
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e00f      	b.n	8003886 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4013      	ands	r3, r2
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	429a      	cmp	r2, r3
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	429a      	cmp	r2, r3
 8003882:	d0b4      	beq.n	80037ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b098      	sub	sp, #96	@ 0x60
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2222      	movs	r2, #34	@ 0x22
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	4a44      	ldr	r2, [pc, #272]	@ (80039d0 <UART_Start_Receive_DMA+0x140>)
 80038be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	4a43      	ldr	r2, [pc, #268]	@ (80039d4 <UART_Start_Receive_DMA+0x144>)
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	4a42      	ldr	r2, [pc, #264]	@ (80039d8 <UART_Start_Receive_DMA+0x148>)
 80038ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	2200      	movs	r2, #0
 80038d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80038d8:	f107 0308 	add.w	r3, r7, #8
 80038dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	f7fe fc06 	bl	8002100 <HAL_DMA_Start_IT>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2210      	movs	r2, #16
 80038fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e05d      	b.n	80039c8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d019      	beq.n	800395e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800393a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003940:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	330c      	adds	r3, #12
 8003948:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800394a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800394c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003950:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e5      	bne.n	800392a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3314      	adds	r3, #20
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	657b      	str	r3, [r7, #84]	@ 0x54
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3314      	adds	r3, #20
 800397c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800397e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e5      	bne.n	800395e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	617b      	str	r3, [r7, #20]
   return(result);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80039b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80039b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6a39      	ldr	r1, [r7, #32]
 80039b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e5      	bne.n	8003992 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3760      	adds	r7, #96	@ 0x60
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	080035e1 	.word	0x080035e1
 80039d4:	0800370d 	.word	0x0800370d
 80039d8:	08003749 	.word	0x08003749

080039dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	@ 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	61ba      	str	r2, [r7, #24]
 8003a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	613b      	str	r3, [r7, #16]
   return(result);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e5      	bne.n	80039e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003a20:	bf00      	nop
 8003a22:	3724      	adds	r7, #36	@ 0x24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b095      	sub	sp, #84	@ 0x54
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a54:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e5      	bne.n	8003a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d119      	bne.n	8003ad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f023 0310 	bic.w	r3, r3, #16
 8003aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ac4:	61ba      	str	r2, [r7, #24]
 8003ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6979      	ldr	r1, [r7, #20]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e5      	bne.n	8003aa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ae6:	bf00      	nop
 8003ae8:	3754      	adds	r7, #84	@ 0x54
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b0c0      	sub	sp, #256	@ 0x100
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	68d9      	ldr	r1, [r3, #12]
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	ea40 0301 	orr.w	r3, r0, r1
 8003b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b4c:	f021 010c 	bic.w	r1, r1, #12
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6e:	6999      	ldr	r1, [r3, #24]
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	ea40 0301 	orr.w	r3, r0, r1
 8003b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b8f      	ldr	r3, [pc, #572]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d005      	beq.n	8003b94 <UART_SetConfig+0xa0>
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8003dc4 <UART_SetConfig+0x2d0>)
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d104      	bne.n	8003b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b94:	f7ff fb96 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8003b98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b9c:	e003      	b.n	8003ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b9e:	f7ff fb7d 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8003ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb0:	f040 810c 	bne.w	8003dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	462b      	mov	r3, r5
 8003bca:	1891      	adds	r1, r2, r2
 8003bcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bce:	415b      	adcs	r3, r3
 8003bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	eb12 0801 	adds.w	r8, r2, r1
 8003bdc:	4629      	mov	r1, r5
 8003bde:	eb43 0901 	adc.w	r9, r3, r1
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf6:	4690      	mov	r8, r2
 8003bf8:	4699      	mov	r9, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	eb18 0303 	adds.w	r3, r8, r3
 8003c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c04:	462b      	mov	r3, r5
 8003c06:	eb49 0303 	adc.w	r3, r9, r3
 8003c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c22:	460b      	mov	r3, r1
 8003c24:	18db      	adds	r3, r3, r3
 8003c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c28:	4613      	mov	r3, r2
 8003c2a:	eb42 0303 	adc.w	r3, r2, r3
 8003c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c38:	f7fd f806 	bl	8000c48 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4b61      	ldr	r3, [pc, #388]	@ (8003dc8 <UART_SetConfig+0x2d4>)
 8003c42:	fba3 2302 	umull	r2, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	011c      	lsls	r4, r3, #4
 8003c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	1891      	adds	r1, r2, r2
 8003c62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c64:	415b      	adcs	r3, r3
 8003c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c72:	4649      	mov	r1, r9
 8003c74:	eb43 0b01 	adc.w	fp, r3, r1
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c8c:	4692      	mov	sl, r2
 8003c8e:	469b      	mov	fp, r3
 8003c90:	4643      	mov	r3, r8
 8003c92:	eb1a 0303 	adds.w	r3, sl, r3
 8003c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	18db      	adds	r3, r3, r3
 8003cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cce:	f7fc ffbb 	bl	8000c48 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc8 <UART_SetConfig+0x2d4>)
 8003cda:	fba3 2301 	umull	r2, r3, r3, r1
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2264      	movs	r2, #100	@ 0x64
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	1acb      	subs	r3, r1, r3
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cee:	4b36      	ldr	r3, [pc, #216]	@ (8003dc8 <UART_SetConfig+0x2d4>)
 8003cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cfc:	441c      	add	r4, r3
 8003cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	1891      	adds	r1, r2, r2
 8003d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d18:	415b      	adcs	r3, r3
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d20:	4641      	mov	r1, r8
 8003d22:	1851      	adds	r1, r2, r1
 8003d24:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d26:	4649      	mov	r1, r9
 8003d28:	414b      	adcs	r3, r1
 8003d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d38:	4659      	mov	r1, fp
 8003d3a:	00cb      	lsls	r3, r1, #3
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d42:	4651      	mov	r1, sl
 8003d44:	00ca      	lsls	r2, r1, #3
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d54:	464b      	mov	r3, r9
 8003d56:	460a      	mov	r2, r1
 8003d58:	eb42 0303 	adc.w	r3, r2, r3
 8003d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d74:	460b      	mov	r3, r1
 8003d76:	18db      	adds	r3, r3, r3
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d8a:	f7fc ff5d 	bl	8000c48 <__aeabi_uldivmod>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <UART_SetConfig+0x2d4>)
 8003d94:	fba3 1302 	umull	r1, r3, r3, r2
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	2164      	movs	r1, #100	@ 0x64
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	3332      	adds	r3, #50	@ 0x32
 8003da6:	4a08      	ldr	r2, [pc, #32]	@ (8003dc8 <UART_SetConfig+0x2d4>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	f003 0207 	and.w	r2, r3, #7
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4422      	add	r2, r4
 8003dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dbc:	e106      	b.n	8003fcc <UART_SetConfig+0x4d8>
 8003dbe:	bf00      	nop
 8003dc0:	40011000 	.word	0x40011000
 8003dc4:	40011400 	.word	0x40011400
 8003dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dde:	4642      	mov	r2, r8
 8003de0:	464b      	mov	r3, r9
 8003de2:	1891      	adds	r1, r2, r2
 8003de4:	6239      	str	r1, [r7, #32]
 8003de6:	415b      	adcs	r3, r3
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dee:	4641      	mov	r1, r8
 8003df0:	1854      	adds	r4, r2, r1
 8003df2:	4649      	mov	r1, r9
 8003df4:	eb43 0501 	adc.w	r5, r3, r1
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	00eb      	lsls	r3, r5, #3
 8003e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e06:	00e2      	lsls	r2, r4, #3
 8003e08:	4614      	mov	r4, r2
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	4643      	mov	r3, r8
 8003e0e:	18e3      	adds	r3, r4, r3
 8003e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e14:	464b      	mov	r3, r9
 8003e16:	eb45 0303 	adc.w	r3, r5, r3
 8003e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	008b      	lsls	r3, r1, #2
 8003e3e:	4621      	mov	r1, r4
 8003e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e44:	4621      	mov	r1, r4
 8003e46:	008a      	lsls	r2, r1, #2
 8003e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e4c:	f7fc fefc 	bl	8000c48 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4b60      	ldr	r3, [pc, #384]	@ (8003fd8 <UART_SetConfig+0x4e4>)
 8003e56:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	011c      	lsls	r4, r3, #4
 8003e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	1891      	adds	r1, r2, r2
 8003e76:	61b9      	str	r1, [r7, #24]
 8003e78:	415b      	adcs	r3, r3
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e80:	4641      	mov	r1, r8
 8003e82:	1851      	adds	r1, r2, r1
 8003e84:	6139      	str	r1, [r7, #16]
 8003e86:	4649      	mov	r1, r9
 8003e88:	414b      	adcs	r3, r1
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e98:	4659      	mov	r1, fp
 8003e9a:	00cb      	lsls	r3, r1, #3
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	00ca      	lsls	r2, r1, #3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4642      	mov	r2, r8
 8003eae:	189b      	adds	r3, r3, r2
 8003eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	460a      	mov	r2, r1
 8003eb8:	eb42 0303 	adc.w	r3, r2, r3
 8003ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ed8:	4649      	mov	r1, r9
 8003eda:	008b      	lsls	r3, r1, #2
 8003edc:	4641      	mov	r1, r8
 8003ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	008a      	lsls	r2, r1, #2
 8003ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003eea:	f7fc fead 	bl	8000c48 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4b38      	ldr	r3, [pc, #224]	@ (8003fd8 <UART_SetConfig+0x4e4>)
 8003ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2264      	movs	r2, #100	@ 0x64
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	1acb      	subs	r3, r1, r3
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	3332      	adds	r3, #50	@ 0x32
 8003f08:	4a33      	ldr	r2, [pc, #204]	@ (8003fd8 <UART_SetConfig+0x4e4>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f14:	441c      	add	r4, r3
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	1891      	adds	r1, r2, r2
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	415b      	adcs	r3, r3
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f34:	4641      	mov	r1, r8
 8003f36:	1851      	adds	r1, r2, r1
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	414b      	adcs	r3, r1
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	00cb      	lsls	r3, r1, #3
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f56:	4651      	mov	r1, sl
 8003f58:	00ca      	lsls	r2, r1, #3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4642      	mov	r2, r8
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f66:	464b      	mov	r3, r9
 8003f68:	460a      	mov	r2, r1
 8003f6a:	eb42 0303 	adc.w	r3, r2, r3
 8003f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f88:	4649      	mov	r1, r9
 8003f8a:	008b      	lsls	r3, r1, #2
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f92:	4641      	mov	r1, r8
 8003f94:	008a      	lsls	r2, r1, #2
 8003f96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f9a:	f7fc fe55 	bl	8000c48 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <UART_SetConfig+0x4e4>)
 8003fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	2164      	movs	r1, #100	@ 0x64
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	3332      	adds	r3, #50	@ 0x32
 8003fb6:	4a08      	ldr	r2, [pc, #32]	@ (8003fd8 <UART_SetConfig+0x4e4>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 020f 	and.w	r2, r3, #15
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4422      	add	r2, r4
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd8:	51eb851f 	.word	0x51eb851f

08003fdc <__cvt>:
 8003fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe0:	ec57 6b10 	vmov	r6, r7, d0
 8003fe4:	2f00      	cmp	r7, #0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	4619      	mov	r1, r3
 8003fea:	463b      	mov	r3, r7
 8003fec:	bfbb      	ittet	lt
 8003fee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003ff2:	461f      	movlt	r7, r3
 8003ff4:	2300      	movge	r3, #0
 8003ff6:	232d      	movlt	r3, #45	@ 0x2d
 8003ff8:	700b      	strb	r3, [r1, #0]
 8003ffa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ffc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004000:	4691      	mov	r9, r2
 8004002:	f023 0820 	bic.w	r8, r3, #32
 8004006:	bfbc      	itt	lt
 8004008:	4632      	movlt	r2, r6
 800400a:	4616      	movlt	r6, r2
 800400c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004010:	d005      	beq.n	800401e <__cvt+0x42>
 8004012:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004016:	d100      	bne.n	800401a <__cvt+0x3e>
 8004018:	3401      	adds	r4, #1
 800401a:	2102      	movs	r1, #2
 800401c:	e000      	b.n	8004020 <__cvt+0x44>
 800401e:	2103      	movs	r1, #3
 8004020:	ab03      	add	r3, sp, #12
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	ab02      	add	r3, sp, #8
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	ec47 6b10 	vmov	d0, r6, r7
 800402c:	4653      	mov	r3, sl
 800402e:	4622      	mov	r2, r4
 8004030:	f000 ff56 	bl	8004ee0 <_dtoa_r>
 8004034:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004038:	4605      	mov	r5, r0
 800403a:	d119      	bne.n	8004070 <__cvt+0x94>
 800403c:	f019 0f01 	tst.w	r9, #1
 8004040:	d00e      	beq.n	8004060 <__cvt+0x84>
 8004042:	eb00 0904 	add.w	r9, r0, r4
 8004046:	2200      	movs	r2, #0
 8004048:	2300      	movs	r3, #0
 800404a:	4630      	mov	r0, r6
 800404c:	4639      	mov	r1, r7
 800404e:	f7fc fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004052:	b108      	cbz	r0, 8004058 <__cvt+0x7c>
 8004054:	f8cd 900c 	str.w	r9, [sp, #12]
 8004058:	2230      	movs	r2, #48	@ 0x30
 800405a:	9b03      	ldr	r3, [sp, #12]
 800405c:	454b      	cmp	r3, r9
 800405e:	d31e      	bcc.n	800409e <__cvt+0xc2>
 8004060:	9b03      	ldr	r3, [sp, #12]
 8004062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004064:	1b5b      	subs	r3, r3, r5
 8004066:	4628      	mov	r0, r5
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	b004      	add	sp, #16
 800406c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004070:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004074:	eb00 0904 	add.w	r9, r0, r4
 8004078:	d1e5      	bne.n	8004046 <__cvt+0x6a>
 800407a:	7803      	ldrb	r3, [r0, #0]
 800407c:	2b30      	cmp	r3, #48	@ 0x30
 800407e:	d10a      	bne.n	8004096 <__cvt+0xba>
 8004080:	2200      	movs	r2, #0
 8004082:	2300      	movs	r3, #0
 8004084:	4630      	mov	r0, r6
 8004086:	4639      	mov	r1, r7
 8004088:	f7fc fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800408c:	b918      	cbnz	r0, 8004096 <__cvt+0xba>
 800408e:	f1c4 0401 	rsb	r4, r4, #1
 8004092:	f8ca 4000 	str.w	r4, [sl]
 8004096:	f8da 3000 	ldr.w	r3, [sl]
 800409a:	4499      	add	r9, r3
 800409c:	e7d3      	b.n	8004046 <__cvt+0x6a>
 800409e:	1c59      	adds	r1, r3, #1
 80040a0:	9103      	str	r1, [sp, #12]
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	e7d9      	b.n	800405a <__cvt+0x7e>

080040a6 <__exponent>:
 80040a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a8:	2900      	cmp	r1, #0
 80040aa:	bfba      	itte	lt
 80040ac:	4249      	neglt	r1, r1
 80040ae:	232d      	movlt	r3, #45	@ 0x2d
 80040b0:	232b      	movge	r3, #43	@ 0x2b
 80040b2:	2909      	cmp	r1, #9
 80040b4:	7002      	strb	r2, [r0, #0]
 80040b6:	7043      	strb	r3, [r0, #1]
 80040b8:	dd29      	ble.n	800410e <__exponent+0x68>
 80040ba:	f10d 0307 	add.w	r3, sp, #7
 80040be:	461d      	mov	r5, r3
 80040c0:	270a      	movs	r7, #10
 80040c2:	461a      	mov	r2, r3
 80040c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80040c8:	fb07 1416 	mls	r4, r7, r6, r1
 80040cc:	3430      	adds	r4, #48	@ 0x30
 80040ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040d2:	460c      	mov	r4, r1
 80040d4:	2c63      	cmp	r4, #99	@ 0x63
 80040d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80040da:	4631      	mov	r1, r6
 80040dc:	dcf1      	bgt.n	80040c2 <__exponent+0x1c>
 80040de:	3130      	adds	r1, #48	@ 0x30
 80040e0:	1e94      	subs	r4, r2, #2
 80040e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040e6:	1c41      	adds	r1, r0, #1
 80040e8:	4623      	mov	r3, r4
 80040ea:	42ab      	cmp	r3, r5
 80040ec:	d30a      	bcc.n	8004104 <__exponent+0x5e>
 80040ee:	f10d 0309 	add.w	r3, sp, #9
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	42ac      	cmp	r4, r5
 80040f6:	bf88      	it	hi
 80040f8:	2300      	movhi	r3, #0
 80040fa:	3302      	adds	r3, #2
 80040fc:	4403      	add	r3, r0
 80040fe:	1a18      	subs	r0, r3, r0
 8004100:	b003      	add	sp, #12
 8004102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004104:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004108:	f801 6f01 	strb.w	r6, [r1, #1]!
 800410c:	e7ed      	b.n	80040ea <__exponent+0x44>
 800410e:	2330      	movs	r3, #48	@ 0x30
 8004110:	3130      	adds	r1, #48	@ 0x30
 8004112:	7083      	strb	r3, [r0, #2]
 8004114:	70c1      	strb	r1, [r0, #3]
 8004116:	1d03      	adds	r3, r0, #4
 8004118:	e7f1      	b.n	80040fe <__exponent+0x58>
	...

0800411c <_printf_float>:
 800411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004120:	b08d      	sub	sp, #52	@ 0x34
 8004122:	460c      	mov	r4, r1
 8004124:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004128:	4616      	mov	r6, r2
 800412a:	461f      	mov	r7, r3
 800412c:	4605      	mov	r5, r0
 800412e:	f000 fdd7 	bl	8004ce0 <_localeconv_r>
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	9304      	str	r3, [sp, #16]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fc f89a 	bl	8000270 <strlen>
 800413c:	2300      	movs	r3, #0
 800413e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004140:	f8d8 3000 	ldr.w	r3, [r8]
 8004144:	9005      	str	r0, [sp, #20]
 8004146:	3307      	adds	r3, #7
 8004148:	f023 0307 	bic.w	r3, r3, #7
 800414c:	f103 0208 	add.w	r2, r3, #8
 8004150:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004154:	f8d4 b000 	ldr.w	fp, [r4]
 8004158:	f8c8 2000 	str.w	r2, [r8]
 800415c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004160:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004164:	9307      	str	r3, [sp, #28]
 8004166:	f8cd 8018 	str.w	r8, [sp, #24]
 800416a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800416e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004172:	4b9c      	ldr	r3, [pc, #624]	@ (80043e4 <_printf_float+0x2c8>)
 8004174:	f04f 32ff 	mov.w	r2, #4294967295
 8004178:	f7fc fcd8 	bl	8000b2c <__aeabi_dcmpun>
 800417c:	bb70      	cbnz	r0, 80041dc <_printf_float+0xc0>
 800417e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004182:	4b98      	ldr	r3, [pc, #608]	@ (80043e4 <_printf_float+0x2c8>)
 8004184:	f04f 32ff 	mov.w	r2, #4294967295
 8004188:	f7fc fcb2 	bl	8000af0 <__aeabi_dcmple>
 800418c:	bb30      	cbnz	r0, 80041dc <_printf_float+0xc0>
 800418e:	2200      	movs	r2, #0
 8004190:	2300      	movs	r3, #0
 8004192:	4640      	mov	r0, r8
 8004194:	4649      	mov	r1, r9
 8004196:	f7fc fca1 	bl	8000adc <__aeabi_dcmplt>
 800419a:	b110      	cbz	r0, 80041a2 <_printf_float+0x86>
 800419c:	232d      	movs	r3, #45	@ 0x2d
 800419e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041a2:	4a91      	ldr	r2, [pc, #580]	@ (80043e8 <_printf_float+0x2cc>)
 80041a4:	4b91      	ldr	r3, [pc, #580]	@ (80043ec <_printf_float+0x2d0>)
 80041a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041aa:	bf8c      	ite	hi
 80041ac:	4690      	movhi	r8, r2
 80041ae:	4698      	movls	r8, r3
 80041b0:	2303      	movs	r3, #3
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	f02b 0304 	bic.w	r3, fp, #4
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	f04f 0900 	mov.w	r9, #0
 80041be:	9700      	str	r7, [sp, #0]
 80041c0:	4633      	mov	r3, r6
 80041c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80041c4:	4621      	mov	r1, r4
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 f9d2 	bl	8004570 <_printf_common>
 80041cc:	3001      	adds	r0, #1
 80041ce:	f040 808d 	bne.w	80042ec <_printf_float+0x1d0>
 80041d2:	f04f 30ff 	mov.w	r0, #4294967295
 80041d6:	b00d      	add	sp, #52	@ 0x34
 80041d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	4640      	mov	r0, r8
 80041e2:	4649      	mov	r1, r9
 80041e4:	f7fc fca2 	bl	8000b2c <__aeabi_dcmpun>
 80041e8:	b140      	cbz	r0, 80041fc <_printf_float+0xe0>
 80041ea:	464b      	mov	r3, r9
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bfbc      	itt	lt
 80041f0:	232d      	movlt	r3, #45	@ 0x2d
 80041f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80041f6:	4a7e      	ldr	r2, [pc, #504]	@ (80043f0 <_printf_float+0x2d4>)
 80041f8:	4b7e      	ldr	r3, [pc, #504]	@ (80043f4 <_printf_float+0x2d8>)
 80041fa:	e7d4      	b.n	80041a6 <_printf_float+0x8a>
 80041fc:	6863      	ldr	r3, [r4, #4]
 80041fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004202:	9206      	str	r2, [sp, #24]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	d13b      	bne.n	8004280 <_printf_float+0x164>
 8004208:	2306      	movs	r3, #6
 800420a:	6063      	str	r3, [r4, #4]
 800420c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004210:	2300      	movs	r3, #0
 8004212:	6022      	str	r2, [r4, #0]
 8004214:	9303      	str	r3, [sp, #12]
 8004216:	ab0a      	add	r3, sp, #40	@ 0x28
 8004218:	e9cd a301 	strd	sl, r3, [sp, #4]
 800421c:	ab09      	add	r3, sp, #36	@ 0x24
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	6861      	ldr	r1, [r4, #4]
 8004222:	ec49 8b10 	vmov	d0, r8, r9
 8004226:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800422a:	4628      	mov	r0, r5
 800422c:	f7ff fed6 	bl	8003fdc <__cvt>
 8004230:	9b06      	ldr	r3, [sp, #24]
 8004232:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004234:	2b47      	cmp	r3, #71	@ 0x47
 8004236:	4680      	mov	r8, r0
 8004238:	d129      	bne.n	800428e <_printf_float+0x172>
 800423a:	1cc8      	adds	r0, r1, #3
 800423c:	db02      	blt.n	8004244 <_printf_float+0x128>
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	4299      	cmp	r1, r3
 8004242:	dd41      	ble.n	80042c8 <_printf_float+0x1ac>
 8004244:	f1aa 0a02 	sub.w	sl, sl, #2
 8004248:	fa5f fa8a 	uxtb.w	sl, sl
 800424c:	3901      	subs	r1, #1
 800424e:	4652      	mov	r2, sl
 8004250:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004254:	9109      	str	r1, [sp, #36]	@ 0x24
 8004256:	f7ff ff26 	bl	80040a6 <__exponent>
 800425a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800425c:	1813      	adds	r3, r2, r0
 800425e:	2a01      	cmp	r2, #1
 8004260:	4681      	mov	r9, r0
 8004262:	6123      	str	r3, [r4, #16]
 8004264:	dc02      	bgt.n	800426c <_printf_float+0x150>
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	07d2      	lsls	r2, r2, #31
 800426a:	d501      	bpl.n	8004270 <_printf_float+0x154>
 800426c:	3301      	adds	r3, #1
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0a2      	beq.n	80041be <_printf_float+0xa2>
 8004278:	232d      	movs	r3, #45	@ 0x2d
 800427a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800427e:	e79e      	b.n	80041be <_printf_float+0xa2>
 8004280:	9a06      	ldr	r2, [sp, #24]
 8004282:	2a47      	cmp	r2, #71	@ 0x47
 8004284:	d1c2      	bne.n	800420c <_printf_float+0xf0>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1c0      	bne.n	800420c <_printf_float+0xf0>
 800428a:	2301      	movs	r3, #1
 800428c:	e7bd      	b.n	800420a <_printf_float+0xee>
 800428e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004292:	d9db      	bls.n	800424c <_printf_float+0x130>
 8004294:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004298:	d118      	bne.n	80042cc <_printf_float+0x1b0>
 800429a:	2900      	cmp	r1, #0
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	dd0b      	ble.n	80042b8 <_printf_float+0x19c>
 80042a0:	6121      	str	r1, [r4, #16]
 80042a2:	b913      	cbnz	r3, 80042aa <_printf_float+0x18e>
 80042a4:	6822      	ldr	r2, [r4, #0]
 80042a6:	07d0      	lsls	r0, r2, #31
 80042a8:	d502      	bpl.n	80042b0 <_printf_float+0x194>
 80042aa:	3301      	adds	r3, #1
 80042ac:	440b      	add	r3, r1
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042b2:	f04f 0900 	mov.w	r9, #0
 80042b6:	e7db      	b.n	8004270 <_printf_float+0x154>
 80042b8:	b913      	cbnz	r3, 80042c0 <_printf_float+0x1a4>
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	07d2      	lsls	r2, r2, #31
 80042be:	d501      	bpl.n	80042c4 <_printf_float+0x1a8>
 80042c0:	3302      	adds	r3, #2
 80042c2:	e7f4      	b.n	80042ae <_printf_float+0x192>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e7f2      	b.n	80042ae <_printf_float+0x192>
 80042c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042ce:	4299      	cmp	r1, r3
 80042d0:	db05      	blt.n	80042de <_printf_float+0x1c2>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	6121      	str	r1, [r4, #16]
 80042d6:	07d8      	lsls	r0, r3, #31
 80042d8:	d5ea      	bpl.n	80042b0 <_printf_float+0x194>
 80042da:	1c4b      	adds	r3, r1, #1
 80042dc:	e7e7      	b.n	80042ae <_printf_float+0x192>
 80042de:	2900      	cmp	r1, #0
 80042e0:	bfd4      	ite	le
 80042e2:	f1c1 0202 	rsble	r2, r1, #2
 80042e6:	2201      	movgt	r2, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	e7e0      	b.n	80042ae <_printf_float+0x192>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	055a      	lsls	r2, r3, #21
 80042f0:	d407      	bmi.n	8004302 <_printf_float+0x1e6>
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	4642      	mov	r2, r8
 80042f6:	4631      	mov	r1, r6
 80042f8:	4628      	mov	r0, r5
 80042fa:	47b8      	blx	r7
 80042fc:	3001      	adds	r0, #1
 80042fe:	d12b      	bne.n	8004358 <_printf_float+0x23c>
 8004300:	e767      	b.n	80041d2 <_printf_float+0xb6>
 8004302:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004306:	f240 80dd 	bls.w	80044c4 <_printf_float+0x3a8>
 800430a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800430e:	2200      	movs	r2, #0
 8004310:	2300      	movs	r3, #0
 8004312:	f7fc fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004316:	2800      	cmp	r0, #0
 8004318:	d033      	beq.n	8004382 <_printf_float+0x266>
 800431a:	4a37      	ldr	r2, [pc, #220]	@ (80043f8 <_printf_float+0x2dc>)
 800431c:	2301      	movs	r3, #1
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f af54 	beq.w	80041d2 <_printf_float+0xb6>
 800432a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800432e:	4543      	cmp	r3, r8
 8004330:	db02      	blt.n	8004338 <_printf_float+0x21c>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	07d8      	lsls	r0, r3, #31
 8004336:	d50f      	bpl.n	8004358 <_printf_float+0x23c>
 8004338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800433c:	4631      	mov	r1, r6
 800433e:	4628      	mov	r0, r5
 8004340:	47b8      	blx	r7
 8004342:	3001      	adds	r0, #1
 8004344:	f43f af45 	beq.w	80041d2 <_printf_float+0xb6>
 8004348:	f04f 0900 	mov.w	r9, #0
 800434c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004350:	f104 0a1a 	add.w	sl, r4, #26
 8004354:	45c8      	cmp	r8, r9
 8004356:	dc09      	bgt.n	800436c <_printf_float+0x250>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	079b      	lsls	r3, r3, #30
 800435c:	f100 8103 	bmi.w	8004566 <_printf_float+0x44a>
 8004360:	68e0      	ldr	r0, [r4, #12]
 8004362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004364:	4298      	cmp	r0, r3
 8004366:	bfb8      	it	lt
 8004368:	4618      	movlt	r0, r3
 800436a:	e734      	b.n	80041d6 <_printf_float+0xba>
 800436c:	2301      	movs	r3, #1
 800436e:	4652      	mov	r2, sl
 8004370:	4631      	mov	r1, r6
 8004372:	4628      	mov	r0, r5
 8004374:	47b8      	blx	r7
 8004376:	3001      	adds	r0, #1
 8004378:	f43f af2b 	beq.w	80041d2 <_printf_float+0xb6>
 800437c:	f109 0901 	add.w	r9, r9, #1
 8004380:	e7e8      	b.n	8004354 <_printf_float+0x238>
 8004382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	dc39      	bgt.n	80043fc <_printf_float+0x2e0>
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <_printf_float+0x2dc>)
 800438a:	2301      	movs	r3, #1
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	f43f af1d 	beq.w	80041d2 <_printf_float+0xb6>
 8004398:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800439c:	ea59 0303 	orrs.w	r3, r9, r3
 80043a0:	d102      	bne.n	80043a8 <_printf_float+0x28c>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	07d9      	lsls	r1, r3, #31
 80043a6:	d5d7      	bpl.n	8004358 <_printf_float+0x23c>
 80043a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043ac:	4631      	mov	r1, r6
 80043ae:	4628      	mov	r0, r5
 80043b0:	47b8      	blx	r7
 80043b2:	3001      	adds	r0, #1
 80043b4:	f43f af0d 	beq.w	80041d2 <_printf_float+0xb6>
 80043b8:	f04f 0a00 	mov.w	sl, #0
 80043bc:	f104 0b1a 	add.w	fp, r4, #26
 80043c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043c2:	425b      	negs	r3, r3
 80043c4:	4553      	cmp	r3, sl
 80043c6:	dc01      	bgt.n	80043cc <_printf_float+0x2b0>
 80043c8:	464b      	mov	r3, r9
 80043ca:	e793      	b.n	80042f4 <_printf_float+0x1d8>
 80043cc:	2301      	movs	r3, #1
 80043ce:	465a      	mov	r2, fp
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	f43f aefb 	beq.w	80041d2 <_printf_float+0xb6>
 80043dc:	f10a 0a01 	add.w	sl, sl, #1
 80043e0:	e7ee      	b.n	80043c0 <_printf_float+0x2a4>
 80043e2:	bf00      	nop
 80043e4:	7fefffff 	.word	0x7fefffff
 80043e8:	08006e94 	.word	0x08006e94
 80043ec:	08006e90 	.word	0x08006e90
 80043f0:	08006e9c 	.word	0x08006e9c
 80043f4:	08006e98 	.word	0x08006e98
 80043f8:	08006ea0 	.word	0x08006ea0
 80043fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004402:	4553      	cmp	r3, sl
 8004404:	bfa8      	it	ge
 8004406:	4653      	movge	r3, sl
 8004408:	2b00      	cmp	r3, #0
 800440a:	4699      	mov	r9, r3
 800440c:	dc36      	bgt.n	800447c <_printf_float+0x360>
 800440e:	f04f 0b00 	mov.w	fp, #0
 8004412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004416:	f104 021a 	add.w	r2, r4, #26
 800441a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800441c:	9306      	str	r3, [sp, #24]
 800441e:	eba3 0309 	sub.w	r3, r3, r9
 8004422:	455b      	cmp	r3, fp
 8004424:	dc31      	bgt.n	800448a <_printf_float+0x36e>
 8004426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004428:	459a      	cmp	sl, r3
 800442a:	dc3a      	bgt.n	80044a2 <_printf_float+0x386>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	07da      	lsls	r2, r3, #31
 8004430:	d437      	bmi.n	80044a2 <_printf_float+0x386>
 8004432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004434:	ebaa 0903 	sub.w	r9, sl, r3
 8004438:	9b06      	ldr	r3, [sp, #24]
 800443a:	ebaa 0303 	sub.w	r3, sl, r3
 800443e:	4599      	cmp	r9, r3
 8004440:	bfa8      	it	ge
 8004442:	4699      	movge	r9, r3
 8004444:	f1b9 0f00 	cmp.w	r9, #0
 8004448:	dc33      	bgt.n	80044b2 <_printf_float+0x396>
 800444a:	f04f 0800 	mov.w	r8, #0
 800444e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004452:	f104 0b1a 	add.w	fp, r4, #26
 8004456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004458:	ebaa 0303 	sub.w	r3, sl, r3
 800445c:	eba3 0309 	sub.w	r3, r3, r9
 8004460:	4543      	cmp	r3, r8
 8004462:	f77f af79 	ble.w	8004358 <_printf_float+0x23c>
 8004466:	2301      	movs	r3, #1
 8004468:	465a      	mov	r2, fp
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	f43f aeae 	beq.w	80041d2 <_printf_float+0xb6>
 8004476:	f108 0801 	add.w	r8, r8, #1
 800447a:	e7ec      	b.n	8004456 <_printf_float+0x33a>
 800447c:	4642      	mov	r2, r8
 800447e:	4631      	mov	r1, r6
 8004480:	4628      	mov	r0, r5
 8004482:	47b8      	blx	r7
 8004484:	3001      	adds	r0, #1
 8004486:	d1c2      	bne.n	800440e <_printf_float+0x2f2>
 8004488:	e6a3      	b.n	80041d2 <_printf_float+0xb6>
 800448a:	2301      	movs	r3, #1
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	9206      	str	r2, [sp, #24]
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	f43f ae9c 	beq.w	80041d2 <_printf_float+0xb6>
 800449a:	9a06      	ldr	r2, [sp, #24]
 800449c:	f10b 0b01 	add.w	fp, fp, #1
 80044a0:	e7bb      	b.n	800441a <_printf_float+0x2fe>
 80044a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044a6:	4631      	mov	r1, r6
 80044a8:	4628      	mov	r0, r5
 80044aa:	47b8      	blx	r7
 80044ac:	3001      	adds	r0, #1
 80044ae:	d1c0      	bne.n	8004432 <_printf_float+0x316>
 80044b0:	e68f      	b.n	80041d2 <_printf_float+0xb6>
 80044b2:	9a06      	ldr	r2, [sp, #24]
 80044b4:	464b      	mov	r3, r9
 80044b6:	4442      	add	r2, r8
 80044b8:	4631      	mov	r1, r6
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	d1c3      	bne.n	800444a <_printf_float+0x32e>
 80044c2:	e686      	b.n	80041d2 <_printf_float+0xb6>
 80044c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80044c8:	f1ba 0f01 	cmp.w	sl, #1
 80044cc:	dc01      	bgt.n	80044d2 <_printf_float+0x3b6>
 80044ce:	07db      	lsls	r3, r3, #31
 80044d0:	d536      	bpl.n	8004540 <_printf_float+0x424>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4642      	mov	r2, r8
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	f43f ae78 	beq.w	80041d2 <_printf_float+0xb6>
 80044e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f ae70 	beq.w	80041d2 <_printf_float+0xb6>
 80044f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044f6:	2200      	movs	r2, #0
 80044f8:	2300      	movs	r3, #0
 80044fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044fe:	f7fc fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004502:	b9c0      	cbnz	r0, 8004536 <_printf_float+0x41a>
 8004504:	4653      	mov	r3, sl
 8004506:	f108 0201 	add.w	r2, r8, #1
 800450a:	4631      	mov	r1, r6
 800450c:	4628      	mov	r0, r5
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	d10c      	bne.n	800452e <_printf_float+0x412>
 8004514:	e65d      	b.n	80041d2 <_printf_float+0xb6>
 8004516:	2301      	movs	r3, #1
 8004518:	465a      	mov	r2, fp
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	3001      	adds	r0, #1
 8004522:	f43f ae56 	beq.w	80041d2 <_printf_float+0xb6>
 8004526:	f108 0801 	add.w	r8, r8, #1
 800452a:	45d0      	cmp	r8, sl
 800452c:	dbf3      	blt.n	8004516 <_printf_float+0x3fa>
 800452e:	464b      	mov	r3, r9
 8004530:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004534:	e6df      	b.n	80042f6 <_printf_float+0x1da>
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	f104 0b1a 	add.w	fp, r4, #26
 800453e:	e7f4      	b.n	800452a <_printf_float+0x40e>
 8004540:	2301      	movs	r3, #1
 8004542:	4642      	mov	r2, r8
 8004544:	e7e1      	b.n	800450a <_printf_float+0x3ee>
 8004546:	2301      	movs	r3, #1
 8004548:	464a      	mov	r2, r9
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae3e 	beq.w	80041d2 <_printf_float+0xb6>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800455e:	1a5b      	subs	r3, r3, r1
 8004560:	4543      	cmp	r3, r8
 8004562:	dcf0      	bgt.n	8004546 <_printf_float+0x42a>
 8004564:	e6fc      	b.n	8004360 <_printf_float+0x244>
 8004566:	f04f 0800 	mov.w	r8, #0
 800456a:	f104 0919 	add.w	r9, r4, #25
 800456e:	e7f4      	b.n	800455a <_printf_float+0x43e>

08004570 <_printf_common>:
 8004570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	4616      	mov	r6, r2
 8004576:	4698      	mov	r8, r3
 8004578:	688a      	ldr	r2, [r1, #8]
 800457a:	690b      	ldr	r3, [r1, #16]
 800457c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004580:	4293      	cmp	r3, r2
 8004582:	bfb8      	it	lt
 8004584:	4613      	movlt	r3, r2
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800458c:	4607      	mov	r7, r0
 800458e:	460c      	mov	r4, r1
 8004590:	b10a      	cbz	r2, 8004596 <_printf_common+0x26>
 8004592:	3301      	adds	r3, #1
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	0699      	lsls	r1, r3, #26
 800459a:	bf42      	ittt	mi
 800459c:	6833      	ldrmi	r3, [r6, #0]
 800459e:	3302      	addmi	r3, #2
 80045a0:	6033      	strmi	r3, [r6, #0]
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	f015 0506 	ands.w	r5, r5, #6
 80045a8:	d106      	bne.n	80045b8 <_printf_common+0x48>
 80045aa:	f104 0a19 	add.w	sl, r4, #25
 80045ae:	68e3      	ldr	r3, [r4, #12]
 80045b0:	6832      	ldr	r2, [r6, #0]
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	42ab      	cmp	r3, r5
 80045b6:	dc26      	bgt.n	8004606 <_printf_common+0x96>
 80045b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	3b00      	subs	r3, #0
 80045c0:	bf18      	it	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	0692      	lsls	r2, r2, #26
 80045c6:	d42b      	bmi.n	8004620 <_printf_common+0xb0>
 80045c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045cc:	4641      	mov	r1, r8
 80045ce:	4638      	mov	r0, r7
 80045d0:	47c8      	blx	r9
 80045d2:	3001      	adds	r0, #1
 80045d4:	d01e      	beq.n	8004614 <_printf_common+0xa4>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	6922      	ldr	r2, [r4, #16]
 80045da:	f003 0306 	and.w	r3, r3, #6
 80045de:	2b04      	cmp	r3, #4
 80045e0:	bf02      	ittt	eq
 80045e2:	68e5      	ldreq	r5, [r4, #12]
 80045e4:	6833      	ldreq	r3, [r6, #0]
 80045e6:	1aed      	subeq	r5, r5, r3
 80045e8:	68a3      	ldr	r3, [r4, #8]
 80045ea:	bf0c      	ite	eq
 80045ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f0:	2500      	movne	r5, #0
 80045f2:	4293      	cmp	r3, r2
 80045f4:	bfc4      	itt	gt
 80045f6:	1a9b      	subgt	r3, r3, r2
 80045f8:	18ed      	addgt	r5, r5, r3
 80045fa:	2600      	movs	r6, #0
 80045fc:	341a      	adds	r4, #26
 80045fe:	42b5      	cmp	r5, r6
 8004600:	d11a      	bne.n	8004638 <_printf_common+0xc8>
 8004602:	2000      	movs	r0, #0
 8004604:	e008      	b.n	8004618 <_printf_common+0xa8>
 8004606:	2301      	movs	r3, #1
 8004608:	4652      	mov	r2, sl
 800460a:	4641      	mov	r1, r8
 800460c:	4638      	mov	r0, r7
 800460e:	47c8      	blx	r9
 8004610:	3001      	adds	r0, #1
 8004612:	d103      	bne.n	800461c <_printf_common+0xac>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	3501      	adds	r5, #1
 800461e:	e7c6      	b.n	80045ae <_printf_common+0x3e>
 8004620:	18e1      	adds	r1, r4, r3
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	2030      	movs	r0, #48	@ 0x30
 8004626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800462a:	4422      	add	r2, r4
 800462c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004634:	3302      	adds	r3, #2
 8004636:	e7c7      	b.n	80045c8 <_printf_common+0x58>
 8004638:	2301      	movs	r3, #1
 800463a:	4622      	mov	r2, r4
 800463c:	4641      	mov	r1, r8
 800463e:	4638      	mov	r0, r7
 8004640:	47c8      	blx	r9
 8004642:	3001      	adds	r0, #1
 8004644:	d0e6      	beq.n	8004614 <_printf_common+0xa4>
 8004646:	3601      	adds	r6, #1
 8004648:	e7d9      	b.n	80045fe <_printf_common+0x8e>
	...

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	7e0f      	ldrb	r7, [r1, #24]
 8004652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004654:	2f78      	cmp	r7, #120	@ 0x78
 8004656:	4691      	mov	r9, r2
 8004658:	4680      	mov	r8, r0
 800465a:	460c      	mov	r4, r1
 800465c:	469a      	mov	sl, r3
 800465e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	@ 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d1 	beq.w	8004810 <_printf_i+0x1c4>
 800466e:	2f58      	cmp	r7, #88	@ 0x58
 8004670:	f000 80b8 	beq.w	80047e4 <_printf_i+0x198>
 8004674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a101      	add	r1, pc, #4	@ (adr r1, 800468c <_printf_i+0x40>)
 8004688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	080047f7 	.word	0x080047f7
 80046bc:	08004723 	.word	0x08004723
 80046c0:	080047b1 	.word	0x080047b1
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	08004819 	.word	0x08004819
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004723 	.word	0x08004723
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047b9 	.word	0x080047b9
 80046e4:	6833      	ldr	r3, [r6, #0]
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6032      	str	r2, [r6, #0]
 80046ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e09c      	b.n	8004832 <_printf_i+0x1e6>
 80046f8:	6833      	ldr	r3, [r6, #0]
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	1d19      	adds	r1, r3, #4
 80046fe:	6031      	str	r1, [r6, #0]
 8004700:	0606      	lsls	r6, r0, #24
 8004702:	d501      	bpl.n	8004708 <_printf_i+0xbc>
 8004704:	681d      	ldr	r5, [r3, #0]
 8004706:	e003      	b.n	8004710 <_printf_i+0xc4>
 8004708:	0645      	lsls	r5, r0, #25
 800470a:	d5fb      	bpl.n	8004704 <_printf_i+0xb8>
 800470c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004710:	2d00      	cmp	r5, #0
 8004712:	da03      	bge.n	800471c <_printf_i+0xd0>
 8004714:	232d      	movs	r3, #45	@ 0x2d
 8004716:	426d      	negs	r5, r5
 8004718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800471c:	4858      	ldr	r0, [pc, #352]	@ (8004880 <_printf_i+0x234>)
 800471e:	230a      	movs	r3, #10
 8004720:	e011      	b.n	8004746 <_printf_i+0xfa>
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	6833      	ldr	r3, [r6, #0]
 8004726:	0608      	lsls	r0, r1, #24
 8004728:	f853 5b04 	ldr.w	r5, [r3], #4
 800472c:	d402      	bmi.n	8004734 <_printf_i+0xe8>
 800472e:	0649      	lsls	r1, r1, #25
 8004730:	bf48      	it	mi
 8004732:	b2ad      	uxthmi	r5, r5
 8004734:	2f6f      	cmp	r7, #111	@ 0x6f
 8004736:	4852      	ldr	r0, [pc, #328]	@ (8004880 <_printf_i+0x234>)
 8004738:	6033      	str	r3, [r6, #0]
 800473a:	bf14      	ite	ne
 800473c:	230a      	movne	r3, #10
 800473e:	2308      	moveq	r3, #8
 8004740:	2100      	movs	r1, #0
 8004742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004746:	6866      	ldr	r6, [r4, #4]
 8004748:	60a6      	str	r6, [r4, #8]
 800474a:	2e00      	cmp	r6, #0
 800474c:	db05      	blt.n	800475a <_printf_i+0x10e>
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	432e      	orrs	r6, r5
 8004752:	f021 0104 	bic.w	r1, r1, #4
 8004756:	6021      	str	r1, [r4, #0]
 8004758:	d04b      	beq.n	80047f2 <_printf_i+0x1a6>
 800475a:	4616      	mov	r6, r2
 800475c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004760:	fb03 5711 	mls	r7, r3, r1, r5
 8004764:	5dc7      	ldrb	r7, [r0, r7]
 8004766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800476a:	462f      	mov	r7, r5
 800476c:	42bb      	cmp	r3, r7
 800476e:	460d      	mov	r5, r1
 8004770:	d9f4      	bls.n	800475c <_printf_i+0x110>
 8004772:	2b08      	cmp	r3, #8
 8004774:	d10b      	bne.n	800478e <_printf_i+0x142>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	07df      	lsls	r7, r3, #31
 800477a:	d508      	bpl.n	800478e <_printf_i+0x142>
 800477c:	6923      	ldr	r3, [r4, #16]
 800477e:	6861      	ldr	r1, [r4, #4]
 8004780:	4299      	cmp	r1, r3
 8004782:	bfde      	ittt	le
 8004784:	2330      	movle	r3, #48	@ 0x30
 8004786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800478a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800478e:	1b92      	subs	r2, r2, r6
 8004790:	6122      	str	r2, [r4, #16]
 8004792:	f8cd a000 	str.w	sl, [sp]
 8004796:	464b      	mov	r3, r9
 8004798:	aa03      	add	r2, sp, #12
 800479a:	4621      	mov	r1, r4
 800479c:	4640      	mov	r0, r8
 800479e:	f7ff fee7 	bl	8004570 <_printf_common>
 80047a2:	3001      	adds	r0, #1
 80047a4:	d14a      	bne.n	800483c <_printf_i+0x1f0>
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
 80047aa:	b004      	add	sp, #16
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f043 0320 	orr.w	r3, r3, #32
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	4832      	ldr	r0, [pc, #200]	@ (8004884 <_printf_i+0x238>)
 80047ba:	2778      	movs	r7, #120	@ 0x78
 80047bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	6831      	ldr	r1, [r6, #0]
 80047c4:	061f      	lsls	r7, r3, #24
 80047c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80047ca:	d402      	bmi.n	80047d2 <_printf_i+0x186>
 80047cc:	065f      	lsls	r7, r3, #25
 80047ce:	bf48      	it	mi
 80047d0:	b2ad      	uxthmi	r5, r5
 80047d2:	6031      	str	r1, [r6, #0]
 80047d4:	07d9      	lsls	r1, r3, #31
 80047d6:	bf44      	itt	mi
 80047d8:	f043 0320 	orrmi.w	r3, r3, #32
 80047dc:	6023      	strmi	r3, [r4, #0]
 80047de:	b11d      	cbz	r5, 80047e8 <_printf_i+0x19c>
 80047e0:	2310      	movs	r3, #16
 80047e2:	e7ad      	b.n	8004740 <_printf_i+0xf4>
 80047e4:	4826      	ldr	r0, [pc, #152]	@ (8004880 <_printf_i+0x234>)
 80047e6:	e7e9      	b.n	80047bc <_printf_i+0x170>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f023 0320 	bic.w	r3, r3, #32
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	e7f6      	b.n	80047e0 <_printf_i+0x194>
 80047f2:	4616      	mov	r6, r2
 80047f4:	e7bd      	b.n	8004772 <_printf_i+0x126>
 80047f6:	6833      	ldr	r3, [r6, #0]
 80047f8:	6825      	ldr	r5, [r4, #0]
 80047fa:	6961      	ldr	r1, [r4, #20]
 80047fc:	1d18      	adds	r0, r3, #4
 80047fe:	6030      	str	r0, [r6, #0]
 8004800:	062e      	lsls	r6, r5, #24
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	d501      	bpl.n	800480a <_printf_i+0x1be>
 8004806:	6019      	str	r1, [r3, #0]
 8004808:	e002      	b.n	8004810 <_printf_i+0x1c4>
 800480a:	0668      	lsls	r0, r5, #25
 800480c:	d5fb      	bpl.n	8004806 <_printf_i+0x1ba>
 800480e:	8019      	strh	r1, [r3, #0]
 8004810:	2300      	movs	r3, #0
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	4616      	mov	r6, r2
 8004816:	e7bc      	b.n	8004792 <_printf_i+0x146>
 8004818:	6833      	ldr	r3, [r6, #0]
 800481a:	1d1a      	adds	r2, r3, #4
 800481c:	6032      	str	r2, [r6, #0]
 800481e:	681e      	ldr	r6, [r3, #0]
 8004820:	6862      	ldr	r2, [r4, #4]
 8004822:	2100      	movs	r1, #0
 8004824:	4630      	mov	r0, r6
 8004826:	f7fb fcd3 	bl	80001d0 <memchr>
 800482a:	b108      	cbz	r0, 8004830 <_printf_i+0x1e4>
 800482c:	1b80      	subs	r0, r0, r6
 800482e:	6060      	str	r0, [r4, #4]
 8004830:	6863      	ldr	r3, [r4, #4]
 8004832:	6123      	str	r3, [r4, #16]
 8004834:	2300      	movs	r3, #0
 8004836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800483a:	e7aa      	b.n	8004792 <_printf_i+0x146>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	4632      	mov	r2, r6
 8004840:	4649      	mov	r1, r9
 8004842:	4640      	mov	r0, r8
 8004844:	47d0      	blx	sl
 8004846:	3001      	adds	r0, #1
 8004848:	d0ad      	beq.n	80047a6 <_printf_i+0x15a>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	079b      	lsls	r3, r3, #30
 800484e:	d413      	bmi.n	8004878 <_printf_i+0x22c>
 8004850:	68e0      	ldr	r0, [r4, #12]
 8004852:	9b03      	ldr	r3, [sp, #12]
 8004854:	4298      	cmp	r0, r3
 8004856:	bfb8      	it	lt
 8004858:	4618      	movlt	r0, r3
 800485a:	e7a6      	b.n	80047aa <_printf_i+0x15e>
 800485c:	2301      	movs	r3, #1
 800485e:	4632      	mov	r2, r6
 8004860:	4649      	mov	r1, r9
 8004862:	4640      	mov	r0, r8
 8004864:	47d0      	blx	sl
 8004866:	3001      	adds	r0, #1
 8004868:	d09d      	beq.n	80047a6 <_printf_i+0x15a>
 800486a:	3501      	adds	r5, #1
 800486c:	68e3      	ldr	r3, [r4, #12]
 800486e:	9903      	ldr	r1, [sp, #12]
 8004870:	1a5b      	subs	r3, r3, r1
 8004872:	42ab      	cmp	r3, r5
 8004874:	dcf2      	bgt.n	800485c <_printf_i+0x210>
 8004876:	e7eb      	b.n	8004850 <_printf_i+0x204>
 8004878:	2500      	movs	r5, #0
 800487a:	f104 0619 	add.w	r6, r4, #25
 800487e:	e7f5      	b.n	800486c <_printf_i+0x220>
 8004880:	08006ea2 	.word	0x08006ea2
 8004884:	08006eb3 	.word	0x08006eb3

08004888 <std>:
 8004888:	2300      	movs	r3, #0
 800488a:	b510      	push	{r4, lr}
 800488c:	4604      	mov	r4, r0
 800488e:	e9c0 3300 	strd	r3, r3, [r0]
 8004892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004896:	6083      	str	r3, [r0, #8]
 8004898:	8181      	strh	r1, [r0, #12]
 800489a:	6643      	str	r3, [r0, #100]	@ 0x64
 800489c:	81c2      	strh	r2, [r0, #14]
 800489e:	6183      	str	r3, [r0, #24]
 80048a0:	4619      	mov	r1, r3
 80048a2:	2208      	movs	r2, #8
 80048a4:	305c      	adds	r0, #92	@ 0x5c
 80048a6:	f000 fa13 	bl	8004cd0 <memset>
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <std+0x58>)
 80048ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80048ae:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <std+0x5c>)
 80048b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048b2:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <std+0x60>)
 80048b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <std+0x64>)
 80048b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80048ba:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <std+0x68>)
 80048bc:	6224      	str	r4, [r4, #32]
 80048be:	429c      	cmp	r4, r3
 80048c0:	d006      	beq.n	80048d0 <std+0x48>
 80048c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048c6:	4294      	cmp	r4, r2
 80048c8:	d002      	beq.n	80048d0 <std+0x48>
 80048ca:	33d0      	adds	r3, #208	@ 0xd0
 80048cc:	429c      	cmp	r4, r3
 80048ce:	d105      	bne.n	80048dc <std+0x54>
 80048d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d8:	f000 ba76 	b.w	8004dc8 <__retarget_lock_init_recursive>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	08004aed 	.word	0x08004aed
 80048e4:	08004b0f 	.word	0x08004b0f
 80048e8:	08004b47 	.word	0x08004b47
 80048ec:	08004b6b 	.word	0x08004b6b
 80048f0:	20000780 	.word	0x20000780

080048f4 <stdio_exit_handler>:
 80048f4:	4a02      	ldr	r2, [pc, #8]	@ (8004900 <stdio_exit_handler+0xc>)
 80048f6:	4903      	ldr	r1, [pc, #12]	@ (8004904 <stdio_exit_handler+0x10>)
 80048f8:	4803      	ldr	r0, [pc, #12]	@ (8004908 <stdio_exit_handler+0x14>)
 80048fa:	f000 b869 	b.w	80049d0 <_fwalk_sglue>
 80048fe:	bf00      	nop
 8004900:	2000000c 	.word	0x2000000c
 8004904:	08006701 	.word	0x08006701
 8004908:	2000001c 	.word	0x2000001c

0800490c <cleanup_stdio>:
 800490c:	6841      	ldr	r1, [r0, #4]
 800490e:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <cleanup_stdio+0x34>)
 8004910:	4299      	cmp	r1, r3
 8004912:	b510      	push	{r4, lr}
 8004914:	4604      	mov	r4, r0
 8004916:	d001      	beq.n	800491c <cleanup_stdio+0x10>
 8004918:	f001 fef2 	bl	8006700 <_fflush_r>
 800491c:	68a1      	ldr	r1, [r4, #8]
 800491e:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <cleanup_stdio+0x38>)
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <cleanup_stdio+0x1e>
 8004924:	4620      	mov	r0, r4
 8004926:	f001 feeb 	bl	8006700 <_fflush_r>
 800492a:	68e1      	ldr	r1, [r4, #12]
 800492c:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <cleanup_stdio+0x3c>)
 800492e:	4299      	cmp	r1, r3
 8004930:	d004      	beq.n	800493c <cleanup_stdio+0x30>
 8004932:	4620      	mov	r0, r4
 8004934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004938:	f001 bee2 	b.w	8006700 <_fflush_r>
 800493c:	bd10      	pop	{r4, pc}
 800493e:	bf00      	nop
 8004940:	20000780 	.word	0x20000780
 8004944:	200007e8 	.word	0x200007e8
 8004948:	20000850 	.word	0x20000850

0800494c <global_stdio_init.part.0>:
 800494c:	b510      	push	{r4, lr}
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <global_stdio_init.part.0+0x30>)
 8004950:	4c0b      	ldr	r4, [pc, #44]	@ (8004980 <global_stdio_init.part.0+0x34>)
 8004952:	4a0c      	ldr	r2, [pc, #48]	@ (8004984 <global_stdio_init.part.0+0x38>)
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	4620      	mov	r0, r4
 8004958:	2200      	movs	r2, #0
 800495a:	2104      	movs	r1, #4
 800495c:	f7ff ff94 	bl	8004888 <std>
 8004960:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004964:	2201      	movs	r2, #1
 8004966:	2109      	movs	r1, #9
 8004968:	f7ff ff8e 	bl	8004888 <std>
 800496c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004970:	2202      	movs	r2, #2
 8004972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004976:	2112      	movs	r1, #18
 8004978:	f7ff bf86 	b.w	8004888 <std>
 800497c:	200008b8 	.word	0x200008b8
 8004980:	20000780 	.word	0x20000780
 8004984:	080048f5 	.word	0x080048f5

08004988 <__sfp_lock_acquire>:
 8004988:	4801      	ldr	r0, [pc, #4]	@ (8004990 <__sfp_lock_acquire+0x8>)
 800498a:	f000 ba1e 	b.w	8004dca <__retarget_lock_acquire_recursive>
 800498e:	bf00      	nop
 8004990:	200008c1 	.word	0x200008c1

08004994 <__sfp_lock_release>:
 8004994:	4801      	ldr	r0, [pc, #4]	@ (800499c <__sfp_lock_release+0x8>)
 8004996:	f000 ba19 	b.w	8004dcc <__retarget_lock_release_recursive>
 800499a:	bf00      	nop
 800499c:	200008c1 	.word	0x200008c1

080049a0 <__sinit>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	4604      	mov	r4, r0
 80049a4:	f7ff fff0 	bl	8004988 <__sfp_lock_acquire>
 80049a8:	6a23      	ldr	r3, [r4, #32]
 80049aa:	b11b      	cbz	r3, 80049b4 <__sinit+0x14>
 80049ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b0:	f7ff bff0 	b.w	8004994 <__sfp_lock_release>
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <__sinit+0x28>)
 80049b6:	6223      	str	r3, [r4, #32]
 80049b8:	4b04      	ldr	r3, [pc, #16]	@ (80049cc <__sinit+0x2c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f5      	bne.n	80049ac <__sinit+0xc>
 80049c0:	f7ff ffc4 	bl	800494c <global_stdio_init.part.0>
 80049c4:	e7f2      	b.n	80049ac <__sinit+0xc>
 80049c6:	bf00      	nop
 80049c8:	0800490d 	.word	0x0800490d
 80049cc:	200008b8 	.word	0x200008b8

080049d0 <_fwalk_sglue>:
 80049d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d4:	4607      	mov	r7, r0
 80049d6:	4688      	mov	r8, r1
 80049d8:	4614      	mov	r4, r2
 80049da:	2600      	movs	r6, #0
 80049dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049e0:	f1b9 0901 	subs.w	r9, r9, #1
 80049e4:	d505      	bpl.n	80049f2 <_fwalk_sglue+0x22>
 80049e6:	6824      	ldr	r4, [r4, #0]
 80049e8:	2c00      	cmp	r4, #0
 80049ea:	d1f7      	bne.n	80049dc <_fwalk_sglue+0xc>
 80049ec:	4630      	mov	r0, r6
 80049ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049f2:	89ab      	ldrh	r3, [r5, #12]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d907      	bls.n	8004a08 <_fwalk_sglue+0x38>
 80049f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049fc:	3301      	adds	r3, #1
 80049fe:	d003      	beq.n	8004a08 <_fwalk_sglue+0x38>
 8004a00:	4629      	mov	r1, r5
 8004a02:	4638      	mov	r0, r7
 8004a04:	47c0      	blx	r8
 8004a06:	4306      	orrs	r6, r0
 8004a08:	3568      	adds	r5, #104	@ 0x68
 8004a0a:	e7e9      	b.n	80049e0 <_fwalk_sglue+0x10>

08004a0c <iprintf>:
 8004a0c:	b40f      	push	{r0, r1, r2, r3}
 8004a0e:	b507      	push	{r0, r1, r2, lr}
 8004a10:	4906      	ldr	r1, [pc, #24]	@ (8004a2c <iprintf+0x20>)
 8004a12:	ab04      	add	r3, sp, #16
 8004a14:	6808      	ldr	r0, [r1, #0]
 8004a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a1a:	6881      	ldr	r1, [r0, #8]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	f001 fcd3 	bl	80063c8 <_vfiprintf_r>
 8004a22:	b003      	add	sp, #12
 8004a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a28:	b004      	add	sp, #16
 8004a2a:	4770      	bx	lr
 8004a2c:	20000018 	.word	0x20000018

08004a30 <_puts_r>:
 8004a30:	6a03      	ldr	r3, [r0, #32]
 8004a32:	b570      	push	{r4, r5, r6, lr}
 8004a34:	6884      	ldr	r4, [r0, #8]
 8004a36:	4605      	mov	r5, r0
 8004a38:	460e      	mov	r6, r1
 8004a3a:	b90b      	cbnz	r3, 8004a40 <_puts_r+0x10>
 8004a3c:	f7ff ffb0 	bl	80049a0 <__sinit>
 8004a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a42:	07db      	lsls	r3, r3, #31
 8004a44:	d405      	bmi.n	8004a52 <_puts_r+0x22>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	0598      	lsls	r0, r3, #22
 8004a4a:	d402      	bmi.n	8004a52 <_puts_r+0x22>
 8004a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4e:	f000 f9bc 	bl	8004dca <__retarget_lock_acquire_recursive>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	0719      	lsls	r1, r3, #28
 8004a56:	d502      	bpl.n	8004a5e <_puts_r+0x2e>
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d135      	bne.n	8004aca <_puts_r+0x9a>
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 f8c5 	bl	8004bf0 <__swsetup_r>
 8004a66:	b380      	cbz	r0, 8004aca <_puts_r+0x9a>
 8004a68:	f04f 35ff 	mov.w	r5, #4294967295
 8004a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6e:	07da      	lsls	r2, r3, #31
 8004a70:	d405      	bmi.n	8004a7e <_puts_r+0x4e>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	059b      	lsls	r3, r3, #22
 8004a76:	d402      	bmi.n	8004a7e <_puts_r+0x4e>
 8004a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7a:	f000 f9a7 	bl	8004dcc <__retarget_lock_release_recursive>
 8004a7e:	4628      	mov	r0, r5
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da04      	bge.n	8004a90 <_puts_r+0x60>
 8004a86:	69a2      	ldr	r2, [r4, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	dc17      	bgt.n	8004abc <_puts_r+0x8c>
 8004a8c:	290a      	cmp	r1, #10
 8004a8e:	d015      	beq.n	8004abc <_puts_r+0x8c>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	6022      	str	r2, [r4, #0]
 8004a96:	7019      	strb	r1, [r3, #0]
 8004a98:	68a3      	ldr	r3, [r4, #8]
 8004a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	2900      	cmp	r1, #0
 8004aa4:	d1ed      	bne.n	8004a82 <_puts_r+0x52>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da11      	bge.n	8004ace <_puts_r+0x9e>
 8004aaa:	4622      	mov	r2, r4
 8004aac:	210a      	movs	r1, #10
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f85f 	bl	8004b72 <__swbuf_r>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d0d7      	beq.n	8004a68 <_puts_r+0x38>
 8004ab8:	250a      	movs	r5, #10
 8004aba:	e7d7      	b.n	8004a6c <_puts_r+0x3c>
 8004abc:	4622      	mov	r2, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 f857 	bl	8004b72 <__swbuf_r>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d1e7      	bne.n	8004a98 <_puts_r+0x68>
 8004ac8:	e7ce      	b.n	8004a68 <_puts_r+0x38>
 8004aca:	3e01      	subs	r6, #1
 8004acc:	e7e4      	b.n	8004a98 <_puts_r+0x68>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	6022      	str	r2, [r4, #0]
 8004ad4:	220a      	movs	r2, #10
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e7ee      	b.n	8004ab8 <_puts_r+0x88>
	...

08004adc <puts>:
 8004adc:	4b02      	ldr	r3, [pc, #8]	@ (8004ae8 <puts+0xc>)
 8004ade:	4601      	mov	r1, r0
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	f7ff bfa5 	b.w	8004a30 <_puts_r>
 8004ae6:	bf00      	nop
 8004ae8:	20000018 	.word	0x20000018

08004aec <__sread>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	460c      	mov	r4, r1
 8004af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af4:	f000 f91a 	bl	8004d2c <_read_r>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	bfab      	itete	ge
 8004afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004afe:	89a3      	ldrhlt	r3, [r4, #12]
 8004b00:	181b      	addge	r3, r3, r0
 8004b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b06:	bfac      	ite	ge
 8004b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b0a:	81a3      	strhlt	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__swrite>:
 8004b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b12:	461f      	mov	r7, r3
 8004b14:	898b      	ldrh	r3, [r1, #12]
 8004b16:	05db      	lsls	r3, r3, #23
 8004b18:	4605      	mov	r5, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	d505      	bpl.n	8004b2c <__swrite+0x1e>
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	2302      	movs	r3, #2
 8004b26:	2200      	movs	r2, #0
 8004b28:	f000 f8ee 	bl	8004d08 <_lseek_r>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	4632      	mov	r2, r6
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b42:	f000 b905 	b.w	8004d50 <_write_r>

08004b46 <__sseek>:
 8004b46:	b510      	push	{r4, lr}
 8004b48:	460c      	mov	r4, r1
 8004b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4e:	f000 f8db 	bl	8004d08 <_lseek_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	bf15      	itete	ne
 8004b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b62:	81a3      	strheq	r3, [r4, #12]
 8004b64:	bf18      	it	ne
 8004b66:	81a3      	strhne	r3, [r4, #12]
 8004b68:	bd10      	pop	{r4, pc}

08004b6a <__sclose>:
 8004b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6e:	f000 b8bb 	b.w	8004ce8 <_close_r>

08004b72 <__swbuf_r>:
 8004b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b74:	460e      	mov	r6, r1
 8004b76:	4614      	mov	r4, r2
 8004b78:	4605      	mov	r5, r0
 8004b7a:	b118      	cbz	r0, 8004b84 <__swbuf_r+0x12>
 8004b7c:	6a03      	ldr	r3, [r0, #32]
 8004b7e:	b90b      	cbnz	r3, 8004b84 <__swbuf_r+0x12>
 8004b80:	f7ff ff0e 	bl	80049a0 <__sinit>
 8004b84:	69a3      	ldr	r3, [r4, #24]
 8004b86:	60a3      	str	r3, [r4, #8]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	071a      	lsls	r2, r3, #28
 8004b8c:	d501      	bpl.n	8004b92 <__swbuf_r+0x20>
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	b943      	cbnz	r3, 8004ba4 <__swbuf_r+0x32>
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 f82b 	bl	8004bf0 <__swsetup_r>
 8004b9a:	b118      	cbz	r0, 8004ba4 <__swbuf_r+0x32>
 8004b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	6922      	ldr	r2, [r4, #16]
 8004ba8:	1a98      	subs	r0, r3, r2
 8004baa:	6963      	ldr	r3, [r4, #20]
 8004bac:	b2f6      	uxtb	r6, r6
 8004bae:	4283      	cmp	r3, r0
 8004bb0:	4637      	mov	r7, r6
 8004bb2:	dc05      	bgt.n	8004bc0 <__swbuf_r+0x4e>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f001 fda2 	bl	8006700 <_fflush_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d1ed      	bne.n	8004b9c <__swbuf_r+0x2a>
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	701e      	strb	r6, [r3, #0]
 8004bce:	6962      	ldr	r2, [r4, #20]
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d004      	beq.n	8004be0 <__swbuf_r+0x6e>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	07db      	lsls	r3, r3, #31
 8004bda:	d5e1      	bpl.n	8004ba0 <__swbuf_r+0x2e>
 8004bdc:	2e0a      	cmp	r6, #10
 8004bde:	d1df      	bne.n	8004ba0 <__swbuf_r+0x2e>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	f001 fd8c 	bl	8006700 <_fflush_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d0d9      	beq.n	8004ba0 <__swbuf_r+0x2e>
 8004bec:	e7d6      	b.n	8004b9c <__swbuf_r+0x2a>
	...

08004bf0 <__swsetup_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <__swsetup_r+0xa8>)
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	b118      	cbz	r0, 8004c04 <__swsetup_r+0x14>
 8004bfc:	6a03      	ldr	r3, [r0, #32]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <__swsetup_r+0x14>
 8004c00:	f7ff fece 	bl	80049a0 <__sinit>
 8004c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c08:	0719      	lsls	r1, r3, #28
 8004c0a:	d422      	bmi.n	8004c52 <__swsetup_r+0x62>
 8004c0c:	06da      	lsls	r2, r3, #27
 8004c0e:	d407      	bmi.n	8004c20 <__swsetup_r+0x30>
 8004c10:	2209      	movs	r2, #9
 8004c12:	602a      	str	r2, [r5, #0]
 8004c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	e033      	b.n	8004c88 <__swsetup_r+0x98>
 8004c20:	0758      	lsls	r0, r3, #29
 8004c22:	d512      	bpl.n	8004c4a <__swsetup_r+0x5a>
 8004c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c26:	b141      	cbz	r1, 8004c3a <__swsetup_r+0x4a>
 8004c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c2c:	4299      	cmp	r1, r3
 8004c2e:	d002      	beq.n	8004c36 <__swsetup_r+0x46>
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 ff25 	bl	8005a80 <_free_r>
 8004c36:	2300      	movs	r3, #0
 8004c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	2300      	movs	r3, #0
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	f043 0308 	orr.w	r3, r3, #8
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	6923      	ldr	r3, [r4, #16]
 8004c54:	b94b      	cbnz	r3, 8004c6a <__swsetup_r+0x7a>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d003      	beq.n	8004c6a <__swsetup_r+0x7a>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f001 fd99 	bl	800679c <__smakebuf_r>
 8004c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6e:	f013 0201 	ands.w	r2, r3, #1
 8004c72:	d00a      	beq.n	8004c8a <__swsetup_r+0x9a>
 8004c74:	2200      	movs	r2, #0
 8004c76:	60a2      	str	r2, [r4, #8]
 8004c78:	6962      	ldr	r2, [r4, #20]
 8004c7a:	4252      	negs	r2, r2
 8004c7c:	61a2      	str	r2, [r4, #24]
 8004c7e:	6922      	ldr	r2, [r4, #16]
 8004c80:	b942      	cbnz	r2, 8004c94 <__swsetup_r+0xa4>
 8004c82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c86:	d1c5      	bne.n	8004c14 <__swsetup_r+0x24>
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
 8004c8a:	0799      	lsls	r1, r3, #30
 8004c8c:	bf58      	it	pl
 8004c8e:	6962      	ldrpl	r2, [r4, #20]
 8004c90:	60a2      	str	r2, [r4, #8]
 8004c92:	e7f4      	b.n	8004c7e <__swsetup_r+0x8e>
 8004c94:	2000      	movs	r0, #0
 8004c96:	e7f7      	b.n	8004c88 <__swsetup_r+0x98>
 8004c98:	20000018 	.word	0x20000018

08004c9c <memmove>:
 8004c9c:	4288      	cmp	r0, r1
 8004c9e:	b510      	push	{r4, lr}
 8004ca0:	eb01 0402 	add.w	r4, r1, r2
 8004ca4:	d902      	bls.n	8004cac <memmove+0x10>
 8004ca6:	4284      	cmp	r4, r0
 8004ca8:	4623      	mov	r3, r4
 8004caa:	d807      	bhi.n	8004cbc <memmove+0x20>
 8004cac:	1e43      	subs	r3, r0, #1
 8004cae:	42a1      	cmp	r1, r4
 8004cb0:	d008      	beq.n	8004cc4 <memmove+0x28>
 8004cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cba:	e7f8      	b.n	8004cae <memmove+0x12>
 8004cbc:	4402      	add	r2, r0
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	428a      	cmp	r2, r1
 8004cc2:	d100      	bne.n	8004cc6 <memmove+0x2a>
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cce:	e7f7      	b.n	8004cc0 <memmove+0x24>

08004cd0 <memset>:
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d100      	bne.n	8004cda <memset+0xa>
 8004cd8:	4770      	bx	lr
 8004cda:	f803 1b01 	strb.w	r1, [r3], #1
 8004cde:	e7f9      	b.n	8004cd4 <memset+0x4>

08004ce0 <_localeconv_r>:
 8004ce0:	4800      	ldr	r0, [pc, #0]	@ (8004ce4 <_localeconv_r+0x4>)
 8004ce2:	4770      	bx	lr
 8004ce4:	20000158 	.word	0x20000158

08004ce8 <_close_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4d06      	ldr	r5, [pc, #24]	@ (8004d04 <_close_r+0x1c>)
 8004cec:	2300      	movs	r3, #0
 8004cee:	4604      	mov	r4, r0
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	602b      	str	r3, [r5, #0]
 8004cf4:	f7fc fe26 	bl	8001944 <_close>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d102      	bne.n	8004d02 <_close_r+0x1a>
 8004cfc:	682b      	ldr	r3, [r5, #0]
 8004cfe:	b103      	cbz	r3, 8004d02 <_close_r+0x1a>
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	bd38      	pop	{r3, r4, r5, pc}
 8004d04:	200008bc 	.word	0x200008bc

08004d08 <_lseek_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d07      	ldr	r5, [pc, #28]	@ (8004d28 <_lseek_r+0x20>)
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	4608      	mov	r0, r1
 8004d10:	4611      	mov	r1, r2
 8004d12:	2200      	movs	r2, #0
 8004d14:	602a      	str	r2, [r5, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f7fc fe3b 	bl	8001992 <_lseek>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_lseek_r+0x1e>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_lseek_r+0x1e>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	200008bc 	.word	0x200008bc

08004d2c <_read_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4d07      	ldr	r5, [pc, #28]	@ (8004d4c <_read_r+0x20>)
 8004d30:	4604      	mov	r4, r0
 8004d32:	4608      	mov	r0, r1
 8004d34:	4611      	mov	r1, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	602a      	str	r2, [r5, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f7fc fdc9 	bl	80018d2 <_read>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d102      	bne.n	8004d4a <_read_r+0x1e>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	b103      	cbz	r3, 8004d4a <_read_r+0x1e>
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	200008bc 	.word	0x200008bc

08004d50 <_write_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4d07      	ldr	r5, [pc, #28]	@ (8004d70 <_write_r+0x20>)
 8004d54:	4604      	mov	r4, r0
 8004d56:	4608      	mov	r0, r1
 8004d58:	4611      	mov	r1, r2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	602a      	str	r2, [r5, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f7fc fdd4 	bl	800190c <_write>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_write_r+0x1e>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_write_r+0x1e>
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	200008bc 	.word	0x200008bc

08004d74 <__errno>:
 8004d74:	4b01      	ldr	r3, [pc, #4]	@ (8004d7c <__errno+0x8>)
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000018 	.word	0x20000018

08004d80 <__libc_init_array>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	4d0d      	ldr	r5, [pc, #52]	@ (8004db8 <__libc_init_array+0x38>)
 8004d84:	4c0d      	ldr	r4, [pc, #52]	@ (8004dbc <__libc_init_array+0x3c>)
 8004d86:	1b64      	subs	r4, r4, r5
 8004d88:	10a4      	asrs	r4, r4, #2
 8004d8a:	2600      	movs	r6, #0
 8004d8c:	42a6      	cmp	r6, r4
 8004d8e:	d109      	bne.n	8004da4 <__libc_init_array+0x24>
 8004d90:	4d0b      	ldr	r5, [pc, #44]	@ (8004dc0 <__libc_init_array+0x40>)
 8004d92:	4c0c      	ldr	r4, [pc, #48]	@ (8004dc4 <__libc_init_array+0x44>)
 8004d94:	f001 ffd0 	bl	8006d38 <_init>
 8004d98:	1b64      	subs	r4, r4, r5
 8004d9a:	10a4      	asrs	r4, r4, #2
 8004d9c:	2600      	movs	r6, #0
 8004d9e:	42a6      	cmp	r6, r4
 8004da0:	d105      	bne.n	8004dae <__libc_init_array+0x2e>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da8:	4798      	blx	r3
 8004daa:	3601      	adds	r6, #1
 8004dac:	e7ee      	b.n	8004d8c <__libc_init_array+0xc>
 8004dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db2:	4798      	blx	r3
 8004db4:	3601      	adds	r6, #1
 8004db6:	e7f2      	b.n	8004d9e <__libc_init_array+0x1e>
 8004db8:	08007250 	.word	0x08007250
 8004dbc:	08007250 	.word	0x08007250
 8004dc0:	08007250 	.word	0x08007250
 8004dc4:	08007254 	.word	0x08007254

08004dc8 <__retarget_lock_init_recursive>:
 8004dc8:	4770      	bx	lr

08004dca <__retarget_lock_acquire_recursive>:
 8004dca:	4770      	bx	lr

08004dcc <__retarget_lock_release_recursive>:
 8004dcc:	4770      	bx	lr

08004dce <quorem>:
 8004dce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd2:	6903      	ldr	r3, [r0, #16]
 8004dd4:	690c      	ldr	r4, [r1, #16]
 8004dd6:	42a3      	cmp	r3, r4
 8004dd8:	4607      	mov	r7, r0
 8004dda:	db7e      	blt.n	8004eda <quorem+0x10c>
 8004ddc:	3c01      	subs	r4, #1
 8004dde:	f101 0814 	add.w	r8, r1, #20
 8004de2:	00a3      	lsls	r3, r4, #2
 8004de4:	f100 0514 	add.w	r5, r0, #20
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e00:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e04:	d32e      	bcc.n	8004e64 <quorem+0x96>
 8004e06:	f04f 0a00 	mov.w	sl, #0
 8004e0a:	46c4      	mov	ip, r8
 8004e0c:	46ae      	mov	lr, r5
 8004e0e:	46d3      	mov	fp, sl
 8004e10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e14:	b298      	uxth	r0, r3
 8004e16:	fb06 a000 	mla	r0, r6, r0, sl
 8004e1a:	0c02      	lsrs	r2, r0, #16
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	fb06 2303 	mla	r3, r6, r3, r2
 8004e22:	f8de 2000 	ldr.w	r2, [lr]
 8004e26:	b280      	uxth	r0, r0
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	1a12      	subs	r2, r2, r0
 8004e2c:	445a      	add	r2, fp
 8004e2e:	f8de 0000 	ldr.w	r0, [lr]
 8004e32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004e3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004e40:	b292      	uxth	r2, r2
 8004e42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004e46:	45e1      	cmp	r9, ip
 8004e48:	f84e 2b04 	str.w	r2, [lr], #4
 8004e4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004e50:	d2de      	bcs.n	8004e10 <quorem+0x42>
 8004e52:	9b00      	ldr	r3, [sp, #0]
 8004e54:	58eb      	ldr	r3, [r5, r3]
 8004e56:	b92b      	cbnz	r3, 8004e64 <quorem+0x96>
 8004e58:	9b01      	ldr	r3, [sp, #4]
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	429d      	cmp	r5, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	d32f      	bcc.n	8004ec2 <quorem+0xf4>
 8004e62:	613c      	str	r4, [r7, #16]
 8004e64:	4638      	mov	r0, r7
 8004e66:	f001 f97d 	bl	8006164 <__mcmp>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	db25      	blt.n	8004eba <quorem+0xec>
 8004e6e:	4629      	mov	r1, r5
 8004e70:	2000      	movs	r0, #0
 8004e72:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e76:	f8d1 c000 	ldr.w	ip, [r1]
 8004e7a:	fa1f fe82 	uxth.w	lr, r2
 8004e7e:	fa1f f38c 	uxth.w	r3, ip
 8004e82:	eba3 030e 	sub.w	r3, r3, lr
 8004e86:	4403      	add	r3, r0
 8004e88:	0c12      	lsrs	r2, r2, #16
 8004e8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004e8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e98:	45c1      	cmp	r9, r8
 8004e9a:	f841 3b04 	str.w	r3, [r1], #4
 8004e9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ea2:	d2e6      	bcs.n	8004e72 <quorem+0xa4>
 8004ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eac:	b922      	cbnz	r2, 8004eb8 <quorem+0xea>
 8004eae:	3b04      	subs	r3, #4
 8004eb0:	429d      	cmp	r5, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	d30b      	bcc.n	8004ece <quorem+0x100>
 8004eb6:	613c      	str	r4, [r7, #16]
 8004eb8:	3601      	adds	r6, #1
 8004eba:	4630      	mov	r0, r6
 8004ebc:	b003      	add	sp, #12
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	3b04      	subs	r3, #4
 8004ec6:	2a00      	cmp	r2, #0
 8004ec8:	d1cb      	bne.n	8004e62 <quorem+0x94>
 8004eca:	3c01      	subs	r4, #1
 8004ecc:	e7c6      	b.n	8004e5c <quorem+0x8e>
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	3b04      	subs	r3, #4
 8004ed2:	2a00      	cmp	r2, #0
 8004ed4:	d1ef      	bne.n	8004eb6 <quorem+0xe8>
 8004ed6:	3c01      	subs	r4, #1
 8004ed8:	e7ea      	b.n	8004eb0 <quorem+0xe2>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e7ee      	b.n	8004ebc <quorem+0xee>
	...

08004ee0 <_dtoa_r>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	69c7      	ldr	r7, [r0, #28]
 8004ee6:	b097      	sub	sp, #92	@ 0x5c
 8004ee8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004eec:	ec55 4b10 	vmov	r4, r5, d0
 8004ef0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004ef2:	9107      	str	r1, [sp, #28]
 8004ef4:	4681      	mov	r9, r0
 8004ef6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ef8:	9311      	str	r3, [sp, #68]	@ 0x44
 8004efa:	b97f      	cbnz	r7, 8004f1c <_dtoa_r+0x3c>
 8004efc:	2010      	movs	r0, #16
 8004efe:	f000 fe09 	bl	8005b14 <malloc>
 8004f02:	4602      	mov	r2, r0
 8004f04:	f8c9 001c 	str.w	r0, [r9, #28]
 8004f08:	b920      	cbnz	r0, 8004f14 <_dtoa_r+0x34>
 8004f0a:	4ba9      	ldr	r3, [pc, #676]	@ (80051b0 <_dtoa_r+0x2d0>)
 8004f0c:	21ef      	movs	r1, #239	@ 0xef
 8004f0e:	48a9      	ldr	r0, [pc, #676]	@ (80051b4 <_dtoa_r+0x2d4>)
 8004f10:	f001 fcc0 	bl	8006894 <__assert_func>
 8004f14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f18:	6007      	str	r7, [r0, #0]
 8004f1a:	60c7      	str	r7, [r0, #12]
 8004f1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f20:	6819      	ldr	r1, [r3, #0]
 8004f22:	b159      	cbz	r1, 8004f3c <_dtoa_r+0x5c>
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	604a      	str	r2, [r1, #4]
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4093      	lsls	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
 8004f2e:	4648      	mov	r0, r9
 8004f30:	f000 fee6 	bl	8005d00 <_Bfree>
 8004f34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	1e2b      	subs	r3, r5, #0
 8004f3e:	bfb9      	ittee	lt
 8004f40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004f44:	9305      	strlt	r3, [sp, #20]
 8004f46:	2300      	movge	r3, #0
 8004f48:	6033      	strge	r3, [r6, #0]
 8004f4a:	9f05      	ldr	r7, [sp, #20]
 8004f4c:	4b9a      	ldr	r3, [pc, #616]	@ (80051b8 <_dtoa_r+0x2d8>)
 8004f4e:	bfbc      	itt	lt
 8004f50:	2201      	movlt	r2, #1
 8004f52:	6032      	strlt	r2, [r6, #0]
 8004f54:	43bb      	bics	r3, r7
 8004f56:	d112      	bne.n	8004f7e <_dtoa_r+0x9e>
 8004f58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004f5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f64:	4323      	orrs	r3, r4
 8004f66:	f000 855a 	beq.w	8005a1e <_dtoa_r+0xb3e>
 8004f6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f6c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80051cc <_dtoa_r+0x2ec>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 855c 	beq.w	8005a2e <_dtoa_r+0xb4e>
 8004f76:	f10a 0303 	add.w	r3, sl, #3
 8004f7a:	f000 bd56 	b.w	8005a2a <_dtoa_r+0xb4a>
 8004f7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004f82:	2200      	movs	r2, #0
 8004f84:	ec51 0b17 	vmov	r0, r1, d7
 8004f88:	2300      	movs	r3, #0
 8004f8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004f8e:	f7fb fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f92:	4680      	mov	r8, r0
 8004f94:	b158      	cbz	r0, 8004fae <_dtoa_r+0xce>
 8004f96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004f98:	2301      	movs	r3, #1
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f9e:	b113      	cbz	r3, 8004fa6 <_dtoa_r+0xc6>
 8004fa0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004fa2:	4b86      	ldr	r3, [pc, #536]	@ (80051bc <_dtoa_r+0x2dc>)
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80051d0 <_dtoa_r+0x2f0>
 8004faa:	f000 bd40 	b.w	8005a2e <_dtoa_r+0xb4e>
 8004fae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004fb2:	aa14      	add	r2, sp, #80	@ 0x50
 8004fb4:	a915      	add	r1, sp, #84	@ 0x54
 8004fb6:	4648      	mov	r0, r9
 8004fb8:	f001 f984 	bl	80062c4 <__d2b>
 8004fbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004fc0:	9002      	str	r0, [sp, #8]
 8004fc2:	2e00      	cmp	r6, #0
 8004fc4:	d078      	beq.n	80050b8 <_dtoa_r+0x1d8>
 8004fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fc8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004fd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004fdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4b76      	ldr	r3, [pc, #472]	@ (80051c0 <_dtoa_r+0x2e0>)
 8004fe6:	f7fb f94f 	bl	8000288 <__aeabi_dsub>
 8004fea:	a36b      	add	r3, pc, #428	@ (adr r3, 8005198 <_dtoa_r+0x2b8>)
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb fb02 	bl	80005f8 <__aeabi_dmul>
 8004ff4:	a36a      	add	r3, pc, #424	@ (adr r3, 80051a0 <_dtoa_r+0x2c0>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb f947 	bl	800028c <__adddf3>
 8004ffe:	4604      	mov	r4, r0
 8005000:	4630      	mov	r0, r6
 8005002:	460d      	mov	r5, r1
 8005004:	f7fb fa8e 	bl	8000524 <__aeabi_i2d>
 8005008:	a367      	add	r3, pc, #412	@ (adr r3, 80051a8 <_dtoa_r+0x2c8>)
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f7fb faf3 	bl	80005f8 <__aeabi_dmul>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4620      	mov	r0, r4
 8005018:	4629      	mov	r1, r5
 800501a:	f7fb f937 	bl	800028c <__adddf3>
 800501e:	4604      	mov	r4, r0
 8005020:	460d      	mov	r5, r1
 8005022:	f7fb fd99 	bl	8000b58 <__aeabi_d2iz>
 8005026:	2200      	movs	r2, #0
 8005028:	4607      	mov	r7, r0
 800502a:	2300      	movs	r3, #0
 800502c:	4620      	mov	r0, r4
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb fd54 	bl	8000adc <__aeabi_dcmplt>
 8005034:	b140      	cbz	r0, 8005048 <_dtoa_r+0x168>
 8005036:	4638      	mov	r0, r7
 8005038:	f7fb fa74 	bl	8000524 <__aeabi_i2d>
 800503c:	4622      	mov	r2, r4
 800503e:	462b      	mov	r3, r5
 8005040:	f7fb fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 8005044:	b900      	cbnz	r0, 8005048 <_dtoa_r+0x168>
 8005046:	3f01      	subs	r7, #1
 8005048:	2f16      	cmp	r7, #22
 800504a:	d852      	bhi.n	80050f2 <_dtoa_r+0x212>
 800504c:	4b5d      	ldr	r3, [pc, #372]	@ (80051c4 <_dtoa_r+0x2e4>)
 800504e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800505a:	f7fb fd3f 	bl	8000adc <__aeabi_dcmplt>
 800505e:	2800      	cmp	r0, #0
 8005060:	d049      	beq.n	80050f6 <_dtoa_r+0x216>
 8005062:	3f01      	subs	r7, #1
 8005064:	2300      	movs	r3, #0
 8005066:	9310      	str	r3, [sp, #64]	@ 0x40
 8005068:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800506a:	1b9b      	subs	r3, r3, r6
 800506c:	1e5a      	subs	r2, r3, #1
 800506e:	bf45      	ittet	mi
 8005070:	f1c3 0301 	rsbmi	r3, r3, #1
 8005074:	9300      	strmi	r3, [sp, #0]
 8005076:	2300      	movpl	r3, #0
 8005078:	2300      	movmi	r3, #0
 800507a:	9206      	str	r2, [sp, #24]
 800507c:	bf54      	ite	pl
 800507e:	9300      	strpl	r3, [sp, #0]
 8005080:	9306      	strmi	r3, [sp, #24]
 8005082:	2f00      	cmp	r7, #0
 8005084:	db39      	blt.n	80050fa <_dtoa_r+0x21a>
 8005086:	9b06      	ldr	r3, [sp, #24]
 8005088:	970d      	str	r7, [sp, #52]	@ 0x34
 800508a:	443b      	add	r3, r7
 800508c:	9306      	str	r3, [sp, #24]
 800508e:	2300      	movs	r3, #0
 8005090:	9308      	str	r3, [sp, #32]
 8005092:	9b07      	ldr	r3, [sp, #28]
 8005094:	2b09      	cmp	r3, #9
 8005096:	d863      	bhi.n	8005160 <_dtoa_r+0x280>
 8005098:	2b05      	cmp	r3, #5
 800509a:	bfc4      	itt	gt
 800509c:	3b04      	subgt	r3, #4
 800509e:	9307      	strgt	r3, [sp, #28]
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	f1a3 0302 	sub.w	r3, r3, #2
 80050a6:	bfcc      	ite	gt
 80050a8:	2400      	movgt	r4, #0
 80050aa:	2401      	movle	r4, #1
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d863      	bhi.n	8005178 <_dtoa_r+0x298>
 80050b0:	e8df f003 	tbb	[pc, r3]
 80050b4:	2b375452 	.word	0x2b375452
 80050b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80050bc:	441e      	add	r6, r3
 80050be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	bfc1      	itttt	gt
 80050c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80050ca:	409f      	lslgt	r7, r3
 80050cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80050d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80050d4:	bfd6      	itet	le
 80050d6:	f1c3 0320 	rsble	r3, r3, #32
 80050da:	ea47 0003 	orrgt.w	r0, r7, r3
 80050de:	fa04 f003 	lslle.w	r0, r4, r3
 80050e2:	f7fb fa0f 	bl	8000504 <__aeabi_ui2d>
 80050e6:	2201      	movs	r2, #1
 80050e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80050ec:	3e01      	subs	r6, #1
 80050ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80050f0:	e776      	b.n	8004fe0 <_dtoa_r+0x100>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e7b7      	b.n	8005066 <_dtoa_r+0x186>
 80050f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80050f8:	e7b6      	b.n	8005068 <_dtoa_r+0x188>
 80050fa:	9b00      	ldr	r3, [sp, #0]
 80050fc:	1bdb      	subs	r3, r3, r7
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	427b      	negs	r3, r7
 8005102:	9308      	str	r3, [sp, #32]
 8005104:	2300      	movs	r3, #0
 8005106:	930d      	str	r3, [sp, #52]	@ 0x34
 8005108:	e7c3      	b.n	8005092 <_dtoa_r+0x1b2>
 800510a:	2301      	movs	r3, #1
 800510c:	9309      	str	r3, [sp, #36]	@ 0x24
 800510e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005110:	eb07 0b03 	add.w	fp, r7, r3
 8005114:	f10b 0301 	add.w	r3, fp, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	9303      	str	r3, [sp, #12]
 800511c:	bfb8      	it	lt
 800511e:	2301      	movlt	r3, #1
 8005120:	e006      	b.n	8005130 <_dtoa_r+0x250>
 8005122:	2301      	movs	r3, #1
 8005124:	9309      	str	r3, [sp, #36]	@ 0x24
 8005126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005128:	2b00      	cmp	r3, #0
 800512a:	dd28      	ble.n	800517e <_dtoa_r+0x29e>
 800512c:	469b      	mov	fp, r3
 800512e:	9303      	str	r3, [sp, #12]
 8005130:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005134:	2100      	movs	r1, #0
 8005136:	2204      	movs	r2, #4
 8005138:	f102 0514 	add.w	r5, r2, #20
 800513c:	429d      	cmp	r5, r3
 800513e:	d926      	bls.n	800518e <_dtoa_r+0x2ae>
 8005140:	6041      	str	r1, [r0, #4]
 8005142:	4648      	mov	r0, r9
 8005144:	f000 fd9c 	bl	8005c80 <_Balloc>
 8005148:	4682      	mov	sl, r0
 800514a:	2800      	cmp	r0, #0
 800514c:	d142      	bne.n	80051d4 <_dtoa_r+0x2f4>
 800514e:	4b1e      	ldr	r3, [pc, #120]	@ (80051c8 <_dtoa_r+0x2e8>)
 8005150:	4602      	mov	r2, r0
 8005152:	f240 11af 	movw	r1, #431	@ 0x1af
 8005156:	e6da      	b.n	8004f0e <_dtoa_r+0x2e>
 8005158:	2300      	movs	r3, #0
 800515a:	e7e3      	b.n	8005124 <_dtoa_r+0x244>
 800515c:	2300      	movs	r3, #0
 800515e:	e7d5      	b.n	800510c <_dtoa_r+0x22c>
 8005160:	2401      	movs	r4, #1
 8005162:	2300      	movs	r3, #0
 8005164:	9307      	str	r3, [sp, #28]
 8005166:	9409      	str	r4, [sp, #36]	@ 0x24
 8005168:	f04f 3bff 	mov.w	fp, #4294967295
 800516c:	2200      	movs	r2, #0
 800516e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005172:	2312      	movs	r3, #18
 8005174:	920c      	str	r2, [sp, #48]	@ 0x30
 8005176:	e7db      	b.n	8005130 <_dtoa_r+0x250>
 8005178:	2301      	movs	r3, #1
 800517a:	9309      	str	r3, [sp, #36]	@ 0x24
 800517c:	e7f4      	b.n	8005168 <_dtoa_r+0x288>
 800517e:	f04f 0b01 	mov.w	fp, #1
 8005182:	f8cd b00c 	str.w	fp, [sp, #12]
 8005186:	465b      	mov	r3, fp
 8005188:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800518c:	e7d0      	b.n	8005130 <_dtoa_r+0x250>
 800518e:	3101      	adds	r1, #1
 8005190:	0052      	lsls	r2, r2, #1
 8005192:	e7d1      	b.n	8005138 <_dtoa_r+0x258>
 8005194:	f3af 8000 	nop.w
 8005198:	636f4361 	.word	0x636f4361
 800519c:	3fd287a7 	.word	0x3fd287a7
 80051a0:	8b60c8b3 	.word	0x8b60c8b3
 80051a4:	3fc68a28 	.word	0x3fc68a28
 80051a8:	509f79fb 	.word	0x509f79fb
 80051ac:	3fd34413 	.word	0x3fd34413
 80051b0:	08006ed1 	.word	0x08006ed1
 80051b4:	08006ee8 	.word	0x08006ee8
 80051b8:	7ff00000 	.word	0x7ff00000
 80051bc:	08006ea1 	.word	0x08006ea1
 80051c0:	3ff80000 	.word	0x3ff80000
 80051c4:	08007038 	.word	0x08007038
 80051c8:	08006f40 	.word	0x08006f40
 80051cc:	08006ecd 	.word	0x08006ecd
 80051d0:	08006ea0 	.word	0x08006ea0
 80051d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051d8:	6018      	str	r0, [r3, #0]
 80051da:	9b03      	ldr	r3, [sp, #12]
 80051dc:	2b0e      	cmp	r3, #14
 80051de:	f200 80a1 	bhi.w	8005324 <_dtoa_r+0x444>
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	f000 809e 	beq.w	8005324 <_dtoa_r+0x444>
 80051e8:	2f00      	cmp	r7, #0
 80051ea:	dd33      	ble.n	8005254 <_dtoa_r+0x374>
 80051ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005460 <_dtoa_r+0x580>)
 80051ee:	f007 020f 	and.w	r2, r7, #15
 80051f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051f6:	ed93 7b00 	vldr	d7, [r3]
 80051fa:	05f8      	lsls	r0, r7, #23
 80051fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005200:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005204:	d516      	bpl.n	8005234 <_dtoa_r+0x354>
 8005206:	4b97      	ldr	r3, [pc, #604]	@ (8005464 <_dtoa_r+0x584>)
 8005208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800520c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005210:	f7fb fb1c 	bl	800084c <__aeabi_ddiv>
 8005214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005218:	f004 040f 	and.w	r4, r4, #15
 800521c:	2603      	movs	r6, #3
 800521e:	4d91      	ldr	r5, [pc, #580]	@ (8005464 <_dtoa_r+0x584>)
 8005220:	b954      	cbnz	r4, 8005238 <_dtoa_r+0x358>
 8005222:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800522a:	f7fb fb0f 	bl	800084c <__aeabi_ddiv>
 800522e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005232:	e028      	b.n	8005286 <_dtoa_r+0x3a6>
 8005234:	2602      	movs	r6, #2
 8005236:	e7f2      	b.n	800521e <_dtoa_r+0x33e>
 8005238:	07e1      	lsls	r1, r4, #31
 800523a:	d508      	bpl.n	800524e <_dtoa_r+0x36e>
 800523c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005240:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005244:	f7fb f9d8 	bl	80005f8 <__aeabi_dmul>
 8005248:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800524c:	3601      	adds	r6, #1
 800524e:	1064      	asrs	r4, r4, #1
 8005250:	3508      	adds	r5, #8
 8005252:	e7e5      	b.n	8005220 <_dtoa_r+0x340>
 8005254:	f000 80af 	beq.w	80053b6 <_dtoa_r+0x4d6>
 8005258:	427c      	negs	r4, r7
 800525a:	4b81      	ldr	r3, [pc, #516]	@ (8005460 <_dtoa_r+0x580>)
 800525c:	4d81      	ldr	r5, [pc, #516]	@ (8005464 <_dtoa_r+0x584>)
 800525e:	f004 020f 	and.w	r2, r4, #15
 8005262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800526e:	f7fb f9c3 	bl	80005f8 <__aeabi_dmul>
 8005272:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005276:	1124      	asrs	r4, r4, #4
 8005278:	2300      	movs	r3, #0
 800527a:	2602      	movs	r6, #2
 800527c:	2c00      	cmp	r4, #0
 800527e:	f040 808f 	bne.w	80053a0 <_dtoa_r+0x4c0>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1d3      	bne.n	800522e <_dtoa_r+0x34e>
 8005286:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005288:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8094 	beq.w	80053ba <_dtoa_r+0x4da>
 8005292:	4b75      	ldr	r3, [pc, #468]	@ (8005468 <_dtoa_r+0x588>)
 8005294:	2200      	movs	r2, #0
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f7fb fc1f 	bl	8000adc <__aeabi_dcmplt>
 800529e:	2800      	cmp	r0, #0
 80052a0:	f000 808b 	beq.w	80053ba <_dtoa_r+0x4da>
 80052a4:	9b03      	ldr	r3, [sp, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8087 	beq.w	80053ba <_dtoa_r+0x4da>
 80052ac:	f1bb 0f00 	cmp.w	fp, #0
 80052b0:	dd34      	ble.n	800531c <_dtoa_r+0x43c>
 80052b2:	4620      	mov	r0, r4
 80052b4:	4b6d      	ldr	r3, [pc, #436]	@ (800546c <_dtoa_r+0x58c>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	4629      	mov	r1, r5
 80052ba:	f7fb f99d 	bl	80005f8 <__aeabi_dmul>
 80052be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80052c6:	3601      	adds	r6, #1
 80052c8:	465c      	mov	r4, fp
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7fb f92a 	bl	8000524 <__aeabi_i2d>
 80052d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052d4:	f7fb f990 	bl	80005f8 <__aeabi_dmul>
 80052d8:	4b65      	ldr	r3, [pc, #404]	@ (8005470 <_dtoa_r+0x590>)
 80052da:	2200      	movs	r2, #0
 80052dc:	f7fa ffd6 	bl	800028c <__adddf3>
 80052e0:	4605      	mov	r5, r0
 80052e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80052e6:	2c00      	cmp	r4, #0
 80052e8:	d16a      	bne.n	80053c0 <_dtoa_r+0x4e0>
 80052ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ee:	4b61      	ldr	r3, [pc, #388]	@ (8005474 <_dtoa_r+0x594>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	f7fa ffc9 	bl	8000288 <__aeabi_dsub>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052fe:	462a      	mov	r2, r5
 8005300:	4633      	mov	r3, r6
 8005302:	f7fb fc09 	bl	8000b18 <__aeabi_dcmpgt>
 8005306:	2800      	cmp	r0, #0
 8005308:	f040 8298 	bne.w	800583c <_dtoa_r+0x95c>
 800530c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005310:	462a      	mov	r2, r5
 8005312:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005316:	f7fb fbe1 	bl	8000adc <__aeabi_dcmplt>
 800531a:	bb38      	cbnz	r0, 800536c <_dtoa_r+0x48c>
 800531c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005320:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005324:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005326:	2b00      	cmp	r3, #0
 8005328:	f2c0 8157 	blt.w	80055da <_dtoa_r+0x6fa>
 800532c:	2f0e      	cmp	r7, #14
 800532e:	f300 8154 	bgt.w	80055da <_dtoa_r+0x6fa>
 8005332:	4b4b      	ldr	r3, [pc, #300]	@ (8005460 <_dtoa_r+0x580>)
 8005334:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005338:	ed93 7b00 	vldr	d7, [r3]
 800533c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800533e:	2b00      	cmp	r3, #0
 8005340:	ed8d 7b00 	vstr	d7, [sp]
 8005344:	f280 80e5 	bge.w	8005512 <_dtoa_r+0x632>
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f300 80e1 	bgt.w	8005512 <_dtoa_r+0x632>
 8005350:	d10c      	bne.n	800536c <_dtoa_r+0x48c>
 8005352:	4b48      	ldr	r3, [pc, #288]	@ (8005474 <_dtoa_r+0x594>)
 8005354:	2200      	movs	r2, #0
 8005356:	ec51 0b17 	vmov	r0, r1, d7
 800535a:	f7fb f94d 	bl	80005f8 <__aeabi_dmul>
 800535e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005362:	f7fb fbcf 	bl	8000b04 <__aeabi_dcmpge>
 8005366:	2800      	cmp	r0, #0
 8005368:	f000 8266 	beq.w	8005838 <_dtoa_r+0x958>
 800536c:	2400      	movs	r4, #0
 800536e:	4625      	mov	r5, r4
 8005370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005372:	4656      	mov	r6, sl
 8005374:	ea6f 0803 	mvn.w	r8, r3
 8005378:	2700      	movs	r7, #0
 800537a:	4621      	mov	r1, r4
 800537c:	4648      	mov	r0, r9
 800537e:	f000 fcbf 	bl	8005d00 <_Bfree>
 8005382:	2d00      	cmp	r5, #0
 8005384:	f000 80bd 	beq.w	8005502 <_dtoa_r+0x622>
 8005388:	b12f      	cbz	r7, 8005396 <_dtoa_r+0x4b6>
 800538a:	42af      	cmp	r7, r5
 800538c:	d003      	beq.n	8005396 <_dtoa_r+0x4b6>
 800538e:	4639      	mov	r1, r7
 8005390:	4648      	mov	r0, r9
 8005392:	f000 fcb5 	bl	8005d00 <_Bfree>
 8005396:	4629      	mov	r1, r5
 8005398:	4648      	mov	r0, r9
 800539a:	f000 fcb1 	bl	8005d00 <_Bfree>
 800539e:	e0b0      	b.n	8005502 <_dtoa_r+0x622>
 80053a0:	07e2      	lsls	r2, r4, #31
 80053a2:	d505      	bpl.n	80053b0 <_dtoa_r+0x4d0>
 80053a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053a8:	f7fb f926 	bl	80005f8 <__aeabi_dmul>
 80053ac:	3601      	adds	r6, #1
 80053ae:	2301      	movs	r3, #1
 80053b0:	1064      	asrs	r4, r4, #1
 80053b2:	3508      	adds	r5, #8
 80053b4:	e762      	b.n	800527c <_dtoa_r+0x39c>
 80053b6:	2602      	movs	r6, #2
 80053b8:	e765      	b.n	8005286 <_dtoa_r+0x3a6>
 80053ba:	9c03      	ldr	r4, [sp, #12]
 80053bc:	46b8      	mov	r8, r7
 80053be:	e784      	b.n	80052ca <_dtoa_r+0x3ea>
 80053c0:	4b27      	ldr	r3, [pc, #156]	@ (8005460 <_dtoa_r+0x580>)
 80053c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053cc:	4454      	add	r4, sl
 80053ce:	2900      	cmp	r1, #0
 80053d0:	d054      	beq.n	800547c <_dtoa_r+0x59c>
 80053d2:	4929      	ldr	r1, [pc, #164]	@ (8005478 <_dtoa_r+0x598>)
 80053d4:	2000      	movs	r0, #0
 80053d6:	f7fb fa39 	bl	800084c <__aeabi_ddiv>
 80053da:	4633      	mov	r3, r6
 80053dc:	462a      	mov	r2, r5
 80053de:	f7fa ff53 	bl	8000288 <__aeabi_dsub>
 80053e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80053e6:	4656      	mov	r6, sl
 80053e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053ec:	f7fb fbb4 	bl	8000b58 <__aeabi_d2iz>
 80053f0:	4605      	mov	r5, r0
 80053f2:	f7fb f897 	bl	8000524 <__aeabi_i2d>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053fe:	f7fa ff43 	bl	8000288 <__aeabi_dsub>
 8005402:	3530      	adds	r5, #48	@ 0x30
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800540c:	f806 5b01 	strb.w	r5, [r6], #1
 8005410:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005414:	f7fb fb62 	bl	8000adc <__aeabi_dcmplt>
 8005418:	2800      	cmp	r0, #0
 800541a:	d172      	bne.n	8005502 <_dtoa_r+0x622>
 800541c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005420:	4911      	ldr	r1, [pc, #68]	@ (8005468 <_dtoa_r+0x588>)
 8005422:	2000      	movs	r0, #0
 8005424:	f7fa ff30 	bl	8000288 <__aeabi_dsub>
 8005428:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800542c:	f7fb fb56 	bl	8000adc <__aeabi_dcmplt>
 8005430:	2800      	cmp	r0, #0
 8005432:	f040 80b4 	bne.w	800559e <_dtoa_r+0x6be>
 8005436:	42a6      	cmp	r6, r4
 8005438:	f43f af70 	beq.w	800531c <_dtoa_r+0x43c>
 800543c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005440:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <_dtoa_r+0x58c>)
 8005442:	2200      	movs	r2, #0
 8005444:	f7fb f8d8 	bl	80005f8 <__aeabi_dmul>
 8005448:	4b08      	ldr	r3, [pc, #32]	@ (800546c <_dtoa_r+0x58c>)
 800544a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800544e:	2200      	movs	r2, #0
 8005450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005454:	f7fb f8d0 	bl	80005f8 <__aeabi_dmul>
 8005458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800545c:	e7c4      	b.n	80053e8 <_dtoa_r+0x508>
 800545e:	bf00      	nop
 8005460:	08007038 	.word	0x08007038
 8005464:	08007010 	.word	0x08007010
 8005468:	3ff00000 	.word	0x3ff00000
 800546c:	40240000 	.word	0x40240000
 8005470:	401c0000 	.word	0x401c0000
 8005474:	40140000 	.word	0x40140000
 8005478:	3fe00000 	.word	0x3fe00000
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	f7fb f8ba 	bl	80005f8 <__aeabi_dmul>
 8005484:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005488:	9413      	str	r4, [sp, #76]	@ 0x4c
 800548a:	4656      	mov	r6, sl
 800548c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005490:	f7fb fb62 	bl	8000b58 <__aeabi_d2iz>
 8005494:	4605      	mov	r5, r0
 8005496:	f7fb f845 	bl	8000524 <__aeabi_i2d>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054a2:	f7fa fef1 	bl	8000288 <__aeabi_dsub>
 80054a6:	3530      	adds	r5, #48	@ 0x30
 80054a8:	f806 5b01 	strb.w	r5, [r6], #1
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	d124      	bne.n	8005506 <_dtoa_r+0x626>
 80054bc:	4baf      	ldr	r3, [pc, #700]	@ (800577c <_dtoa_r+0x89c>)
 80054be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80054c2:	f7fa fee3 	bl	800028c <__adddf3>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ce:	f7fb fb23 	bl	8000b18 <__aeabi_dcmpgt>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d163      	bne.n	800559e <_dtoa_r+0x6be>
 80054d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80054da:	49a8      	ldr	r1, [pc, #672]	@ (800577c <_dtoa_r+0x89c>)
 80054dc:	2000      	movs	r0, #0
 80054de:	f7fa fed3 	bl	8000288 <__aeabi_dsub>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ea:	f7fb faf7 	bl	8000adc <__aeabi_dcmplt>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f43f af14 	beq.w	800531c <_dtoa_r+0x43c>
 80054f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80054f6:	1e73      	subs	r3, r6, #1
 80054f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054fe:	2b30      	cmp	r3, #48	@ 0x30
 8005500:	d0f8      	beq.n	80054f4 <_dtoa_r+0x614>
 8005502:	4647      	mov	r7, r8
 8005504:	e03b      	b.n	800557e <_dtoa_r+0x69e>
 8005506:	4b9e      	ldr	r3, [pc, #632]	@ (8005780 <_dtoa_r+0x8a0>)
 8005508:	f7fb f876 	bl	80005f8 <__aeabi_dmul>
 800550c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005510:	e7bc      	b.n	800548c <_dtoa_r+0x5ac>
 8005512:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005516:	4656      	mov	r6, sl
 8005518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fb f994 	bl	800084c <__aeabi_ddiv>
 8005524:	f7fb fb18 	bl	8000b58 <__aeabi_d2iz>
 8005528:	4680      	mov	r8, r0
 800552a:	f7fa fffb 	bl	8000524 <__aeabi_i2d>
 800552e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005532:	f7fb f861 	bl	80005f8 <__aeabi_dmul>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005542:	f7fa fea1 	bl	8000288 <__aeabi_dsub>
 8005546:	f806 4b01 	strb.w	r4, [r6], #1
 800554a:	9d03      	ldr	r5, [sp, #12]
 800554c:	eba6 040a 	sub.w	r4, r6, sl
 8005550:	42a5      	cmp	r5, r4
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	d133      	bne.n	80055c0 <_dtoa_r+0x6e0>
 8005558:	f7fa fe98 	bl	800028c <__adddf3>
 800555c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005560:	4604      	mov	r4, r0
 8005562:	460d      	mov	r5, r1
 8005564:	f7fb fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8005568:	b9c0      	cbnz	r0, 800559c <_dtoa_r+0x6bc>
 800556a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800556e:	4620      	mov	r0, r4
 8005570:	4629      	mov	r1, r5
 8005572:	f7fb faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005576:	b110      	cbz	r0, 800557e <_dtoa_r+0x69e>
 8005578:	f018 0f01 	tst.w	r8, #1
 800557c:	d10e      	bne.n	800559c <_dtoa_r+0x6bc>
 800557e:	9902      	ldr	r1, [sp, #8]
 8005580:	4648      	mov	r0, r9
 8005582:	f000 fbbd 	bl	8005d00 <_Bfree>
 8005586:	2300      	movs	r3, #0
 8005588:	7033      	strb	r3, [r6, #0]
 800558a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800558c:	3701      	adds	r7, #1
 800558e:	601f      	str	r7, [r3, #0]
 8005590:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 824b 	beq.w	8005a2e <_dtoa_r+0xb4e>
 8005598:	601e      	str	r6, [r3, #0]
 800559a:	e248      	b.n	8005a2e <_dtoa_r+0xb4e>
 800559c:	46b8      	mov	r8, r7
 800559e:	4633      	mov	r3, r6
 80055a0:	461e      	mov	r6, r3
 80055a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055a6:	2a39      	cmp	r2, #57	@ 0x39
 80055a8:	d106      	bne.n	80055b8 <_dtoa_r+0x6d8>
 80055aa:	459a      	cmp	sl, r3
 80055ac:	d1f8      	bne.n	80055a0 <_dtoa_r+0x6c0>
 80055ae:	2230      	movs	r2, #48	@ 0x30
 80055b0:	f108 0801 	add.w	r8, r8, #1
 80055b4:	f88a 2000 	strb.w	r2, [sl]
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	3201      	adds	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e7a0      	b.n	8005502 <_dtoa_r+0x622>
 80055c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005780 <_dtoa_r+0x8a0>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	f7fb f818 	bl	80005f8 <__aeabi_dmul>
 80055c8:	2200      	movs	r2, #0
 80055ca:	2300      	movs	r3, #0
 80055cc:	4604      	mov	r4, r0
 80055ce:	460d      	mov	r5, r1
 80055d0:	f7fb fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d09f      	beq.n	8005518 <_dtoa_r+0x638>
 80055d8:	e7d1      	b.n	800557e <_dtoa_r+0x69e>
 80055da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055dc:	2a00      	cmp	r2, #0
 80055de:	f000 80ea 	beq.w	80057b6 <_dtoa_r+0x8d6>
 80055e2:	9a07      	ldr	r2, [sp, #28]
 80055e4:	2a01      	cmp	r2, #1
 80055e6:	f300 80cd 	bgt.w	8005784 <_dtoa_r+0x8a4>
 80055ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80055ec:	2a00      	cmp	r2, #0
 80055ee:	f000 80c1 	beq.w	8005774 <_dtoa_r+0x894>
 80055f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80055f6:	9c08      	ldr	r4, [sp, #32]
 80055f8:	9e00      	ldr	r6, [sp, #0]
 80055fa:	9a00      	ldr	r2, [sp, #0]
 80055fc:	441a      	add	r2, r3
 80055fe:	9200      	str	r2, [sp, #0]
 8005600:	9a06      	ldr	r2, [sp, #24]
 8005602:	2101      	movs	r1, #1
 8005604:	441a      	add	r2, r3
 8005606:	4648      	mov	r0, r9
 8005608:	9206      	str	r2, [sp, #24]
 800560a:	f000 fc2d 	bl	8005e68 <__i2b>
 800560e:	4605      	mov	r5, r0
 8005610:	b166      	cbz	r6, 800562c <_dtoa_r+0x74c>
 8005612:	9b06      	ldr	r3, [sp, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	dd09      	ble.n	800562c <_dtoa_r+0x74c>
 8005618:	42b3      	cmp	r3, r6
 800561a:	9a00      	ldr	r2, [sp, #0]
 800561c:	bfa8      	it	ge
 800561e:	4633      	movge	r3, r6
 8005620:	1ad2      	subs	r2, r2, r3
 8005622:	9200      	str	r2, [sp, #0]
 8005624:	9a06      	ldr	r2, [sp, #24]
 8005626:	1af6      	subs	r6, r6, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	9306      	str	r3, [sp, #24]
 800562c:	9b08      	ldr	r3, [sp, #32]
 800562e:	b30b      	cbz	r3, 8005674 <_dtoa_r+0x794>
 8005630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80c6 	beq.w	80057c4 <_dtoa_r+0x8e4>
 8005638:	2c00      	cmp	r4, #0
 800563a:	f000 80c0 	beq.w	80057be <_dtoa_r+0x8de>
 800563e:	4629      	mov	r1, r5
 8005640:	4622      	mov	r2, r4
 8005642:	4648      	mov	r0, r9
 8005644:	f000 fcc8 	bl	8005fd8 <__pow5mult>
 8005648:	9a02      	ldr	r2, [sp, #8]
 800564a:	4601      	mov	r1, r0
 800564c:	4605      	mov	r5, r0
 800564e:	4648      	mov	r0, r9
 8005650:	f000 fc20 	bl	8005e94 <__multiply>
 8005654:	9902      	ldr	r1, [sp, #8]
 8005656:	4680      	mov	r8, r0
 8005658:	4648      	mov	r0, r9
 800565a:	f000 fb51 	bl	8005d00 <_Bfree>
 800565e:	9b08      	ldr	r3, [sp, #32]
 8005660:	1b1b      	subs	r3, r3, r4
 8005662:	9308      	str	r3, [sp, #32]
 8005664:	f000 80b1 	beq.w	80057ca <_dtoa_r+0x8ea>
 8005668:	9a08      	ldr	r2, [sp, #32]
 800566a:	4641      	mov	r1, r8
 800566c:	4648      	mov	r0, r9
 800566e:	f000 fcb3 	bl	8005fd8 <__pow5mult>
 8005672:	9002      	str	r0, [sp, #8]
 8005674:	2101      	movs	r1, #1
 8005676:	4648      	mov	r0, r9
 8005678:	f000 fbf6 	bl	8005e68 <__i2b>
 800567c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800567e:	4604      	mov	r4, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 81d8 	beq.w	8005a36 <_dtoa_r+0xb56>
 8005686:	461a      	mov	r2, r3
 8005688:	4601      	mov	r1, r0
 800568a:	4648      	mov	r0, r9
 800568c:	f000 fca4 	bl	8005fd8 <__pow5mult>
 8005690:	9b07      	ldr	r3, [sp, #28]
 8005692:	2b01      	cmp	r3, #1
 8005694:	4604      	mov	r4, r0
 8005696:	f300 809f 	bgt.w	80057d8 <_dtoa_r+0x8f8>
 800569a:	9b04      	ldr	r3, [sp, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f040 8097 	bne.w	80057d0 <_dtoa_r+0x8f0>
 80056a2:	9b05      	ldr	r3, [sp, #20]
 80056a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f040 8093 	bne.w	80057d4 <_dtoa_r+0x8f4>
 80056ae:	9b05      	ldr	r3, [sp, #20]
 80056b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056b4:	0d1b      	lsrs	r3, r3, #20
 80056b6:	051b      	lsls	r3, r3, #20
 80056b8:	b133      	cbz	r3, 80056c8 <_dtoa_r+0x7e8>
 80056ba:	9b00      	ldr	r3, [sp, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	9b06      	ldr	r3, [sp, #24]
 80056c2:	3301      	adds	r3, #1
 80056c4:	9306      	str	r3, [sp, #24]
 80056c6:	2301      	movs	r3, #1
 80056c8:	9308      	str	r3, [sp, #32]
 80056ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 81b8 	beq.w	8005a42 <_dtoa_r+0xb62>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056d8:	6918      	ldr	r0, [r3, #16]
 80056da:	f000 fb79 	bl	8005dd0 <__hi0bits>
 80056de:	f1c0 0020 	rsb	r0, r0, #32
 80056e2:	9b06      	ldr	r3, [sp, #24]
 80056e4:	4418      	add	r0, r3
 80056e6:	f010 001f 	ands.w	r0, r0, #31
 80056ea:	f000 8082 	beq.w	80057f2 <_dtoa_r+0x912>
 80056ee:	f1c0 0320 	rsb	r3, r0, #32
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	dd73      	ble.n	80057de <_dtoa_r+0x8fe>
 80056f6:	9b00      	ldr	r3, [sp, #0]
 80056f8:	f1c0 001c 	rsb	r0, r0, #28
 80056fc:	4403      	add	r3, r0
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	9b06      	ldr	r3, [sp, #24]
 8005702:	4403      	add	r3, r0
 8005704:	4406      	add	r6, r0
 8005706:	9306      	str	r3, [sp, #24]
 8005708:	9b00      	ldr	r3, [sp, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	dd05      	ble.n	800571a <_dtoa_r+0x83a>
 800570e:	9902      	ldr	r1, [sp, #8]
 8005710:	461a      	mov	r2, r3
 8005712:	4648      	mov	r0, r9
 8005714:	f000 fcba 	bl	800608c <__lshift>
 8005718:	9002      	str	r0, [sp, #8]
 800571a:	9b06      	ldr	r3, [sp, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	dd05      	ble.n	800572c <_dtoa_r+0x84c>
 8005720:	4621      	mov	r1, r4
 8005722:	461a      	mov	r2, r3
 8005724:	4648      	mov	r0, r9
 8005726:	f000 fcb1 	bl	800608c <__lshift>
 800572a:	4604      	mov	r4, r0
 800572c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d061      	beq.n	80057f6 <_dtoa_r+0x916>
 8005732:	9802      	ldr	r0, [sp, #8]
 8005734:	4621      	mov	r1, r4
 8005736:	f000 fd15 	bl	8006164 <__mcmp>
 800573a:	2800      	cmp	r0, #0
 800573c:	da5b      	bge.n	80057f6 <_dtoa_r+0x916>
 800573e:	2300      	movs	r3, #0
 8005740:	9902      	ldr	r1, [sp, #8]
 8005742:	220a      	movs	r2, #10
 8005744:	4648      	mov	r0, r9
 8005746:	f000 fafd 	bl	8005d44 <__multadd>
 800574a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800574c:	9002      	str	r0, [sp, #8]
 800574e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8177 	beq.w	8005a46 <_dtoa_r+0xb66>
 8005758:	4629      	mov	r1, r5
 800575a:	2300      	movs	r3, #0
 800575c:	220a      	movs	r2, #10
 800575e:	4648      	mov	r0, r9
 8005760:	f000 faf0 	bl	8005d44 <__multadd>
 8005764:	f1bb 0f00 	cmp.w	fp, #0
 8005768:	4605      	mov	r5, r0
 800576a:	dc6f      	bgt.n	800584c <_dtoa_r+0x96c>
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	2b02      	cmp	r3, #2
 8005770:	dc49      	bgt.n	8005806 <_dtoa_r+0x926>
 8005772:	e06b      	b.n	800584c <_dtoa_r+0x96c>
 8005774:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005776:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800577a:	e73c      	b.n	80055f6 <_dtoa_r+0x716>
 800577c:	3fe00000 	.word	0x3fe00000
 8005780:	40240000 	.word	0x40240000
 8005784:	9b03      	ldr	r3, [sp, #12]
 8005786:	1e5c      	subs	r4, r3, #1
 8005788:	9b08      	ldr	r3, [sp, #32]
 800578a:	42a3      	cmp	r3, r4
 800578c:	db09      	blt.n	80057a2 <_dtoa_r+0x8c2>
 800578e:	1b1c      	subs	r4, r3, r4
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f6bf af30 	bge.w	80055f8 <_dtoa_r+0x718>
 8005798:	9b00      	ldr	r3, [sp, #0]
 800579a:	9a03      	ldr	r2, [sp, #12]
 800579c:	1a9e      	subs	r6, r3, r2
 800579e:	2300      	movs	r3, #0
 80057a0:	e72b      	b.n	80055fa <_dtoa_r+0x71a>
 80057a2:	9b08      	ldr	r3, [sp, #32]
 80057a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80057a6:	9408      	str	r4, [sp, #32]
 80057a8:	1ae3      	subs	r3, r4, r3
 80057aa:	441a      	add	r2, r3
 80057ac:	9e00      	ldr	r6, [sp, #0]
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80057b2:	2400      	movs	r4, #0
 80057b4:	e721      	b.n	80055fa <_dtoa_r+0x71a>
 80057b6:	9c08      	ldr	r4, [sp, #32]
 80057b8:	9e00      	ldr	r6, [sp, #0]
 80057ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80057bc:	e728      	b.n	8005610 <_dtoa_r+0x730>
 80057be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80057c2:	e751      	b.n	8005668 <_dtoa_r+0x788>
 80057c4:	9a08      	ldr	r2, [sp, #32]
 80057c6:	9902      	ldr	r1, [sp, #8]
 80057c8:	e750      	b.n	800566c <_dtoa_r+0x78c>
 80057ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80057ce:	e751      	b.n	8005674 <_dtoa_r+0x794>
 80057d0:	2300      	movs	r3, #0
 80057d2:	e779      	b.n	80056c8 <_dtoa_r+0x7e8>
 80057d4:	9b04      	ldr	r3, [sp, #16]
 80057d6:	e777      	b.n	80056c8 <_dtoa_r+0x7e8>
 80057d8:	2300      	movs	r3, #0
 80057da:	9308      	str	r3, [sp, #32]
 80057dc:	e779      	b.n	80056d2 <_dtoa_r+0x7f2>
 80057de:	d093      	beq.n	8005708 <_dtoa_r+0x828>
 80057e0:	9a00      	ldr	r2, [sp, #0]
 80057e2:	331c      	adds	r3, #28
 80057e4:	441a      	add	r2, r3
 80057e6:	9200      	str	r2, [sp, #0]
 80057e8:	9a06      	ldr	r2, [sp, #24]
 80057ea:	441a      	add	r2, r3
 80057ec:	441e      	add	r6, r3
 80057ee:	9206      	str	r2, [sp, #24]
 80057f0:	e78a      	b.n	8005708 <_dtoa_r+0x828>
 80057f2:	4603      	mov	r3, r0
 80057f4:	e7f4      	b.n	80057e0 <_dtoa_r+0x900>
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	46b8      	mov	r8, r7
 80057fc:	dc20      	bgt.n	8005840 <_dtoa_r+0x960>
 80057fe:	469b      	mov	fp, r3
 8005800:	9b07      	ldr	r3, [sp, #28]
 8005802:	2b02      	cmp	r3, #2
 8005804:	dd1e      	ble.n	8005844 <_dtoa_r+0x964>
 8005806:	f1bb 0f00 	cmp.w	fp, #0
 800580a:	f47f adb1 	bne.w	8005370 <_dtoa_r+0x490>
 800580e:	4621      	mov	r1, r4
 8005810:	465b      	mov	r3, fp
 8005812:	2205      	movs	r2, #5
 8005814:	4648      	mov	r0, r9
 8005816:	f000 fa95 	bl	8005d44 <__multadd>
 800581a:	4601      	mov	r1, r0
 800581c:	4604      	mov	r4, r0
 800581e:	9802      	ldr	r0, [sp, #8]
 8005820:	f000 fca0 	bl	8006164 <__mcmp>
 8005824:	2800      	cmp	r0, #0
 8005826:	f77f ada3 	ble.w	8005370 <_dtoa_r+0x490>
 800582a:	4656      	mov	r6, sl
 800582c:	2331      	movs	r3, #49	@ 0x31
 800582e:	f806 3b01 	strb.w	r3, [r6], #1
 8005832:	f108 0801 	add.w	r8, r8, #1
 8005836:	e59f      	b.n	8005378 <_dtoa_r+0x498>
 8005838:	9c03      	ldr	r4, [sp, #12]
 800583a:	46b8      	mov	r8, r7
 800583c:	4625      	mov	r5, r4
 800583e:	e7f4      	b.n	800582a <_dtoa_r+0x94a>
 8005840:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8101 	beq.w	8005a4e <_dtoa_r+0xb6e>
 800584c:	2e00      	cmp	r6, #0
 800584e:	dd05      	ble.n	800585c <_dtoa_r+0x97c>
 8005850:	4629      	mov	r1, r5
 8005852:	4632      	mov	r2, r6
 8005854:	4648      	mov	r0, r9
 8005856:	f000 fc19 	bl	800608c <__lshift>
 800585a:	4605      	mov	r5, r0
 800585c:	9b08      	ldr	r3, [sp, #32]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d05c      	beq.n	800591c <_dtoa_r+0xa3c>
 8005862:	6869      	ldr	r1, [r5, #4]
 8005864:	4648      	mov	r0, r9
 8005866:	f000 fa0b 	bl	8005c80 <_Balloc>
 800586a:	4606      	mov	r6, r0
 800586c:	b928      	cbnz	r0, 800587a <_dtoa_r+0x99a>
 800586e:	4b82      	ldr	r3, [pc, #520]	@ (8005a78 <_dtoa_r+0xb98>)
 8005870:	4602      	mov	r2, r0
 8005872:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005876:	f7ff bb4a 	b.w	8004f0e <_dtoa_r+0x2e>
 800587a:	692a      	ldr	r2, [r5, #16]
 800587c:	3202      	adds	r2, #2
 800587e:	0092      	lsls	r2, r2, #2
 8005880:	f105 010c 	add.w	r1, r5, #12
 8005884:	300c      	adds	r0, #12
 8005886:	f000 fff7 	bl	8006878 <memcpy>
 800588a:	2201      	movs	r2, #1
 800588c:	4631      	mov	r1, r6
 800588e:	4648      	mov	r0, r9
 8005890:	f000 fbfc 	bl	800608c <__lshift>
 8005894:	f10a 0301 	add.w	r3, sl, #1
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	eb0a 030b 	add.w	r3, sl, fp
 800589e:	9308      	str	r3, [sp, #32]
 80058a0:	9b04      	ldr	r3, [sp, #16]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	462f      	mov	r7, r5
 80058a8:	9306      	str	r3, [sp, #24]
 80058aa:	4605      	mov	r5, r0
 80058ac:	9b00      	ldr	r3, [sp, #0]
 80058ae:	9802      	ldr	r0, [sp, #8]
 80058b0:	4621      	mov	r1, r4
 80058b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80058b6:	f7ff fa8a 	bl	8004dce <quorem>
 80058ba:	4603      	mov	r3, r0
 80058bc:	3330      	adds	r3, #48	@ 0x30
 80058be:	9003      	str	r0, [sp, #12]
 80058c0:	4639      	mov	r1, r7
 80058c2:	9802      	ldr	r0, [sp, #8]
 80058c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c6:	f000 fc4d 	bl	8006164 <__mcmp>
 80058ca:	462a      	mov	r2, r5
 80058cc:	9004      	str	r0, [sp, #16]
 80058ce:	4621      	mov	r1, r4
 80058d0:	4648      	mov	r0, r9
 80058d2:	f000 fc63 	bl	800619c <__mdiff>
 80058d6:	68c2      	ldr	r2, [r0, #12]
 80058d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058da:	4606      	mov	r6, r0
 80058dc:	bb02      	cbnz	r2, 8005920 <_dtoa_r+0xa40>
 80058de:	4601      	mov	r1, r0
 80058e0:	9802      	ldr	r0, [sp, #8]
 80058e2:	f000 fc3f 	bl	8006164 <__mcmp>
 80058e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058e8:	4602      	mov	r2, r0
 80058ea:	4631      	mov	r1, r6
 80058ec:	4648      	mov	r0, r9
 80058ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80058f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80058f2:	f000 fa05 	bl	8005d00 <_Bfree>
 80058f6:	9b07      	ldr	r3, [sp, #28]
 80058f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80058fa:	9e00      	ldr	r6, [sp, #0]
 80058fc:	ea42 0103 	orr.w	r1, r2, r3
 8005900:	9b06      	ldr	r3, [sp, #24]
 8005902:	4319      	orrs	r1, r3
 8005904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005906:	d10d      	bne.n	8005924 <_dtoa_r+0xa44>
 8005908:	2b39      	cmp	r3, #57	@ 0x39
 800590a:	d027      	beq.n	800595c <_dtoa_r+0xa7c>
 800590c:	9a04      	ldr	r2, [sp, #16]
 800590e:	2a00      	cmp	r2, #0
 8005910:	dd01      	ble.n	8005916 <_dtoa_r+0xa36>
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	3331      	adds	r3, #49	@ 0x31
 8005916:	f88b 3000 	strb.w	r3, [fp]
 800591a:	e52e      	b.n	800537a <_dtoa_r+0x49a>
 800591c:	4628      	mov	r0, r5
 800591e:	e7b9      	b.n	8005894 <_dtoa_r+0x9b4>
 8005920:	2201      	movs	r2, #1
 8005922:	e7e2      	b.n	80058ea <_dtoa_r+0xa0a>
 8005924:	9904      	ldr	r1, [sp, #16]
 8005926:	2900      	cmp	r1, #0
 8005928:	db04      	blt.n	8005934 <_dtoa_r+0xa54>
 800592a:	9807      	ldr	r0, [sp, #28]
 800592c:	4301      	orrs	r1, r0
 800592e:	9806      	ldr	r0, [sp, #24]
 8005930:	4301      	orrs	r1, r0
 8005932:	d120      	bne.n	8005976 <_dtoa_r+0xa96>
 8005934:	2a00      	cmp	r2, #0
 8005936:	ddee      	ble.n	8005916 <_dtoa_r+0xa36>
 8005938:	9902      	ldr	r1, [sp, #8]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2201      	movs	r2, #1
 800593e:	4648      	mov	r0, r9
 8005940:	f000 fba4 	bl	800608c <__lshift>
 8005944:	4621      	mov	r1, r4
 8005946:	9002      	str	r0, [sp, #8]
 8005948:	f000 fc0c 	bl	8006164 <__mcmp>
 800594c:	2800      	cmp	r0, #0
 800594e:	9b00      	ldr	r3, [sp, #0]
 8005950:	dc02      	bgt.n	8005958 <_dtoa_r+0xa78>
 8005952:	d1e0      	bne.n	8005916 <_dtoa_r+0xa36>
 8005954:	07da      	lsls	r2, r3, #31
 8005956:	d5de      	bpl.n	8005916 <_dtoa_r+0xa36>
 8005958:	2b39      	cmp	r3, #57	@ 0x39
 800595a:	d1da      	bne.n	8005912 <_dtoa_r+0xa32>
 800595c:	2339      	movs	r3, #57	@ 0x39
 800595e:	f88b 3000 	strb.w	r3, [fp]
 8005962:	4633      	mov	r3, r6
 8005964:	461e      	mov	r6, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800596c:	2a39      	cmp	r2, #57	@ 0x39
 800596e:	d04e      	beq.n	8005a0e <_dtoa_r+0xb2e>
 8005970:	3201      	adds	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e501      	b.n	800537a <_dtoa_r+0x49a>
 8005976:	2a00      	cmp	r2, #0
 8005978:	dd03      	ble.n	8005982 <_dtoa_r+0xaa2>
 800597a:	2b39      	cmp	r3, #57	@ 0x39
 800597c:	d0ee      	beq.n	800595c <_dtoa_r+0xa7c>
 800597e:	3301      	adds	r3, #1
 8005980:	e7c9      	b.n	8005916 <_dtoa_r+0xa36>
 8005982:	9a00      	ldr	r2, [sp, #0]
 8005984:	9908      	ldr	r1, [sp, #32]
 8005986:	f802 3c01 	strb.w	r3, [r2, #-1]
 800598a:	428a      	cmp	r2, r1
 800598c:	d028      	beq.n	80059e0 <_dtoa_r+0xb00>
 800598e:	9902      	ldr	r1, [sp, #8]
 8005990:	2300      	movs	r3, #0
 8005992:	220a      	movs	r2, #10
 8005994:	4648      	mov	r0, r9
 8005996:	f000 f9d5 	bl	8005d44 <__multadd>
 800599a:	42af      	cmp	r7, r5
 800599c:	9002      	str	r0, [sp, #8]
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	f04f 020a 	mov.w	r2, #10
 80059a6:	4639      	mov	r1, r7
 80059a8:	4648      	mov	r0, r9
 80059aa:	d107      	bne.n	80059bc <_dtoa_r+0xadc>
 80059ac:	f000 f9ca 	bl	8005d44 <__multadd>
 80059b0:	4607      	mov	r7, r0
 80059b2:	4605      	mov	r5, r0
 80059b4:	9b00      	ldr	r3, [sp, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	e777      	b.n	80058ac <_dtoa_r+0x9cc>
 80059bc:	f000 f9c2 	bl	8005d44 <__multadd>
 80059c0:	4629      	mov	r1, r5
 80059c2:	4607      	mov	r7, r0
 80059c4:	2300      	movs	r3, #0
 80059c6:	220a      	movs	r2, #10
 80059c8:	4648      	mov	r0, r9
 80059ca:	f000 f9bb 	bl	8005d44 <__multadd>
 80059ce:	4605      	mov	r5, r0
 80059d0:	e7f0      	b.n	80059b4 <_dtoa_r+0xad4>
 80059d2:	f1bb 0f00 	cmp.w	fp, #0
 80059d6:	bfcc      	ite	gt
 80059d8:	465e      	movgt	r6, fp
 80059da:	2601      	movle	r6, #1
 80059dc:	4456      	add	r6, sl
 80059de:	2700      	movs	r7, #0
 80059e0:	9902      	ldr	r1, [sp, #8]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	2201      	movs	r2, #1
 80059e6:	4648      	mov	r0, r9
 80059e8:	f000 fb50 	bl	800608c <__lshift>
 80059ec:	4621      	mov	r1, r4
 80059ee:	9002      	str	r0, [sp, #8]
 80059f0:	f000 fbb8 	bl	8006164 <__mcmp>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	dcb4      	bgt.n	8005962 <_dtoa_r+0xa82>
 80059f8:	d102      	bne.n	8005a00 <_dtoa_r+0xb20>
 80059fa:	9b00      	ldr	r3, [sp, #0]
 80059fc:	07db      	lsls	r3, r3, #31
 80059fe:	d4b0      	bmi.n	8005962 <_dtoa_r+0xa82>
 8005a00:	4633      	mov	r3, r6
 8005a02:	461e      	mov	r6, r3
 8005a04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a08:	2a30      	cmp	r2, #48	@ 0x30
 8005a0a:	d0fa      	beq.n	8005a02 <_dtoa_r+0xb22>
 8005a0c:	e4b5      	b.n	800537a <_dtoa_r+0x49a>
 8005a0e:	459a      	cmp	sl, r3
 8005a10:	d1a8      	bne.n	8005964 <_dtoa_r+0xa84>
 8005a12:	2331      	movs	r3, #49	@ 0x31
 8005a14:	f108 0801 	add.w	r8, r8, #1
 8005a18:	f88a 3000 	strb.w	r3, [sl]
 8005a1c:	e4ad      	b.n	800537a <_dtoa_r+0x49a>
 8005a1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005a7c <_dtoa_r+0xb9c>
 8005a24:	b11b      	cbz	r3, 8005a2e <_dtoa_r+0xb4e>
 8005a26:	f10a 0308 	add.w	r3, sl, #8
 8005a2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	4650      	mov	r0, sl
 8005a30:	b017      	add	sp, #92	@ 0x5c
 8005a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a36:	9b07      	ldr	r3, [sp, #28]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	f77f ae2e 	ble.w	800569a <_dtoa_r+0x7ba>
 8005a3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a40:	9308      	str	r3, [sp, #32]
 8005a42:	2001      	movs	r0, #1
 8005a44:	e64d      	b.n	80056e2 <_dtoa_r+0x802>
 8005a46:	f1bb 0f00 	cmp.w	fp, #0
 8005a4a:	f77f aed9 	ble.w	8005800 <_dtoa_r+0x920>
 8005a4e:	4656      	mov	r6, sl
 8005a50:	9802      	ldr	r0, [sp, #8]
 8005a52:	4621      	mov	r1, r4
 8005a54:	f7ff f9bb 	bl	8004dce <quorem>
 8005a58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005a5c:	f806 3b01 	strb.w	r3, [r6], #1
 8005a60:	eba6 020a 	sub.w	r2, r6, sl
 8005a64:	4593      	cmp	fp, r2
 8005a66:	ddb4      	ble.n	80059d2 <_dtoa_r+0xaf2>
 8005a68:	9902      	ldr	r1, [sp, #8]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	220a      	movs	r2, #10
 8005a6e:	4648      	mov	r0, r9
 8005a70:	f000 f968 	bl	8005d44 <__multadd>
 8005a74:	9002      	str	r0, [sp, #8]
 8005a76:	e7eb      	b.n	8005a50 <_dtoa_r+0xb70>
 8005a78:	08006f40 	.word	0x08006f40
 8005a7c:	08006ec4 	.word	0x08006ec4

08005a80 <_free_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4605      	mov	r5, r0
 8005a84:	2900      	cmp	r1, #0
 8005a86:	d041      	beq.n	8005b0c <_free_r+0x8c>
 8005a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8c:	1f0c      	subs	r4, r1, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bfb8      	it	lt
 8005a92:	18e4      	addlt	r4, r4, r3
 8005a94:	f000 f8e8 	bl	8005c68 <__malloc_lock>
 8005a98:	4a1d      	ldr	r2, [pc, #116]	@ (8005b10 <_free_r+0x90>)
 8005a9a:	6813      	ldr	r3, [r2, #0]
 8005a9c:	b933      	cbnz	r3, 8005aac <_free_r+0x2c>
 8005a9e:	6063      	str	r3, [r4, #4]
 8005aa0:	6014      	str	r4, [r2, #0]
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aa8:	f000 b8e4 	b.w	8005c74 <__malloc_unlock>
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	d908      	bls.n	8005ac2 <_free_r+0x42>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	1821      	adds	r1, r4, r0
 8005ab4:	428b      	cmp	r3, r1
 8005ab6:	bf01      	itttt	eq
 8005ab8:	6819      	ldreq	r1, [r3, #0]
 8005aba:	685b      	ldreq	r3, [r3, #4]
 8005abc:	1809      	addeq	r1, r1, r0
 8005abe:	6021      	streq	r1, [r4, #0]
 8005ac0:	e7ed      	b.n	8005a9e <_free_r+0x1e>
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	b10b      	cbz	r3, 8005acc <_free_r+0x4c>
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	d9fa      	bls.n	8005ac2 <_free_r+0x42>
 8005acc:	6811      	ldr	r1, [r2, #0]
 8005ace:	1850      	adds	r0, r2, r1
 8005ad0:	42a0      	cmp	r0, r4
 8005ad2:	d10b      	bne.n	8005aec <_free_r+0x6c>
 8005ad4:	6820      	ldr	r0, [r4, #0]
 8005ad6:	4401      	add	r1, r0
 8005ad8:	1850      	adds	r0, r2, r1
 8005ada:	4283      	cmp	r3, r0
 8005adc:	6011      	str	r1, [r2, #0]
 8005ade:	d1e0      	bne.n	8005aa2 <_free_r+0x22>
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	6053      	str	r3, [r2, #4]
 8005ae6:	4408      	add	r0, r1
 8005ae8:	6010      	str	r0, [r2, #0]
 8005aea:	e7da      	b.n	8005aa2 <_free_r+0x22>
 8005aec:	d902      	bls.n	8005af4 <_free_r+0x74>
 8005aee:	230c      	movs	r3, #12
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	e7d6      	b.n	8005aa2 <_free_r+0x22>
 8005af4:	6820      	ldr	r0, [r4, #0]
 8005af6:	1821      	adds	r1, r4, r0
 8005af8:	428b      	cmp	r3, r1
 8005afa:	bf04      	itt	eq
 8005afc:	6819      	ldreq	r1, [r3, #0]
 8005afe:	685b      	ldreq	r3, [r3, #4]
 8005b00:	6063      	str	r3, [r4, #4]
 8005b02:	bf04      	itt	eq
 8005b04:	1809      	addeq	r1, r1, r0
 8005b06:	6021      	streq	r1, [r4, #0]
 8005b08:	6054      	str	r4, [r2, #4]
 8005b0a:	e7ca      	b.n	8005aa2 <_free_r+0x22>
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}
 8005b0e:	bf00      	nop
 8005b10:	200008c8 	.word	0x200008c8

08005b14 <malloc>:
 8005b14:	4b02      	ldr	r3, [pc, #8]	@ (8005b20 <malloc+0xc>)
 8005b16:	4601      	mov	r1, r0
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	f000 b825 	b.w	8005b68 <_malloc_r>
 8005b1e:	bf00      	nop
 8005b20:	20000018 	.word	0x20000018

08005b24 <sbrk_aligned>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4e0f      	ldr	r6, [pc, #60]	@ (8005b64 <sbrk_aligned+0x40>)
 8005b28:	460c      	mov	r4, r1
 8005b2a:	6831      	ldr	r1, [r6, #0]
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	b911      	cbnz	r1, 8005b36 <sbrk_aligned+0x12>
 8005b30:	f000 fe92 	bl	8006858 <_sbrk_r>
 8005b34:	6030      	str	r0, [r6, #0]
 8005b36:	4621      	mov	r1, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 fe8d 	bl	8006858 <_sbrk_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	d103      	bne.n	8005b4a <sbrk_aligned+0x26>
 8005b42:	f04f 34ff 	mov.w	r4, #4294967295
 8005b46:	4620      	mov	r0, r4
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
 8005b4a:	1cc4      	adds	r4, r0, #3
 8005b4c:	f024 0403 	bic.w	r4, r4, #3
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	d0f8      	beq.n	8005b46 <sbrk_aligned+0x22>
 8005b54:	1a21      	subs	r1, r4, r0
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 fe7e 	bl	8006858 <_sbrk_r>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1f2      	bne.n	8005b46 <sbrk_aligned+0x22>
 8005b60:	e7ef      	b.n	8005b42 <sbrk_aligned+0x1e>
 8005b62:	bf00      	nop
 8005b64:	200008c4 	.word	0x200008c4

08005b68 <_malloc_r>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	1ccd      	adds	r5, r1, #3
 8005b6e:	f025 0503 	bic.w	r5, r5, #3
 8005b72:	3508      	adds	r5, #8
 8005b74:	2d0c      	cmp	r5, #12
 8005b76:	bf38      	it	cc
 8005b78:	250c      	movcc	r5, #12
 8005b7a:	2d00      	cmp	r5, #0
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	db01      	blt.n	8005b84 <_malloc_r+0x1c>
 8005b80:	42a9      	cmp	r1, r5
 8005b82:	d904      	bls.n	8005b8e <_malloc_r+0x26>
 8005b84:	230c      	movs	r3, #12
 8005b86:	6033      	str	r3, [r6, #0]
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c64 <_malloc_r+0xfc>
 8005b92:	f000 f869 	bl	8005c68 <__malloc_lock>
 8005b96:	f8d8 3000 	ldr.w	r3, [r8]
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	bb44      	cbnz	r4, 8005bf0 <_malloc_r+0x88>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff ffbf 	bl	8005b24 <sbrk_aligned>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	4604      	mov	r4, r0
 8005baa:	d158      	bne.n	8005c5e <_malloc_r+0xf6>
 8005bac:	f8d8 4000 	ldr.w	r4, [r8]
 8005bb0:	4627      	mov	r7, r4
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	d143      	bne.n	8005c3e <_malloc_r+0xd6>
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	d04b      	beq.n	8005c52 <_malloc_r+0xea>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	eb04 0903 	add.w	r9, r4, r3
 8005bc4:	f000 fe48 	bl	8006858 <_sbrk_r>
 8005bc8:	4581      	cmp	r9, r0
 8005bca:	d142      	bne.n	8005c52 <_malloc_r+0xea>
 8005bcc:	6821      	ldr	r1, [r4, #0]
 8005bce:	1a6d      	subs	r5, r5, r1
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ffa6 	bl	8005b24 <sbrk_aligned>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d03a      	beq.n	8005c52 <_malloc_r+0xea>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	442b      	add	r3, r5
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	f8d8 3000 	ldr.w	r3, [r8]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	bb62      	cbnz	r2, 8005c44 <_malloc_r+0xdc>
 8005bea:	f8c8 7000 	str.w	r7, [r8]
 8005bee:	e00f      	b.n	8005c10 <_malloc_r+0xa8>
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	1b52      	subs	r2, r2, r5
 8005bf4:	d420      	bmi.n	8005c38 <_malloc_r+0xd0>
 8005bf6:	2a0b      	cmp	r2, #11
 8005bf8:	d917      	bls.n	8005c2a <_malloc_r+0xc2>
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	6025      	str	r5, [r4, #0]
 8005c00:	bf18      	it	ne
 8005c02:	6059      	strne	r1, [r3, #4]
 8005c04:	6863      	ldr	r3, [r4, #4]
 8005c06:	bf08      	it	eq
 8005c08:	f8c8 1000 	streq.w	r1, [r8]
 8005c0c:	5162      	str	r2, [r4, r5]
 8005c0e:	604b      	str	r3, [r1, #4]
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 f82f 	bl	8005c74 <__malloc_unlock>
 8005c16:	f104 000b 	add.w	r0, r4, #11
 8005c1a:	1d23      	adds	r3, r4, #4
 8005c1c:	f020 0007 	bic.w	r0, r0, #7
 8005c20:	1ac2      	subs	r2, r0, r3
 8005c22:	bf1c      	itt	ne
 8005c24:	1a1b      	subne	r3, r3, r0
 8005c26:	50a3      	strne	r3, [r4, r2]
 8005c28:	e7af      	b.n	8005b8a <_malloc_r+0x22>
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	bf0c      	ite	eq
 8005c30:	f8c8 2000 	streq.w	r2, [r8]
 8005c34:	605a      	strne	r2, [r3, #4]
 8005c36:	e7eb      	b.n	8005c10 <_malloc_r+0xa8>
 8005c38:	4623      	mov	r3, r4
 8005c3a:	6864      	ldr	r4, [r4, #4]
 8005c3c:	e7ae      	b.n	8005b9c <_malloc_r+0x34>
 8005c3e:	463c      	mov	r4, r7
 8005c40:	687f      	ldr	r7, [r7, #4]
 8005c42:	e7b6      	b.n	8005bb2 <_malloc_r+0x4a>
 8005c44:	461a      	mov	r2, r3
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	d1fb      	bne.n	8005c44 <_malloc_r+0xdc>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	6053      	str	r3, [r2, #4]
 8005c50:	e7de      	b.n	8005c10 <_malloc_r+0xa8>
 8005c52:	230c      	movs	r3, #12
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	4630      	mov	r0, r6
 8005c58:	f000 f80c 	bl	8005c74 <__malloc_unlock>
 8005c5c:	e794      	b.n	8005b88 <_malloc_r+0x20>
 8005c5e:	6005      	str	r5, [r0, #0]
 8005c60:	e7d6      	b.n	8005c10 <_malloc_r+0xa8>
 8005c62:	bf00      	nop
 8005c64:	200008c8 	.word	0x200008c8

08005c68 <__malloc_lock>:
 8005c68:	4801      	ldr	r0, [pc, #4]	@ (8005c70 <__malloc_lock+0x8>)
 8005c6a:	f7ff b8ae 	b.w	8004dca <__retarget_lock_acquire_recursive>
 8005c6e:	bf00      	nop
 8005c70:	200008c0 	.word	0x200008c0

08005c74 <__malloc_unlock>:
 8005c74:	4801      	ldr	r0, [pc, #4]	@ (8005c7c <__malloc_unlock+0x8>)
 8005c76:	f7ff b8a9 	b.w	8004dcc <__retarget_lock_release_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	200008c0 	.word	0x200008c0

08005c80 <_Balloc>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	69c6      	ldr	r6, [r0, #28]
 8005c84:	4604      	mov	r4, r0
 8005c86:	460d      	mov	r5, r1
 8005c88:	b976      	cbnz	r6, 8005ca8 <_Balloc+0x28>
 8005c8a:	2010      	movs	r0, #16
 8005c8c:	f7ff ff42 	bl	8005b14 <malloc>
 8005c90:	4602      	mov	r2, r0
 8005c92:	61e0      	str	r0, [r4, #28]
 8005c94:	b920      	cbnz	r0, 8005ca0 <_Balloc+0x20>
 8005c96:	4b18      	ldr	r3, [pc, #96]	@ (8005cf8 <_Balloc+0x78>)
 8005c98:	4818      	ldr	r0, [pc, #96]	@ (8005cfc <_Balloc+0x7c>)
 8005c9a:	216b      	movs	r1, #107	@ 0x6b
 8005c9c:	f000 fdfa 	bl	8006894 <__assert_func>
 8005ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ca4:	6006      	str	r6, [r0, #0]
 8005ca6:	60c6      	str	r6, [r0, #12]
 8005ca8:	69e6      	ldr	r6, [r4, #28]
 8005caa:	68f3      	ldr	r3, [r6, #12]
 8005cac:	b183      	cbz	r3, 8005cd0 <_Balloc+0x50>
 8005cae:	69e3      	ldr	r3, [r4, #28]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cb6:	b9b8      	cbnz	r0, 8005ce8 <_Balloc+0x68>
 8005cb8:	2101      	movs	r1, #1
 8005cba:	fa01 f605 	lsl.w	r6, r1, r5
 8005cbe:	1d72      	adds	r2, r6, #5
 8005cc0:	0092      	lsls	r2, r2, #2
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 fe04 	bl	80068d0 <_calloc_r>
 8005cc8:	b160      	cbz	r0, 8005ce4 <_Balloc+0x64>
 8005cca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cce:	e00e      	b.n	8005cee <_Balloc+0x6e>
 8005cd0:	2221      	movs	r2, #33	@ 0x21
 8005cd2:	2104      	movs	r1, #4
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 fdfb 	bl	80068d0 <_calloc_r>
 8005cda:	69e3      	ldr	r3, [r4, #28]
 8005cdc:	60f0      	str	r0, [r6, #12]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e4      	bne.n	8005cae <_Balloc+0x2e>
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	6802      	ldr	r2, [r0, #0]
 8005cea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cf4:	e7f7      	b.n	8005ce6 <_Balloc+0x66>
 8005cf6:	bf00      	nop
 8005cf8:	08006ed1 	.word	0x08006ed1
 8005cfc:	08006f51 	.word	0x08006f51

08005d00 <_Bfree>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	69c6      	ldr	r6, [r0, #28]
 8005d04:	4605      	mov	r5, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	b976      	cbnz	r6, 8005d28 <_Bfree+0x28>
 8005d0a:	2010      	movs	r0, #16
 8005d0c:	f7ff ff02 	bl	8005b14 <malloc>
 8005d10:	4602      	mov	r2, r0
 8005d12:	61e8      	str	r0, [r5, #28]
 8005d14:	b920      	cbnz	r0, 8005d20 <_Bfree+0x20>
 8005d16:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <_Bfree+0x3c>)
 8005d18:	4809      	ldr	r0, [pc, #36]	@ (8005d40 <_Bfree+0x40>)
 8005d1a:	218f      	movs	r1, #143	@ 0x8f
 8005d1c:	f000 fdba 	bl	8006894 <__assert_func>
 8005d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d24:	6006      	str	r6, [r0, #0]
 8005d26:	60c6      	str	r6, [r0, #12]
 8005d28:	b13c      	cbz	r4, 8005d3a <_Bfree+0x3a>
 8005d2a:	69eb      	ldr	r3, [r5, #28]
 8005d2c:	6862      	ldr	r2, [r4, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d34:	6021      	str	r1, [r4, #0]
 8005d36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	08006ed1 	.word	0x08006ed1
 8005d40:	08006f51 	.word	0x08006f51

08005d44 <__multadd>:
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d48:	690d      	ldr	r5, [r1, #16]
 8005d4a:	4607      	mov	r7, r0
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	461e      	mov	r6, r3
 8005d50:	f101 0c14 	add.w	ip, r1, #20
 8005d54:	2000      	movs	r0, #0
 8005d56:	f8dc 3000 	ldr.w	r3, [ip]
 8005d5a:	b299      	uxth	r1, r3
 8005d5c:	fb02 6101 	mla	r1, r2, r1, r6
 8005d60:	0c1e      	lsrs	r6, r3, #16
 8005d62:	0c0b      	lsrs	r3, r1, #16
 8005d64:	fb02 3306 	mla	r3, r2, r6, r3
 8005d68:	b289      	uxth	r1, r1
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d70:	4285      	cmp	r5, r0
 8005d72:	f84c 1b04 	str.w	r1, [ip], #4
 8005d76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d7a:	dcec      	bgt.n	8005d56 <__multadd+0x12>
 8005d7c:	b30e      	cbz	r6, 8005dc2 <__multadd+0x7e>
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	42ab      	cmp	r3, r5
 8005d82:	dc19      	bgt.n	8005db8 <__multadd+0x74>
 8005d84:	6861      	ldr	r1, [r4, #4]
 8005d86:	4638      	mov	r0, r7
 8005d88:	3101      	adds	r1, #1
 8005d8a:	f7ff ff79 	bl	8005c80 <_Balloc>
 8005d8e:	4680      	mov	r8, r0
 8005d90:	b928      	cbnz	r0, 8005d9e <__multadd+0x5a>
 8005d92:	4602      	mov	r2, r0
 8005d94:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <__multadd+0x84>)
 8005d96:	480d      	ldr	r0, [pc, #52]	@ (8005dcc <__multadd+0x88>)
 8005d98:	21ba      	movs	r1, #186	@ 0xba
 8005d9a:	f000 fd7b 	bl	8006894 <__assert_func>
 8005d9e:	6922      	ldr	r2, [r4, #16]
 8005da0:	3202      	adds	r2, #2
 8005da2:	f104 010c 	add.w	r1, r4, #12
 8005da6:	0092      	lsls	r2, r2, #2
 8005da8:	300c      	adds	r0, #12
 8005daa:	f000 fd65 	bl	8006878 <memcpy>
 8005dae:	4621      	mov	r1, r4
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7ff ffa5 	bl	8005d00 <_Bfree>
 8005db6:	4644      	mov	r4, r8
 8005db8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	615e      	str	r6, [r3, #20]
 8005dc0:	6125      	str	r5, [r4, #16]
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc8:	08006f40 	.word	0x08006f40
 8005dcc:	08006f51 	.word	0x08006f51

08005dd0 <__hi0bits>:
 8005dd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	bf36      	itet	cc
 8005dd8:	0403      	lslcc	r3, r0, #16
 8005dda:	2000      	movcs	r0, #0
 8005ddc:	2010      	movcc	r0, #16
 8005dde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005de2:	bf3c      	itt	cc
 8005de4:	021b      	lslcc	r3, r3, #8
 8005de6:	3008      	addcc	r0, #8
 8005de8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dec:	bf3c      	itt	cc
 8005dee:	011b      	lslcc	r3, r3, #4
 8005df0:	3004      	addcc	r0, #4
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df6:	bf3c      	itt	cc
 8005df8:	009b      	lslcc	r3, r3, #2
 8005dfa:	3002      	addcc	r0, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	db05      	blt.n	8005e0c <__hi0bits+0x3c>
 8005e00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005e04:	f100 0001 	add.w	r0, r0, #1
 8005e08:	bf08      	it	eq
 8005e0a:	2020      	moveq	r0, #32
 8005e0c:	4770      	bx	lr

08005e0e <__lo0bits>:
 8005e0e:	6803      	ldr	r3, [r0, #0]
 8005e10:	4602      	mov	r2, r0
 8005e12:	f013 0007 	ands.w	r0, r3, #7
 8005e16:	d00b      	beq.n	8005e30 <__lo0bits+0x22>
 8005e18:	07d9      	lsls	r1, r3, #31
 8005e1a:	d421      	bmi.n	8005e60 <__lo0bits+0x52>
 8005e1c:	0798      	lsls	r0, r3, #30
 8005e1e:	bf49      	itett	mi
 8005e20:	085b      	lsrmi	r3, r3, #1
 8005e22:	089b      	lsrpl	r3, r3, #2
 8005e24:	2001      	movmi	r0, #1
 8005e26:	6013      	strmi	r3, [r2, #0]
 8005e28:	bf5c      	itt	pl
 8005e2a:	6013      	strpl	r3, [r2, #0]
 8005e2c:	2002      	movpl	r0, #2
 8005e2e:	4770      	bx	lr
 8005e30:	b299      	uxth	r1, r3
 8005e32:	b909      	cbnz	r1, 8005e38 <__lo0bits+0x2a>
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	2010      	movs	r0, #16
 8005e38:	b2d9      	uxtb	r1, r3
 8005e3a:	b909      	cbnz	r1, 8005e40 <__lo0bits+0x32>
 8005e3c:	3008      	adds	r0, #8
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	0719      	lsls	r1, r3, #28
 8005e42:	bf04      	itt	eq
 8005e44:	091b      	lsreq	r3, r3, #4
 8005e46:	3004      	addeq	r0, #4
 8005e48:	0799      	lsls	r1, r3, #30
 8005e4a:	bf04      	itt	eq
 8005e4c:	089b      	lsreq	r3, r3, #2
 8005e4e:	3002      	addeq	r0, #2
 8005e50:	07d9      	lsls	r1, r3, #31
 8005e52:	d403      	bmi.n	8005e5c <__lo0bits+0x4e>
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	f100 0001 	add.w	r0, r0, #1
 8005e5a:	d003      	beq.n	8005e64 <__lo0bits+0x56>
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	4770      	bx	lr
 8005e60:	2000      	movs	r0, #0
 8005e62:	4770      	bx	lr
 8005e64:	2020      	movs	r0, #32
 8005e66:	4770      	bx	lr

08005e68 <__i2b>:
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	f7ff ff07 	bl	8005c80 <_Balloc>
 8005e72:	4602      	mov	r2, r0
 8005e74:	b928      	cbnz	r0, 8005e82 <__i2b+0x1a>
 8005e76:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <__i2b+0x24>)
 8005e78:	4805      	ldr	r0, [pc, #20]	@ (8005e90 <__i2b+0x28>)
 8005e7a:	f240 1145 	movw	r1, #325	@ 0x145
 8005e7e:	f000 fd09 	bl	8006894 <__assert_func>
 8005e82:	2301      	movs	r3, #1
 8005e84:	6144      	str	r4, [r0, #20]
 8005e86:	6103      	str	r3, [r0, #16]
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08006f40 	.word	0x08006f40
 8005e90:	08006f51 	.word	0x08006f51

08005e94 <__multiply>:
 8005e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e98:	4617      	mov	r7, r2
 8005e9a:	690a      	ldr	r2, [r1, #16]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	bfa8      	it	ge
 8005ea2:	463b      	movge	r3, r7
 8005ea4:	4689      	mov	r9, r1
 8005ea6:	bfa4      	itt	ge
 8005ea8:	460f      	movge	r7, r1
 8005eaa:	4699      	movge	r9, r3
 8005eac:	693d      	ldr	r5, [r7, #16]
 8005eae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	eb05 060a 	add.w	r6, r5, sl
 8005eba:	42b3      	cmp	r3, r6
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	bfb8      	it	lt
 8005ec0:	3101      	addlt	r1, #1
 8005ec2:	f7ff fedd 	bl	8005c80 <_Balloc>
 8005ec6:	b930      	cbnz	r0, 8005ed6 <__multiply+0x42>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b41      	ldr	r3, [pc, #260]	@ (8005fd0 <__multiply+0x13c>)
 8005ecc:	4841      	ldr	r0, [pc, #260]	@ (8005fd4 <__multiply+0x140>)
 8005ece:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ed2:	f000 fcdf 	bl	8006894 <__assert_func>
 8005ed6:	f100 0414 	add.w	r4, r0, #20
 8005eda:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005ede:	4623      	mov	r3, r4
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4573      	cmp	r3, lr
 8005ee4:	d320      	bcc.n	8005f28 <__multiply+0x94>
 8005ee6:	f107 0814 	add.w	r8, r7, #20
 8005eea:	f109 0114 	add.w	r1, r9, #20
 8005eee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005ef2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005ef6:	9302      	str	r3, [sp, #8]
 8005ef8:	1beb      	subs	r3, r5, r7
 8005efa:	3b15      	subs	r3, #21
 8005efc:	f023 0303 	bic.w	r3, r3, #3
 8005f00:	3304      	adds	r3, #4
 8005f02:	3715      	adds	r7, #21
 8005f04:	42bd      	cmp	r5, r7
 8005f06:	bf38      	it	cc
 8005f08:	2304      	movcc	r3, #4
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	9b02      	ldr	r3, [sp, #8]
 8005f0e:	9103      	str	r1, [sp, #12]
 8005f10:	428b      	cmp	r3, r1
 8005f12:	d80c      	bhi.n	8005f2e <__multiply+0x9a>
 8005f14:	2e00      	cmp	r6, #0
 8005f16:	dd03      	ble.n	8005f20 <__multiply+0x8c>
 8005f18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d055      	beq.n	8005fcc <__multiply+0x138>
 8005f20:	6106      	str	r6, [r0, #16]
 8005f22:	b005      	add	sp, #20
 8005f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f28:	f843 2b04 	str.w	r2, [r3], #4
 8005f2c:	e7d9      	b.n	8005ee2 <__multiply+0x4e>
 8005f2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f32:	f1ba 0f00 	cmp.w	sl, #0
 8005f36:	d01f      	beq.n	8005f78 <__multiply+0xe4>
 8005f38:	46c4      	mov	ip, r8
 8005f3a:	46a1      	mov	r9, r4
 8005f3c:	2700      	movs	r7, #0
 8005f3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f42:	f8d9 3000 	ldr.w	r3, [r9]
 8005f46:	fa1f fb82 	uxth.w	fp, r2
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f50:	443b      	add	r3, r7
 8005f52:	f8d9 7000 	ldr.w	r7, [r9]
 8005f56:	0c12      	lsrs	r2, r2, #16
 8005f58:	0c3f      	lsrs	r7, r7, #16
 8005f5a:	fb0a 7202 	mla	r2, sl, r2, r7
 8005f5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f68:	4565      	cmp	r5, ip
 8005f6a:	f849 3b04 	str.w	r3, [r9], #4
 8005f6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005f72:	d8e4      	bhi.n	8005f3e <__multiply+0xaa>
 8005f74:	9b01      	ldr	r3, [sp, #4]
 8005f76:	50e7      	str	r7, [r4, r3]
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f7e:	3104      	adds	r1, #4
 8005f80:	f1b9 0f00 	cmp.w	r9, #0
 8005f84:	d020      	beq.n	8005fc8 <__multiply+0x134>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	4647      	mov	r7, r8
 8005f8a:	46a4      	mov	ip, r4
 8005f8c:	f04f 0a00 	mov.w	sl, #0
 8005f90:	f8b7 b000 	ldrh.w	fp, [r7]
 8005f94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005f98:	fb09 220b 	mla	r2, r9, fp, r2
 8005f9c:	4452      	add	r2, sl
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fa4:	f84c 3b04 	str.w	r3, [ip], #4
 8005fa8:	f857 3b04 	ldr.w	r3, [r7], #4
 8005fac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fb0:	f8bc 3000 	ldrh.w	r3, [ip]
 8005fb4:	fb09 330a 	mla	r3, r9, sl, r3
 8005fb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005fbc:	42bd      	cmp	r5, r7
 8005fbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fc2:	d8e5      	bhi.n	8005f90 <__multiply+0xfc>
 8005fc4:	9a01      	ldr	r2, [sp, #4]
 8005fc6:	50a3      	str	r3, [r4, r2]
 8005fc8:	3404      	adds	r4, #4
 8005fca:	e79f      	b.n	8005f0c <__multiply+0x78>
 8005fcc:	3e01      	subs	r6, #1
 8005fce:	e7a1      	b.n	8005f14 <__multiply+0x80>
 8005fd0:	08006f40 	.word	0x08006f40
 8005fd4:	08006f51 	.word	0x08006f51

08005fd8 <__pow5mult>:
 8005fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fdc:	4615      	mov	r5, r2
 8005fde:	f012 0203 	ands.w	r2, r2, #3
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	460e      	mov	r6, r1
 8005fe6:	d007      	beq.n	8005ff8 <__pow5mult+0x20>
 8005fe8:	4c25      	ldr	r4, [pc, #148]	@ (8006080 <__pow5mult+0xa8>)
 8005fea:	3a01      	subs	r2, #1
 8005fec:	2300      	movs	r3, #0
 8005fee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ff2:	f7ff fea7 	bl	8005d44 <__multadd>
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	10ad      	asrs	r5, r5, #2
 8005ffa:	d03d      	beq.n	8006078 <__pow5mult+0xa0>
 8005ffc:	69fc      	ldr	r4, [r7, #28]
 8005ffe:	b97c      	cbnz	r4, 8006020 <__pow5mult+0x48>
 8006000:	2010      	movs	r0, #16
 8006002:	f7ff fd87 	bl	8005b14 <malloc>
 8006006:	4602      	mov	r2, r0
 8006008:	61f8      	str	r0, [r7, #28]
 800600a:	b928      	cbnz	r0, 8006018 <__pow5mult+0x40>
 800600c:	4b1d      	ldr	r3, [pc, #116]	@ (8006084 <__pow5mult+0xac>)
 800600e:	481e      	ldr	r0, [pc, #120]	@ (8006088 <__pow5mult+0xb0>)
 8006010:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006014:	f000 fc3e 	bl	8006894 <__assert_func>
 8006018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800601c:	6004      	str	r4, [r0, #0]
 800601e:	60c4      	str	r4, [r0, #12]
 8006020:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006028:	b94c      	cbnz	r4, 800603e <__pow5mult+0x66>
 800602a:	f240 2171 	movw	r1, #625	@ 0x271
 800602e:	4638      	mov	r0, r7
 8006030:	f7ff ff1a 	bl	8005e68 <__i2b>
 8006034:	2300      	movs	r3, #0
 8006036:	f8c8 0008 	str.w	r0, [r8, #8]
 800603a:	4604      	mov	r4, r0
 800603c:	6003      	str	r3, [r0, #0]
 800603e:	f04f 0900 	mov.w	r9, #0
 8006042:	07eb      	lsls	r3, r5, #31
 8006044:	d50a      	bpl.n	800605c <__pow5mult+0x84>
 8006046:	4631      	mov	r1, r6
 8006048:	4622      	mov	r2, r4
 800604a:	4638      	mov	r0, r7
 800604c:	f7ff ff22 	bl	8005e94 <__multiply>
 8006050:	4631      	mov	r1, r6
 8006052:	4680      	mov	r8, r0
 8006054:	4638      	mov	r0, r7
 8006056:	f7ff fe53 	bl	8005d00 <_Bfree>
 800605a:	4646      	mov	r6, r8
 800605c:	106d      	asrs	r5, r5, #1
 800605e:	d00b      	beq.n	8006078 <__pow5mult+0xa0>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	b938      	cbnz	r0, 8006074 <__pow5mult+0x9c>
 8006064:	4622      	mov	r2, r4
 8006066:	4621      	mov	r1, r4
 8006068:	4638      	mov	r0, r7
 800606a:	f7ff ff13 	bl	8005e94 <__multiply>
 800606e:	6020      	str	r0, [r4, #0]
 8006070:	f8c0 9000 	str.w	r9, [r0]
 8006074:	4604      	mov	r4, r0
 8006076:	e7e4      	b.n	8006042 <__pow5mult+0x6a>
 8006078:	4630      	mov	r0, r6
 800607a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607e:	bf00      	nop
 8006080:	08007004 	.word	0x08007004
 8006084:	08006ed1 	.word	0x08006ed1
 8006088:	08006f51 	.word	0x08006f51

0800608c <__lshift>:
 800608c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006090:	460c      	mov	r4, r1
 8006092:	6849      	ldr	r1, [r1, #4]
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	4607      	mov	r7, r0
 800609e:	4691      	mov	r9, r2
 80060a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060a4:	f108 0601 	add.w	r6, r8, #1
 80060a8:	42b3      	cmp	r3, r6
 80060aa:	db0b      	blt.n	80060c4 <__lshift+0x38>
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7ff fde7 	bl	8005c80 <_Balloc>
 80060b2:	4605      	mov	r5, r0
 80060b4:	b948      	cbnz	r0, 80060ca <__lshift+0x3e>
 80060b6:	4602      	mov	r2, r0
 80060b8:	4b28      	ldr	r3, [pc, #160]	@ (800615c <__lshift+0xd0>)
 80060ba:	4829      	ldr	r0, [pc, #164]	@ (8006160 <__lshift+0xd4>)
 80060bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80060c0:	f000 fbe8 	bl	8006894 <__assert_func>
 80060c4:	3101      	adds	r1, #1
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	e7ee      	b.n	80060a8 <__lshift+0x1c>
 80060ca:	2300      	movs	r3, #0
 80060cc:	f100 0114 	add.w	r1, r0, #20
 80060d0:	f100 0210 	add.w	r2, r0, #16
 80060d4:	4618      	mov	r0, r3
 80060d6:	4553      	cmp	r3, sl
 80060d8:	db33      	blt.n	8006142 <__lshift+0xb6>
 80060da:	6920      	ldr	r0, [r4, #16]
 80060dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060e0:	f104 0314 	add.w	r3, r4, #20
 80060e4:	f019 091f 	ands.w	r9, r9, #31
 80060e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060f0:	d02b      	beq.n	800614a <__lshift+0xbe>
 80060f2:	f1c9 0e20 	rsb	lr, r9, #32
 80060f6:	468a      	mov	sl, r1
 80060f8:	2200      	movs	r2, #0
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006100:	4310      	orrs	r0, r2
 8006102:	f84a 0b04 	str.w	r0, [sl], #4
 8006106:	f853 2b04 	ldr.w	r2, [r3], #4
 800610a:	459c      	cmp	ip, r3
 800610c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006110:	d8f3      	bhi.n	80060fa <__lshift+0x6e>
 8006112:	ebac 0304 	sub.w	r3, ip, r4
 8006116:	3b15      	subs	r3, #21
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	3304      	adds	r3, #4
 800611e:	f104 0015 	add.w	r0, r4, #21
 8006122:	4560      	cmp	r0, ip
 8006124:	bf88      	it	hi
 8006126:	2304      	movhi	r3, #4
 8006128:	50ca      	str	r2, [r1, r3]
 800612a:	b10a      	cbz	r2, 8006130 <__lshift+0xa4>
 800612c:	f108 0602 	add.w	r6, r8, #2
 8006130:	3e01      	subs	r6, #1
 8006132:	4638      	mov	r0, r7
 8006134:	612e      	str	r6, [r5, #16]
 8006136:	4621      	mov	r1, r4
 8006138:	f7ff fde2 	bl	8005d00 <_Bfree>
 800613c:	4628      	mov	r0, r5
 800613e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006142:	f842 0f04 	str.w	r0, [r2, #4]!
 8006146:	3301      	adds	r3, #1
 8006148:	e7c5      	b.n	80060d6 <__lshift+0x4a>
 800614a:	3904      	subs	r1, #4
 800614c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006150:	f841 2f04 	str.w	r2, [r1, #4]!
 8006154:	459c      	cmp	ip, r3
 8006156:	d8f9      	bhi.n	800614c <__lshift+0xc0>
 8006158:	e7ea      	b.n	8006130 <__lshift+0xa4>
 800615a:	bf00      	nop
 800615c:	08006f40 	.word	0x08006f40
 8006160:	08006f51 	.word	0x08006f51

08006164 <__mcmp>:
 8006164:	690a      	ldr	r2, [r1, #16]
 8006166:	4603      	mov	r3, r0
 8006168:	6900      	ldr	r0, [r0, #16]
 800616a:	1a80      	subs	r0, r0, r2
 800616c:	b530      	push	{r4, r5, lr}
 800616e:	d10e      	bne.n	800618e <__mcmp+0x2a>
 8006170:	3314      	adds	r3, #20
 8006172:	3114      	adds	r1, #20
 8006174:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006178:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800617c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006180:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006184:	4295      	cmp	r5, r2
 8006186:	d003      	beq.n	8006190 <__mcmp+0x2c>
 8006188:	d205      	bcs.n	8006196 <__mcmp+0x32>
 800618a:	f04f 30ff 	mov.w	r0, #4294967295
 800618e:	bd30      	pop	{r4, r5, pc}
 8006190:	42a3      	cmp	r3, r4
 8006192:	d3f3      	bcc.n	800617c <__mcmp+0x18>
 8006194:	e7fb      	b.n	800618e <__mcmp+0x2a>
 8006196:	2001      	movs	r0, #1
 8006198:	e7f9      	b.n	800618e <__mcmp+0x2a>
	...

0800619c <__mdiff>:
 800619c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a0:	4689      	mov	r9, r1
 80061a2:	4606      	mov	r6, r0
 80061a4:	4611      	mov	r1, r2
 80061a6:	4648      	mov	r0, r9
 80061a8:	4614      	mov	r4, r2
 80061aa:	f7ff ffdb 	bl	8006164 <__mcmp>
 80061ae:	1e05      	subs	r5, r0, #0
 80061b0:	d112      	bne.n	80061d8 <__mdiff+0x3c>
 80061b2:	4629      	mov	r1, r5
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7ff fd63 	bl	8005c80 <_Balloc>
 80061ba:	4602      	mov	r2, r0
 80061bc:	b928      	cbnz	r0, 80061ca <__mdiff+0x2e>
 80061be:	4b3f      	ldr	r3, [pc, #252]	@ (80062bc <__mdiff+0x120>)
 80061c0:	f240 2137 	movw	r1, #567	@ 0x237
 80061c4:	483e      	ldr	r0, [pc, #248]	@ (80062c0 <__mdiff+0x124>)
 80061c6:	f000 fb65 	bl	8006894 <__assert_func>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061d0:	4610      	mov	r0, r2
 80061d2:	b003      	add	sp, #12
 80061d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d8:	bfbc      	itt	lt
 80061da:	464b      	movlt	r3, r9
 80061dc:	46a1      	movlt	r9, r4
 80061de:	4630      	mov	r0, r6
 80061e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80061e4:	bfba      	itte	lt
 80061e6:	461c      	movlt	r4, r3
 80061e8:	2501      	movlt	r5, #1
 80061ea:	2500      	movge	r5, #0
 80061ec:	f7ff fd48 	bl	8005c80 <_Balloc>
 80061f0:	4602      	mov	r2, r0
 80061f2:	b918      	cbnz	r0, 80061fc <__mdiff+0x60>
 80061f4:	4b31      	ldr	r3, [pc, #196]	@ (80062bc <__mdiff+0x120>)
 80061f6:	f240 2145 	movw	r1, #581	@ 0x245
 80061fa:	e7e3      	b.n	80061c4 <__mdiff+0x28>
 80061fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006200:	6926      	ldr	r6, [r4, #16]
 8006202:	60c5      	str	r5, [r0, #12]
 8006204:	f109 0310 	add.w	r3, r9, #16
 8006208:	f109 0514 	add.w	r5, r9, #20
 800620c:	f104 0e14 	add.w	lr, r4, #20
 8006210:	f100 0b14 	add.w	fp, r0, #20
 8006214:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006218:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	46d9      	mov	r9, fp
 8006220:	f04f 0c00 	mov.w	ip, #0
 8006224:	9b01      	ldr	r3, [sp, #4]
 8006226:	f85e 0b04 	ldr.w	r0, [lr], #4
 800622a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	fa1f f38a 	uxth.w	r3, sl
 8006234:	4619      	mov	r1, r3
 8006236:	b283      	uxth	r3, r0
 8006238:	1acb      	subs	r3, r1, r3
 800623a:	0c00      	lsrs	r0, r0, #16
 800623c:	4463      	add	r3, ip
 800623e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006242:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006246:	b29b      	uxth	r3, r3
 8006248:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800624c:	4576      	cmp	r6, lr
 800624e:	f849 3b04 	str.w	r3, [r9], #4
 8006252:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006256:	d8e5      	bhi.n	8006224 <__mdiff+0x88>
 8006258:	1b33      	subs	r3, r6, r4
 800625a:	3b15      	subs	r3, #21
 800625c:	f023 0303 	bic.w	r3, r3, #3
 8006260:	3415      	adds	r4, #21
 8006262:	3304      	adds	r3, #4
 8006264:	42a6      	cmp	r6, r4
 8006266:	bf38      	it	cc
 8006268:	2304      	movcc	r3, #4
 800626a:	441d      	add	r5, r3
 800626c:	445b      	add	r3, fp
 800626e:	461e      	mov	r6, r3
 8006270:	462c      	mov	r4, r5
 8006272:	4544      	cmp	r4, r8
 8006274:	d30e      	bcc.n	8006294 <__mdiff+0xf8>
 8006276:	f108 0103 	add.w	r1, r8, #3
 800627a:	1b49      	subs	r1, r1, r5
 800627c:	f021 0103 	bic.w	r1, r1, #3
 8006280:	3d03      	subs	r5, #3
 8006282:	45a8      	cmp	r8, r5
 8006284:	bf38      	it	cc
 8006286:	2100      	movcc	r1, #0
 8006288:	440b      	add	r3, r1
 800628a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800628e:	b191      	cbz	r1, 80062b6 <__mdiff+0x11a>
 8006290:	6117      	str	r7, [r2, #16]
 8006292:	e79d      	b.n	80061d0 <__mdiff+0x34>
 8006294:	f854 1b04 	ldr.w	r1, [r4], #4
 8006298:	46e6      	mov	lr, ip
 800629a:	0c08      	lsrs	r0, r1, #16
 800629c:	fa1c fc81 	uxtah	ip, ip, r1
 80062a0:	4471      	add	r1, lr
 80062a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80062a6:	b289      	uxth	r1, r1
 80062a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80062ac:	f846 1b04 	str.w	r1, [r6], #4
 80062b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062b4:	e7dd      	b.n	8006272 <__mdiff+0xd6>
 80062b6:	3f01      	subs	r7, #1
 80062b8:	e7e7      	b.n	800628a <__mdiff+0xee>
 80062ba:	bf00      	nop
 80062bc:	08006f40 	.word	0x08006f40
 80062c0:	08006f51 	.word	0x08006f51

080062c4 <__d2b>:
 80062c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062c8:	460f      	mov	r7, r1
 80062ca:	2101      	movs	r1, #1
 80062cc:	ec59 8b10 	vmov	r8, r9, d0
 80062d0:	4616      	mov	r6, r2
 80062d2:	f7ff fcd5 	bl	8005c80 <_Balloc>
 80062d6:	4604      	mov	r4, r0
 80062d8:	b930      	cbnz	r0, 80062e8 <__d2b+0x24>
 80062da:	4602      	mov	r2, r0
 80062dc:	4b23      	ldr	r3, [pc, #140]	@ (800636c <__d2b+0xa8>)
 80062de:	4824      	ldr	r0, [pc, #144]	@ (8006370 <__d2b+0xac>)
 80062e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80062e4:	f000 fad6 	bl	8006894 <__assert_func>
 80062e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062f0:	b10d      	cbz	r5, 80062f6 <__d2b+0x32>
 80062f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	f1b8 0300 	subs.w	r3, r8, #0
 80062fc:	d023      	beq.n	8006346 <__d2b+0x82>
 80062fe:	4668      	mov	r0, sp
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	f7ff fd84 	bl	8005e0e <__lo0bits>
 8006306:	e9dd 1200 	ldrd	r1, r2, [sp]
 800630a:	b1d0      	cbz	r0, 8006342 <__d2b+0x7e>
 800630c:	f1c0 0320 	rsb	r3, r0, #32
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	430b      	orrs	r3, r1
 8006316:	40c2      	lsrs	r2, r0
 8006318:	6163      	str	r3, [r4, #20]
 800631a:	9201      	str	r2, [sp, #4]
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	61a3      	str	r3, [r4, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf0c      	ite	eq
 8006324:	2201      	moveq	r2, #1
 8006326:	2202      	movne	r2, #2
 8006328:	6122      	str	r2, [r4, #16]
 800632a:	b1a5      	cbz	r5, 8006356 <__d2b+0x92>
 800632c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006330:	4405      	add	r5, r0
 8006332:	603d      	str	r5, [r7, #0]
 8006334:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	4620      	mov	r0, r4
 800633c:	b003      	add	sp, #12
 800633e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006342:	6161      	str	r1, [r4, #20]
 8006344:	e7ea      	b.n	800631c <__d2b+0x58>
 8006346:	a801      	add	r0, sp, #4
 8006348:	f7ff fd61 	bl	8005e0e <__lo0bits>
 800634c:	9b01      	ldr	r3, [sp, #4]
 800634e:	6163      	str	r3, [r4, #20]
 8006350:	3020      	adds	r0, #32
 8006352:	2201      	movs	r2, #1
 8006354:	e7e8      	b.n	8006328 <__d2b+0x64>
 8006356:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800635a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800635e:	6038      	str	r0, [r7, #0]
 8006360:	6918      	ldr	r0, [r3, #16]
 8006362:	f7ff fd35 	bl	8005dd0 <__hi0bits>
 8006366:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800636a:	e7e5      	b.n	8006338 <__d2b+0x74>
 800636c:	08006f40 	.word	0x08006f40
 8006370:	08006f51 	.word	0x08006f51

08006374 <__sfputc_r>:
 8006374:	6893      	ldr	r3, [r2, #8]
 8006376:	3b01      	subs	r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	b410      	push	{r4}
 800637c:	6093      	str	r3, [r2, #8]
 800637e:	da08      	bge.n	8006392 <__sfputc_r+0x1e>
 8006380:	6994      	ldr	r4, [r2, #24]
 8006382:	42a3      	cmp	r3, r4
 8006384:	db01      	blt.n	800638a <__sfputc_r+0x16>
 8006386:	290a      	cmp	r1, #10
 8006388:	d103      	bne.n	8006392 <__sfputc_r+0x1e>
 800638a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800638e:	f7fe bbf0 	b.w	8004b72 <__swbuf_r>
 8006392:	6813      	ldr	r3, [r2, #0]
 8006394:	1c58      	adds	r0, r3, #1
 8006396:	6010      	str	r0, [r2, #0]
 8006398:	7019      	strb	r1, [r3, #0]
 800639a:	4608      	mov	r0, r1
 800639c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <__sfputs_r>:
 80063a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a4:	4606      	mov	r6, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	4614      	mov	r4, r2
 80063aa:	18d5      	adds	r5, r2, r3
 80063ac:	42ac      	cmp	r4, r5
 80063ae:	d101      	bne.n	80063b4 <__sfputs_r+0x12>
 80063b0:	2000      	movs	r0, #0
 80063b2:	e007      	b.n	80063c4 <__sfputs_r+0x22>
 80063b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b8:	463a      	mov	r2, r7
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7ff ffda 	bl	8006374 <__sfputc_r>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d1f3      	bne.n	80063ac <__sfputs_r+0xa>
 80063c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063c8 <_vfiprintf_r>:
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	460d      	mov	r5, r1
 80063ce:	b09d      	sub	sp, #116	@ 0x74
 80063d0:	4614      	mov	r4, r2
 80063d2:	4698      	mov	r8, r3
 80063d4:	4606      	mov	r6, r0
 80063d6:	b118      	cbz	r0, 80063e0 <_vfiprintf_r+0x18>
 80063d8:	6a03      	ldr	r3, [r0, #32]
 80063da:	b90b      	cbnz	r3, 80063e0 <_vfiprintf_r+0x18>
 80063dc:	f7fe fae0 	bl	80049a0 <__sinit>
 80063e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063e2:	07d9      	lsls	r1, r3, #31
 80063e4:	d405      	bmi.n	80063f2 <_vfiprintf_r+0x2a>
 80063e6:	89ab      	ldrh	r3, [r5, #12]
 80063e8:	059a      	lsls	r2, r3, #22
 80063ea:	d402      	bmi.n	80063f2 <_vfiprintf_r+0x2a>
 80063ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ee:	f7fe fcec 	bl	8004dca <__retarget_lock_acquire_recursive>
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	071b      	lsls	r3, r3, #28
 80063f6:	d501      	bpl.n	80063fc <_vfiprintf_r+0x34>
 80063f8:	692b      	ldr	r3, [r5, #16]
 80063fa:	b99b      	cbnz	r3, 8006424 <_vfiprintf_r+0x5c>
 80063fc:	4629      	mov	r1, r5
 80063fe:	4630      	mov	r0, r6
 8006400:	f7fe fbf6 	bl	8004bf0 <__swsetup_r>
 8006404:	b170      	cbz	r0, 8006424 <_vfiprintf_r+0x5c>
 8006406:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006408:	07dc      	lsls	r4, r3, #31
 800640a:	d504      	bpl.n	8006416 <_vfiprintf_r+0x4e>
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	b01d      	add	sp, #116	@ 0x74
 8006412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006416:	89ab      	ldrh	r3, [r5, #12]
 8006418:	0598      	lsls	r0, r3, #22
 800641a:	d4f7      	bmi.n	800640c <_vfiprintf_r+0x44>
 800641c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800641e:	f7fe fcd5 	bl	8004dcc <__retarget_lock_release_recursive>
 8006422:	e7f3      	b.n	800640c <_vfiprintf_r+0x44>
 8006424:	2300      	movs	r3, #0
 8006426:	9309      	str	r3, [sp, #36]	@ 0x24
 8006428:	2320      	movs	r3, #32
 800642a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800642e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006432:	2330      	movs	r3, #48	@ 0x30
 8006434:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065e4 <_vfiprintf_r+0x21c>
 8006438:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800643c:	f04f 0901 	mov.w	r9, #1
 8006440:	4623      	mov	r3, r4
 8006442:	469a      	mov	sl, r3
 8006444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006448:	b10a      	cbz	r2, 800644e <_vfiprintf_r+0x86>
 800644a:	2a25      	cmp	r2, #37	@ 0x25
 800644c:	d1f9      	bne.n	8006442 <_vfiprintf_r+0x7a>
 800644e:	ebba 0b04 	subs.w	fp, sl, r4
 8006452:	d00b      	beq.n	800646c <_vfiprintf_r+0xa4>
 8006454:	465b      	mov	r3, fp
 8006456:	4622      	mov	r2, r4
 8006458:	4629      	mov	r1, r5
 800645a:	4630      	mov	r0, r6
 800645c:	f7ff ffa1 	bl	80063a2 <__sfputs_r>
 8006460:	3001      	adds	r0, #1
 8006462:	f000 80a7 	beq.w	80065b4 <_vfiprintf_r+0x1ec>
 8006466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006468:	445a      	add	r2, fp
 800646a:	9209      	str	r2, [sp, #36]	@ 0x24
 800646c:	f89a 3000 	ldrb.w	r3, [sl]
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 809f 	beq.w	80065b4 <_vfiprintf_r+0x1ec>
 8006476:	2300      	movs	r3, #0
 8006478:	f04f 32ff 	mov.w	r2, #4294967295
 800647c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006480:	f10a 0a01 	add.w	sl, sl, #1
 8006484:	9304      	str	r3, [sp, #16]
 8006486:	9307      	str	r3, [sp, #28]
 8006488:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800648c:	931a      	str	r3, [sp, #104]	@ 0x68
 800648e:	4654      	mov	r4, sl
 8006490:	2205      	movs	r2, #5
 8006492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006496:	4853      	ldr	r0, [pc, #332]	@ (80065e4 <_vfiprintf_r+0x21c>)
 8006498:	f7f9 fe9a 	bl	80001d0 <memchr>
 800649c:	9a04      	ldr	r2, [sp, #16]
 800649e:	b9d8      	cbnz	r0, 80064d8 <_vfiprintf_r+0x110>
 80064a0:	06d1      	lsls	r1, r2, #27
 80064a2:	bf44      	itt	mi
 80064a4:	2320      	movmi	r3, #32
 80064a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064aa:	0713      	lsls	r3, r2, #28
 80064ac:	bf44      	itt	mi
 80064ae:	232b      	movmi	r3, #43	@ 0x2b
 80064b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064b4:	f89a 3000 	ldrb.w	r3, [sl]
 80064b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ba:	d015      	beq.n	80064e8 <_vfiprintf_r+0x120>
 80064bc:	9a07      	ldr	r2, [sp, #28]
 80064be:	4654      	mov	r4, sl
 80064c0:	2000      	movs	r0, #0
 80064c2:	f04f 0c0a 	mov.w	ip, #10
 80064c6:	4621      	mov	r1, r4
 80064c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064cc:	3b30      	subs	r3, #48	@ 0x30
 80064ce:	2b09      	cmp	r3, #9
 80064d0:	d94b      	bls.n	800656a <_vfiprintf_r+0x1a2>
 80064d2:	b1b0      	cbz	r0, 8006502 <_vfiprintf_r+0x13a>
 80064d4:	9207      	str	r2, [sp, #28]
 80064d6:	e014      	b.n	8006502 <_vfiprintf_r+0x13a>
 80064d8:	eba0 0308 	sub.w	r3, r0, r8
 80064dc:	fa09 f303 	lsl.w	r3, r9, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	9304      	str	r3, [sp, #16]
 80064e4:	46a2      	mov	sl, r4
 80064e6:	e7d2      	b.n	800648e <_vfiprintf_r+0xc6>
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	1d19      	adds	r1, r3, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	9103      	str	r1, [sp, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bfbb      	ittet	lt
 80064f4:	425b      	neglt	r3, r3
 80064f6:	f042 0202 	orrlt.w	r2, r2, #2
 80064fa:	9307      	strge	r3, [sp, #28]
 80064fc:	9307      	strlt	r3, [sp, #28]
 80064fe:	bfb8      	it	lt
 8006500:	9204      	strlt	r2, [sp, #16]
 8006502:	7823      	ldrb	r3, [r4, #0]
 8006504:	2b2e      	cmp	r3, #46	@ 0x2e
 8006506:	d10a      	bne.n	800651e <_vfiprintf_r+0x156>
 8006508:	7863      	ldrb	r3, [r4, #1]
 800650a:	2b2a      	cmp	r3, #42	@ 0x2a
 800650c:	d132      	bne.n	8006574 <_vfiprintf_r+0x1ac>
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	1d1a      	adds	r2, r3, #4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	9203      	str	r2, [sp, #12]
 8006516:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800651a:	3402      	adds	r4, #2
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065f4 <_vfiprintf_r+0x22c>
 8006522:	7821      	ldrb	r1, [r4, #0]
 8006524:	2203      	movs	r2, #3
 8006526:	4650      	mov	r0, sl
 8006528:	f7f9 fe52 	bl	80001d0 <memchr>
 800652c:	b138      	cbz	r0, 800653e <_vfiprintf_r+0x176>
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	eba0 000a 	sub.w	r0, r0, sl
 8006534:	2240      	movs	r2, #64	@ 0x40
 8006536:	4082      	lsls	r2, r0
 8006538:	4313      	orrs	r3, r2
 800653a:	3401      	adds	r4, #1
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006542:	4829      	ldr	r0, [pc, #164]	@ (80065e8 <_vfiprintf_r+0x220>)
 8006544:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006548:	2206      	movs	r2, #6
 800654a:	f7f9 fe41 	bl	80001d0 <memchr>
 800654e:	2800      	cmp	r0, #0
 8006550:	d03f      	beq.n	80065d2 <_vfiprintf_r+0x20a>
 8006552:	4b26      	ldr	r3, [pc, #152]	@ (80065ec <_vfiprintf_r+0x224>)
 8006554:	bb1b      	cbnz	r3, 800659e <_vfiprintf_r+0x1d6>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	3307      	adds	r3, #7
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	3308      	adds	r3, #8
 8006560:	9303      	str	r3, [sp, #12]
 8006562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006564:	443b      	add	r3, r7
 8006566:	9309      	str	r3, [sp, #36]	@ 0x24
 8006568:	e76a      	b.n	8006440 <_vfiprintf_r+0x78>
 800656a:	fb0c 3202 	mla	r2, ip, r2, r3
 800656e:	460c      	mov	r4, r1
 8006570:	2001      	movs	r0, #1
 8006572:	e7a8      	b.n	80064c6 <_vfiprintf_r+0xfe>
 8006574:	2300      	movs	r3, #0
 8006576:	3401      	adds	r4, #1
 8006578:	9305      	str	r3, [sp, #20]
 800657a:	4619      	mov	r1, r3
 800657c:	f04f 0c0a 	mov.w	ip, #10
 8006580:	4620      	mov	r0, r4
 8006582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006586:	3a30      	subs	r2, #48	@ 0x30
 8006588:	2a09      	cmp	r2, #9
 800658a:	d903      	bls.n	8006594 <_vfiprintf_r+0x1cc>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0c6      	beq.n	800651e <_vfiprintf_r+0x156>
 8006590:	9105      	str	r1, [sp, #20]
 8006592:	e7c4      	b.n	800651e <_vfiprintf_r+0x156>
 8006594:	fb0c 2101 	mla	r1, ip, r1, r2
 8006598:	4604      	mov	r4, r0
 800659a:	2301      	movs	r3, #1
 800659c:	e7f0      	b.n	8006580 <_vfiprintf_r+0x1b8>
 800659e:	ab03      	add	r3, sp, #12
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	462a      	mov	r2, r5
 80065a4:	4b12      	ldr	r3, [pc, #72]	@ (80065f0 <_vfiprintf_r+0x228>)
 80065a6:	a904      	add	r1, sp, #16
 80065a8:	4630      	mov	r0, r6
 80065aa:	f7fd fdb7 	bl	800411c <_printf_float>
 80065ae:	4607      	mov	r7, r0
 80065b0:	1c78      	adds	r0, r7, #1
 80065b2:	d1d6      	bne.n	8006562 <_vfiprintf_r+0x19a>
 80065b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065b6:	07d9      	lsls	r1, r3, #31
 80065b8:	d405      	bmi.n	80065c6 <_vfiprintf_r+0x1fe>
 80065ba:	89ab      	ldrh	r3, [r5, #12]
 80065bc:	059a      	lsls	r2, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_vfiprintf_r+0x1fe>
 80065c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065c2:	f7fe fc03 	bl	8004dcc <__retarget_lock_release_recursive>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	065b      	lsls	r3, r3, #25
 80065ca:	f53f af1f 	bmi.w	800640c <_vfiprintf_r+0x44>
 80065ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065d0:	e71e      	b.n	8006410 <_vfiprintf_r+0x48>
 80065d2:	ab03      	add	r3, sp, #12
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	462a      	mov	r2, r5
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <_vfiprintf_r+0x228>)
 80065da:	a904      	add	r1, sp, #16
 80065dc:	4630      	mov	r0, r6
 80065de:	f7fe f835 	bl	800464c <_printf_i>
 80065e2:	e7e4      	b.n	80065ae <_vfiprintf_r+0x1e6>
 80065e4:	08006faa 	.word	0x08006faa
 80065e8:	08006fb4 	.word	0x08006fb4
 80065ec:	0800411d 	.word	0x0800411d
 80065f0:	080063a3 	.word	0x080063a3
 80065f4:	08006fb0 	.word	0x08006fb0

080065f8 <__sflush_r>:
 80065f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006600:	0716      	lsls	r6, r2, #28
 8006602:	4605      	mov	r5, r0
 8006604:	460c      	mov	r4, r1
 8006606:	d454      	bmi.n	80066b2 <__sflush_r+0xba>
 8006608:	684b      	ldr	r3, [r1, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	dc02      	bgt.n	8006614 <__sflush_r+0x1c>
 800660e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	dd48      	ble.n	80066a6 <__sflush_r+0xae>
 8006614:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006616:	2e00      	cmp	r6, #0
 8006618:	d045      	beq.n	80066a6 <__sflush_r+0xae>
 800661a:	2300      	movs	r3, #0
 800661c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006620:	682f      	ldr	r7, [r5, #0]
 8006622:	6a21      	ldr	r1, [r4, #32]
 8006624:	602b      	str	r3, [r5, #0]
 8006626:	d030      	beq.n	800668a <__sflush_r+0x92>
 8006628:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	0759      	lsls	r1, r3, #29
 800662e:	d505      	bpl.n	800663c <__sflush_r+0x44>
 8006630:	6863      	ldr	r3, [r4, #4]
 8006632:	1ad2      	subs	r2, r2, r3
 8006634:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006636:	b10b      	cbz	r3, 800663c <__sflush_r+0x44>
 8006638:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	2300      	movs	r3, #0
 800663e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006640:	6a21      	ldr	r1, [r4, #32]
 8006642:	4628      	mov	r0, r5
 8006644:	47b0      	blx	r6
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	d106      	bne.n	800665a <__sflush_r+0x62>
 800664c:	6829      	ldr	r1, [r5, #0]
 800664e:	291d      	cmp	r1, #29
 8006650:	d82b      	bhi.n	80066aa <__sflush_r+0xb2>
 8006652:	4a2a      	ldr	r2, [pc, #168]	@ (80066fc <__sflush_r+0x104>)
 8006654:	40ca      	lsrs	r2, r1
 8006656:	07d6      	lsls	r6, r2, #31
 8006658:	d527      	bpl.n	80066aa <__sflush_r+0xb2>
 800665a:	2200      	movs	r2, #0
 800665c:	6062      	str	r2, [r4, #4]
 800665e:	04d9      	lsls	r1, r3, #19
 8006660:	6922      	ldr	r2, [r4, #16]
 8006662:	6022      	str	r2, [r4, #0]
 8006664:	d504      	bpl.n	8006670 <__sflush_r+0x78>
 8006666:	1c42      	adds	r2, r0, #1
 8006668:	d101      	bne.n	800666e <__sflush_r+0x76>
 800666a:	682b      	ldr	r3, [r5, #0]
 800666c:	b903      	cbnz	r3, 8006670 <__sflush_r+0x78>
 800666e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006672:	602f      	str	r7, [r5, #0]
 8006674:	b1b9      	cbz	r1, 80066a6 <__sflush_r+0xae>
 8006676:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800667a:	4299      	cmp	r1, r3
 800667c:	d002      	beq.n	8006684 <__sflush_r+0x8c>
 800667e:	4628      	mov	r0, r5
 8006680:	f7ff f9fe 	bl	8005a80 <_free_r>
 8006684:	2300      	movs	r3, #0
 8006686:	6363      	str	r3, [r4, #52]	@ 0x34
 8006688:	e00d      	b.n	80066a6 <__sflush_r+0xae>
 800668a:	2301      	movs	r3, #1
 800668c:	4628      	mov	r0, r5
 800668e:	47b0      	blx	r6
 8006690:	4602      	mov	r2, r0
 8006692:	1c50      	adds	r0, r2, #1
 8006694:	d1c9      	bne.n	800662a <__sflush_r+0x32>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0c6      	beq.n	800662a <__sflush_r+0x32>
 800669c:	2b1d      	cmp	r3, #29
 800669e:	d001      	beq.n	80066a4 <__sflush_r+0xac>
 80066a0:	2b16      	cmp	r3, #22
 80066a2:	d11e      	bne.n	80066e2 <__sflush_r+0xea>
 80066a4:	602f      	str	r7, [r5, #0]
 80066a6:	2000      	movs	r0, #0
 80066a8:	e022      	b.n	80066f0 <__sflush_r+0xf8>
 80066aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ae:	b21b      	sxth	r3, r3
 80066b0:	e01b      	b.n	80066ea <__sflush_r+0xf2>
 80066b2:	690f      	ldr	r7, [r1, #16]
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	d0f6      	beq.n	80066a6 <__sflush_r+0xae>
 80066b8:	0793      	lsls	r3, r2, #30
 80066ba:	680e      	ldr	r6, [r1, #0]
 80066bc:	bf08      	it	eq
 80066be:	694b      	ldreq	r3, [r1, #20]
 80066c0:	600f      	str	r7, [r1, #0]
 80066c2:	bf18      	it	ne
 80066c4:	2300      	movne	r3, #0
 80066c6:	eba6 0807 	sub.w	r8, r6, r7
 80066ca:	608b      	str	r3, [r1, #8]
 80066cc:	f1b8 0f00 	cmp.w	r8, #0
 80066d0:	dde9      	ble.n	80066a6 <__sflush_r+0xae>
 80066d2:	6a21      	ldr	r1, [r4, #32]
 80066d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066d6:	4643      	mov	r3, r8
 80066d8:	463a      	mov	r2, r7
 80066da:	4628      	mov	r0, r5
 80066dc:	47b0      	blx	r6
 80066de:	2800      	cmp	r0, #0
 80066e0:	dc08      	bgt.n	80066f4 <__sflush_r+0xfc>
 80066e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f4:	4407      	add	r7, r0
 80066f6:	eba8 0800 	sub.w	r8, r8, r0
 80066fa:	e7e7      	b.n	80066cc <__sflush_r+0xd4>
 80066fc:	20400001 	.word	0x20400001

08006700 <_fflush_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	690b      	ldr	r3, [r1, #16]
 8006704:	4605      	mov	r5, r0
 8006706:	460c      	mov	r4, r1
 8006708:	b913      	cbnz	r3, 8006710 <_fflush_r+0x10>
 800670a:	2500      	movs	r5, #0
 800670c:	4628      	mov	r0, r5
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	b118      	cbz	r0, 800671a <_fflush_r+0x1a>
 8006712:	6a03      	ldr	r3, [r0, #32]
 8006714:	b90b      	cbnz	r3, 800671a <_fflush_r+0x1a>
 8006716:	f7fe f943 	bl	80049a0 <__sinit>
 800671a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f3      	beq.n	800670a <_fflush_r+0xa>
 8006722:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006724:	07d0      	lsls	r0, r2, #31
 8006726:	d404      	bmi.n	8006732 <_fflush_r+0x32>
 8006728:	0599      	lsls	r1, r3, #22
 800672a:	d402      	bmi.n	8006732 <_fflush_r+0x32>
 800672c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800672e:	f7fe fb4c 	bl	8004dca <__retarget_lock_acquire_recursive>
 8006732:	4628      	mov	r0, r5
 8006734:	4621      	mov	r1, r4
 8006736:	f7ff ff5f 	bl	80065f8 <__sflush_r>
 800673a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800673c:	07da      	lsls	r2, r3, #31
 800673e:	4605      	mov	r5, r0
 8006740:	d4e4      	bmi.n	800670c <_fflush_r+0xc>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	059b      	lsls	r3, r3, #22
 8006746:	d4e1      	bmi.n	800670c <_fflush_r+0xc>
 8006748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800674a:	f7fe fb3f 	bl	8004dcc <__retarget_lock_release_recursive>
 800674e:	e7dd      	b.n	800670c <_fflush_r+0xc>

08006750 <__swhatbuf_r>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	460c      	mov	r4, r1
 8006754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006758:	2900      	cmp	r1, #0
 800675a:	b096      	sub	sp, #88	@ 0x58
 800675c:	4615      	mov	r5, r2
 800675e:	461e      	mov	r6, r3
 8006760:	da0d      	bge.n	800677e <__swhatbuf_r+0x2e>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006768:	f04f 0100 	mov.w	r1, #0
 800676c:	bf14      	ite	ne
 800676e:	2340      	movne	r3, #64	@ 0x40
 8006770:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006774:	2000      	movs	r0, #0
 8006776:	6031      	str	r1, [r6, #0]
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	b016      	add	sp, #88	@ 0x58
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	466a      	mov	r2, sp
 8006780:	f000 f848 	bl	8006814 <_fstat_r>
 8006784:	2800      	cmp	r0, #0
 8006786:	dbec      	blt.n	8006762 <__swhatbuf_r+0x12>
 8006788:	9901      	ldr	r1, [sp, #4]
 800678a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800678e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006792:	4259      	negs	r1, r3
 8006794:	4159      	adcs	r1, r3
 8006796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800679a:	e7eb      	b.n	8006774 <__swhatbuf_r+0x24>

0800679c <__smakebuf_r>:
 800679c:	898b      	ldrh	r3, [r1, #12]
 800679e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a0:	079d      	lsls	r5, r3, #30
 80067a2:	4606      	mov	r6, r0
 80067a4:	460c      	mov	r4, r1
 80067a6:	d507      	bpl.n	80067b8 <__smakebuf_r+0x1c>
 80067a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	6123      	str	r3, [r4, #16]
 80067b0:	2301      	movs	r3, #1
 80067b2:	6163      	str	r3, [r4, #20]
 80067b4:	b003      	add	sp, #12
 80067b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b8:	ab01      	add	r3, sp, #4
 80067ba:	466a      	mov	r2, sp
 80067bc:	f7ff ffc8 	bl	8006750 <__swhatbuf_r>
 80067c0:	9f00      	ldr	r7, [sp, #0]
 80067c2:	4605      	mov	r5, r0
 80067c4:	4639      	mov	r1, r7
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff f9ce 	bl	8005b68 <_malloc_r>
 80067cc:	b948      	cbnz	r0, 80067e2 <__smakebuf_r+0x46>
 80067ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d2:	059a      	lsls	r2, r3, #22
 80067d4:	d4ee      	bmi.n	80067b4 <__smakebuf_r+0x18>
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	f043 0302 	orr.w	r3, r3, #2
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	e7e2      	b.n	80067a8 <__smakebuf_r+0xc>
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	6020      	str	r0, [r4, #0]
 80067e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067f2:	b15b      	cbz	r3, 800680c <__smakebuf_r+0x70>
 80067f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 f81d 	bl	8006838 <_isatty_r>
 80067fe:	b128      	cbz	r0, 800680c <__smakebuf_r+0x70>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	431d      	orrs	r5, r3
 8006810:	81a5      	strh	r5, [r4, #12]
 8006812:	e7cf      	b.n	80067b4 <__smakebuf_r+0x18>

08006814 <_fstat_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d07      	ldr	r5, [pc, #28]	@ (8006834 <_fstat_r+0x20>)
 8006818:	2300      	movs	r3, #0
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	4611      	mov	r1, r2
 8006820:	602b      	str	r3, [r5, #0]
 8006822:	f7fb f89b 	bl	800195c <_fstat>
 8006826:	1c43      	adds	r3, r0, #1
 8006828:	d102      	bne.n	8006830 <_fstat_r+0x1c>
 800682a:	682b      	ldr	r3, [r5, #0]
 800682c:	b103      	cbz	r3, 8006830 <_fstat_r+0x1c>
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	bd38      	pop	{r3, r4, r5, pc}
 8006832:	bf00      	nop
 8006834:	200008bc 	.word	0x200008bc

08006838 <_isatty_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d06      	ldr	r5, [pc, #24]	@ (8006854 <_isatty_r+0x1c>)
 800683c:	2300      	movs	r3, #0
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	f7fb f89a 	bl	800197c <_isatty>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_isatty_r+0x1a>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_isatty_r+0x1a>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	200008bc 	.word	0x200008bc

08006858 <_sbrk_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4d06      	ldr	r5, [pc, #24]	@ (8006874 <_sbrk_r+0x1c>)
 800685c:	2300      	movs	r3, #0
 800685e:	4604      	mov	r4, r0
 8006860:	4608      	mov	r0, r1
 8006862:	602b      	str	r3, [r5, #0]
 8006864:	f7fb f8a2 	bl	80019ac <_sbrk>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d102      	bne.n	8006872 <_sbrk_r+0x1a>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	b103      	cbz	r3, 8006872 <_sbrk_r+0x1a>
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	200008bc 	.word	0x200008bc

08006878 <memcpy>:
 8006878:	440a      	add	r2, r1
 800687a:	4291      	cmp	r1, r2
 800687c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006880:	d100      	bne.n	8006884 <memcpy+0xc>
 8006882:	4770      	bx	lr
 8006884:	b510      	push	{r4, lr}
 8006886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800688a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800688e:	4291      	cmp	r1, r2
 8006890:	d1f9      	bne.n	8006886 <memcpy+0xe>
 8006892:	bd10      	pop	{r4, pc}

08006894 <__assert_func>:
 8006894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006896:	4614      	mov	r4, r2
 8006898:	461a      	mov	r2, r3
 800689a:	4b09      	ldr	r3, [pc, #36]	@ (80068c0 <__assert_func+0x2c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4605      	mov	r5, r0
 80068a0:	68d8      	ldr	r0, [r3, #12]
 80068a2:	b14c      	cbz	r4, 80068b8 <__assert_func+0x24>
 80068a4:	4b07      	ldr	r3, [pc, #28]	@ (80068c4 <__assert_func+0x30>)
 80068a6:	9100      	str	r1, [sp, #0]
 80068a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068ac:	4906      	ldr	r1, [pc, #24]	@ (80068c8 <__assert_func+0x34>)
 80068ae:	462b      	mov	r3, r5
 80068b0:	f000 f842 	bl	8006938 <fiprintf>
 80068b4:	f000 f852 	bl	800695c <abort>
 80068b8:	4b04      	ldr	r3, [pc, #16]	@ (80068cc <__assert_func+0x38>)
 80068ba:	461c      	mov	r4, r3
 80068bc:	e7f3      	b.n	80068a6 <__assert_func+0x12>
 80068be:	bf00      	nop
 80068c0:	20000018 	.word	0x20000018
 80068c4:	08006fc5 	.word	0x08006fc5
 80068c8:	08006fd2 	.word	0x08006fd2
 80068cc:	08007000 	.word	0x08007000

080068d0 <_calloc_r>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	fba1 5402 	umull	r5, r4, r1, r2
 80068d6:	b934      	cbnz	r4, 80068e6 <_calloc_r+0x16>
 80068d8:	4629      	mov	r1, r5
 80068da:	f7ff f945 	bl	8005b68 <_malloc_r>
 80068de:	4606      	mov	r6, r0
 80068e0:	b928      	cbnz	r0, 80068ee <_calloc_r+0x1e>
 80068e2:	4630      	mov	r0, r6
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	220c      	movs	r2, #12
 80068e8:	6002      	str	r2, [r0, #0]
 80068ea:	2600      	movs	r6, #0
 80068ec:	e7f9      	b.n	80068e2 <_calloc_r+0x12>
 80068ee:	462a      	mov	r2, r5
 80068f0:	4621      	mov	r1, r4
 80068f2:	f7fe f9ed 	bl	8004cd0 <memset>
 80068f6:	e7f4      	b.n	80068e2 <_calloc_r+0x12>

080068f8 <__ascii_mbtowc>:
 80068f8:	b082      	sub	sp, #8
 80068fa:	b901      	cbnz	r1, 80068fe <__ascii_mbtowc+0x6>
 80068fc:	a901      	add	r1, sp, #4
 80068fe:	b142      	cbz	r2, 8006912 <__ascii_mbtowc+0x1a>
 8006900:	b14b      	cbz	r3, 8006916 <__ascii_mbtowc+0x1e>
 8006902:	7813      	ldrb	r3, [r2, #0]
 8006904:	600b      	str	r3, [r1, #0]
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	1e10      	subs	r0, r2, #0
 800690a:	bf18      	it	ne
 800690c:	2001      	movne	r0, #1
 800690e:	b002      	add	sp, #8
 8006910:	4770      	bx	lr
 8006912:	4610      	mov	r0, r2
 8006914:	e7fb      	b.n	800690e <__ascii_mbtowc+0x16>
 8006916:	f06f 0001 	mvn.w	r0, #1
 800691a:	e7f8      	b.n	800690e <__ascii_mbtowc+0x16>

0800691c <__ascii_wctomb>:
 800691c:	4603      	mov	r3, r0
 800691e:	4608      	mov	r0, r1
 8006920:	b141      	cbz	r1, 8006934 <__ascii_wctomb+0x18>
 8006922:	2aff      	cmp	r2, #255	@ 0xff
 8006924:	d904      	bls.n	8006930 <__ascii_wctomb+0x14>
 8006926:	228a      	movs	r2, #138	@ 0x8a
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	4770      	bx	lr
 8006930:	700a      	strb	r2, [r1, #0]
 8006932:	2001      	movs	r0, #1
 8006934:	4770      	bx	lr
	...

08006938 <fiprintf>:
 8006938:	b40e      	push	{r1, r2, r3}
 800693a:	b503      	push	{r0, r1, lr}
 800693c:	4601      	mov	r1, r0
 800693e:	ab03      	add	r3, sp, #12
 8006940:	4805      	ldr	r0, [pc, #20]	@ (8006958 <fiprintf+0x20>)
 8006942:	f853 2b04 	ldr.w	r2, [r3], #4
 8006946:	6800      	ldr	r0, [r0, #0]
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	f7ff fd3d 	bl	80063c8 <_vfiprintf_r>
 800694e:	b002      	add	sp, #8
 8006950:	f85d eb04 	ldr.w	lr, [sp], #4
 8006954:	b003      	add	sp, #12
 8006956:	4770      	bx	lr
 8006958:	20000018 	.word	0x20000018

0800695c <abort>:
 800695c:	b508      	push	{r3, lr}
 800695e:	2006      	movs	r0, #6
 8006960:	f000 f82c 	bl	80069bc <raise>
 8006964:	2001      	movs	r0, #1
 8006966:	f7fa ffa9 	bl	80018bc <_exit>

0800696a <_raise_r>:
 800696a:	291f      	cmp	r1, #31
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4605      	mov	r5, r0
 8006970:	460c      	mov	r4, r1
 8006972:	d904      	bls.n	800697e <_raise_r+0x14>
 8006974:	2316      	movs	r3, #22
 8006976:	6003      	str	r3, [r0, #0]
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006980:	b112      	cbz	r2, 8006988 <_raise_r+0x1e>
 8006982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006986:	b94b      	cbnz	r3, 800699c <_raise_r+0x32>
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f831 	bl	80069f0 <_getpid_r>
 800698e:	4622      	mov	r2, r4
 8006990:	4601      	mov	r1, r0
 8006992:	4628      	mov	r0, r5
 8006994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006998:	f000 b818 	b.w	80069cc <_kill_r>
 800699c:	2b01      	cmp	r3, #1
 800699e:	d00a      	beq.n	80069b6 <_raise_r+0x4c>
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	d103      	bne.n	80069ac <_raise_r+0x42>
 80069a4:	2316      	movs	r3, #22
 80069a6:	6003      	str	r3, [r0, #0]
 80069a8:	2001      	movs	r0, #1
 80069aa:	e7e7      	b.n	800697c <_raise_r+0x12>
 80069ac:	2100      	movs	r1, #0
 80069ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80069b2:	4620      	mov	r0, r4
 80069b4:	4798      	blx	r3
 80069b6:	2000      	movs	r0, #0
 80069b8:	e7e0      	b.n	800697c <_raise_r+0x12>
	...

080069bc <raise>:
 80069bc:	4b02      	ldr	r3, [pc, #8]	@ (80069c8 <raise+0xc>)
 80069be:	4601      	mov	r1, r0
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	f7ff bfd2 	b.w	800696a <_raise_r>
 80069c6:	bf00      	nop
 80069c8:	20000018 	.word	0x20000018

080069cc <_kill_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d07      	ldr	r5, [pc, #28]	@ (80069ec <_kill_r+0x20>)
 80069d0:	2300      	movs	r3, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	f7fa ff5f 	bl	800189c <_kill>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d102      	bne.n	80069e8 <_kill_r+0x1c>
 80069e2:	682b      	ldr	r3, [r5, #0]
 80069e4:	b103      	cbz	r3, 80069e8 <_kill_r+0x1c>
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	bd38      	pop	{r3, r4, r5, pc}
 80069ea:	bf00      	nop
 80069ec:	200008bc 	.word	0x200008bc

080069f0 <_getpid_r>:
 80069f0:	f7fa bf4c 	b.w	800188c <_getpid>
 80069f4:	0000      	movs	r0, r0
	...

080069f8 <atan>:
 80069f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	ec55 4b10 	vmov	r4, r5, d0
 8006a00:	4bbf      	ldr	r3, [pc, #764]	@ (8006d00 <atan+0x308>)
 8006a02:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006a06:	429e      	cmp	r6, r3
 8006a08:	46ab      	mov	fp, r5
 8006a0a:	d918      	bls.n	8006a3e <atan+0x46>
 8006a0c:	4bbd      	ldr	r3, [pc, #756]	@ (8006d04 <atan+0x30c>)
 8006a0e:	429e      	cmp	r6, r3
 8006a10:	d801      	bhi.n	8006a16 <atan+0x1e>
 8006a12:	d109      	bne.n	8006a28 <atan+0x30>
 8006a14:	b144      	cbz	r4, 8006a28 <atan+0x30>
 8006a16:	4622      	mov	r2, r4
 8006a18:	462b      	mov	r3, r5
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7f9 fc35 	bl	800028c <__adddf3>
 8006a22:	4604      	mov	r4, r0
 8006a24:	460d      	mov	r5, r1
 8006a26:	e006      	b.n	8006a36 <atan+0x3e>
 8006a28:	f1bb 0f00 	cmp.w	fp, #0
 8006a2c:	f340 812b 	ble.w	8006c86 <atan+0x28e>
 8006a30:	a597      	add	r5, pc, #604	@ (adr r5, 8006c90 <atan+0x298>)
 8006a32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a36:	ec45 4b10 	vmov	d0, r4, r5
 8006a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3e:	4bb2      	ldr	r3, [pc, #712]	@ (8006d08 <atan+0x310>)
 8006a40:	429e      	cmp	r6, r3
 8006a42:	d813      	bhi.n	8006a6c <atan+0x74>
 8006a44:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006a48:	429e      	cmp	r6, r3
 8006a4a:	d80c      	bhi.n	8006a66 <atan+0x6e>
 8006a4c:	a392      	add	r3, pc, #584	@ (adr r3, 8006c98 <atan+0x2a0>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7f9 fc19 	bl	800028c <__adddf3>
 8006a5a:	4bac      	ldr	r3, [pc, #688]	@ (8006d0c <atan+0x314>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f7fa f85b 	bl	8000b18 <__aeabi_dcmpgt>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d1e7      	bne.n	8006a36 <atan+0x3e>
 8006a66:	f04f 3aff 	mov.w	sl, #4294967295
 8006a6a:	e029      	b.n	8006ac0 <atan+0xc8>
 8006a6c:	f000 f95c 	bl	8006d28 <fabs>
 8006a70:	4ba7      	ldr	r3, [pc, #668]	@ (8006d10 <atan+0x318>)
 8006a72:	429e      	cmp	r6, r3
 8006a74:	ec55 4b10 	vmov	r4, r5, d0
 8006a78:	f200 80bc 	bhi.w	8006bf4 <atan+0x1fc>
 8006a7c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006a80:	429e      	cmp	r6, r3
 8006a82:	f200 809e 	bhi.w	8006bc2 <atan+0x1ca>
 8006a86:	4622      	mov	r2, r4
 8006a88:	462b      	mov	r3, r5
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	f7f9 fbfd 	bl	800028c <__adddf3>
 8006a92:	4b9e      	ldr	r3, [pc, #632]	@ (8006d0c <atan+0x314>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	f7f9 fbf7 	bl	8000288 <__aeabi_dsub>
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	460f      	mov	r7, r1
 8006aa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7f9 fbf0 	bl	800028c <__adddf3>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7f9 feca 	bl	800084c <__aeabi_ddiv>
 8006ab8:	f04f 0a00 	mov.w	sl, #0
 8006abc:	4604      	mov	r4, r0
 8006abe:	460d      	mov	r5, r1
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7f9 fd96 	bl	80005f8 <__aeabi_dmul>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4680      	mov	r8, r0
 8006ad2:	4689      	mov	r9, r1
 8006ad4:	f7f9 fd90 	bl	80005f8 <__aeabi_dmul>
 8006ad8:	a371      	add	r3, pc, #452	@ (adr r3, 8006ca0 <atan+0x2a8>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	4606      	mov	r6, r0
 8006ae0:	460f      	mov	r7, r1
 8006ae2:	f7f9 fd89 	bl	80005f8 <__aeabi_dmul>
 8006ae6:	a370      	add	r3, pc, #448	@ (adr r3, 8006ca8 <atan+0x2b0>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f7f9 fbce 	bl	800028c <__adddf3>
 8006af0:	4632      	mov	r2, r6
 8006af2:	463b      	mov	r3, r7
 8006af4:	f7f9 fd80 	bl	80005f8 <__aeabi_dmul>
 8006af8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006cb0 <atan+0x2b8>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fbc5 	bl	800028c <__adddf3>
 8006b02:	4632      	mov	r2, r6
 8006b04:	463b      	mov	r3, r7
 8006b06:	f7f9 fd77 	bl	80005f8 <__aeabi_dmul>
 8006b0a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006cb8 <atan+0x2c0>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fbbc 	bl	800028c <__adddf3>
 8006b14:	4632      	mov	r2, r6
 8006b16:	463b      	mov	r3, r7
 8006b18:	f7f9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8006b1c:	a368      	add	r3, pc, #416	@ (adr r3, 8006cc0 <atan+0x2c8>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fbb3 	bl	800028c <__adddf3>
 8006b26:	4632      	mov	r2, r6
 8006b28:	463b      	mov	r3, r7
 8006b2a:	f7f9 fd65 	bl	80005f8 <__aeabi_dmul>
 8006b2e:	a366      	add	r3, pc, #408	@ (adr r3, 8006cc8 <atan+0x2d0>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f7f9 fbaa 	bl	800028c <__adddf3>
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	a363      	add	r3, pc, #396	@ (adr r3, 8006cd0 <atan+0x2d8>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	4680      	mov	r8, r0
 8006b48:	4689      	mov	r9, r1
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	f7f9 fd53 	bl	80005f8 <__aeabi_dmul>
 8006b52:	a361      	add	r3, pc, #388	@ (adr r3, 8006cd8 <atan+0x2e0>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fb96 	bl	8000288 <__aeabi_dsub>
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	463b      	mov	r3, r7
 8006b60:	f7f9 fd4a 	bl	80005f8 <__aeabi_dmul>
 8006b64:	a35e      	add	r3, pc, #376	@ (adr r3, 8006ce0 <atan+0x2e8>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f7f9 fb8d 	bl	8000288 <__aeabi_dsub>
 8006b6e:	4632      	mov	r2, r6
 8006b70:	463b      	mov	r3, r7
 8006b72:	f7f9 fd41 	bl	80005f8 <__aeabi_dmul>
 8006b76:	a35c      	add	r3, pc, #368	@ (adr r3, 8006ce8 <atan+0x2f0>)
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f7f9 fb84 	bl	8000288 <__aeabi_dsub>
 8006b80:	4632      	mov	r2, r6
 8006b82:	463b      	mov	r3, r7
 8006b84:	f7f9 fd38 	bl	80005f8 <__aeabi_dmul>
 8006b88:	a359      	add	r3, pc, #356	@ (adr r3, 8006cf0 <atan+0x2f8>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fb7b 	bl	8000288 <__aeabi_dsub>
 8006b92:	4632      	mov	r2, r6
 8006b94:	463b      	mov	r3, r7
 8006b96:	f7f9 fd2f 	bl	80005f8 <__aeabi_dmul>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7f9 fb73 	bl	800028c <__adddf3>
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	462b      	mov	r3, r5
 8006baa:	f7f9 fd25 	bl	80005f8 <__aeabi_dmul>
 8006bae:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	d148      	bne.n	8006c4a <atan+0x252>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	4629      	mov	r1, r5
 8006bbc:	f7f9 fb64 	bl	8000288 <__aeabi_dsub>
 8006bc0:	e72f      	b.n	8006a22 <atan+0x2a>
 8006bc2:	4b52      	ldr	r3, [pc, #328]	@ (8006d0c <atan+0x314>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7f9 fb5d 	bl	8000288 <__aeabi_dsub>
 8006bce:	4b4f      	ldr	r3, [pc, #316]	@ (8006d0c <atan+0x314>)
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	460f      	mov	r7, r1
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7f9 fb57 	bl	800028c <__adddf3>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4630      	mov	r0, r6
 8006be4:	4639      	mov	r1, r7
 8006be6:	f7f9 fe31 	bl	800084c <__aeabi_ddiv>
 8006bea:	f04f 0a01 	mov.w	sl, #1
 8006bee:	4604      	mov	r4, r0
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	e765      	b.n	8006ac0 <atan+0xc8>
 8006bf4:	4b47      	ldr	r3, [pc, #284]	@ (8006d14 <atan+0x31c>)
 8006bf6:	429e      	cmp	r6, r3
 8006bf8:	d21c      	bcs.n	8006c34 <atan+0x23c>
 8006bfa:	4b47      	ldr	r3, [pc, #284]	@ (8006d18 <atan+0x320>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7f9 fb41 	bl	8000288 <__aeabi_dsub>
 8006c06:	4b44      	ldr	r3, [pc, #272]	@ (8006d18 <atan+0x320>)
 8006c08:	4606      	mov	r6, r0
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fcf1 	bl	80005f8 <__aeabi_dmul>
 8006c16:	4b3d      	ldr	r3, [pc, #244]	@ (8006d0c <atan+0x314>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f7f9 fb37 	bl	800028c <__adddf3>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4630      	mov	r0, r6
 8006c24:	4639      	mov	r1, r7
 8006c26:	f7f9 fe11 	bl	800084c <__aeabi_ddiv>
 8006c2a:	f04f 0a02 	mov.w	sl, #2
 8006c2e:	4604      	mov	r4, r0
 8006c30:	460d      	mov	r5, r1
 8006c32:	e745      	b.n	8006ac0 <atan+0xc8>
 8006c34:	4622      	mov	r2, r4
 8006c36:	462b      	mov	r3, r5
 8006c38:	4938      	ldr	r1, [pc, #224]	@ (8006d1c <atan+0x324>)
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	f7f9 fe06 	bl	800084c <__aeabi_ddiv>
 8006c40:	f04f 0a03 	mov.w	sl, #3
 8006c44:	4604      	mov	r4, r0
 8006c46:	460d      	mov	r5, r1
 8006c48:	e73a      	b.n	8006ac0 <atan+0xc8>
 8006c4a:	4b35      	ldr	r3, [pc, #212]	@ (8006d20 <atan+0x328>)
 8006c4c:	4e35      	ldr	r6, [pc, #212]	@ (8006d24 <atan+0x32c>)
 8006c4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f7f9 fb17 	bl	8000288 <__aeabi_dsub>
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	f7f9 fb13 	bl	8000288 <__aeabi_dsub>
 8006c62:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006c6e:	f7f9 fb0b 	bl	8000288 <__aeabi_dsub>
 8006c72:	f1bb 0f00 	cmp.w	fp, #0
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	f6bf aedc 	bge.w	8006a36 <atan+0x3e>
 8006c7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c82:	461d      	mov	r5, r3
 8006c84:	e6d7      	b.n	8006a36 <atan+0x3e>
 8006c86:	a51c      	add	r5, pc, #112	@ (adr r5, 8006cf8 <atan+0x300>)
 8006c88:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c8c:	e6d3      	b.n	8006a36 <atan+0x3e>
 8006c8e:	bf00      	nop
 8006c90:	54442d18 	.word	0x54442d18
 8006c94:	3ff921fb 	.word	0x3ff921fb
 8006c98:	8800759c 	.word	0x8800759c
 8006c9c:	7e37e43c 	.word	0x7e37e43c
 8006ca0:	e322da11 	.word	0xe322da11
 8006ca4:	3f90ad3a 	.word	0x3f90ad3a
 8006ca8:	24760deb 	.word	0x24760deb
 8006cac:	3fa97b4b 	.word	0x3fa97b4b
 8006cb0:	a0d03d51 	.word	0xa0d03d51
 8006cb4:	3fb10d66 	.word	0x3fb10d66
 8006cb8:	c54c206e 	.word	0xc54c206e
 8006cbc:	3fb745cd 	.word	0x3fb745cd
 8006cc0:	920083ff 	.word	0x920083ff
 8006cc4:	3fc24924 	.word	0x3fc24924
 8006cc8:	5555550d 	.word	0x5555550d
 8006ccc:	3fd55555 	.word	0x3fd55555
 8006cd0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006cd4:	bfa2b444 	.word	0xbfa2b444
 8006cd8:	52defd9a 	.word	0x52defd9a
 8006cdc:	3fadde2d 	.word	0x3fadde2d
 8006ce0:	af749a6d 	.word	0xaf749a6d
 8006ce4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006ce8:	fe231671 	.word	0xfe231671
 8006cec:	3fbc71c6 	.word	0x3fbc71c6
 8006cf0:	9998ebc4 	.word	0x9998ebc4
 8006cf4:	3fc99999 	.word	0x3fc99999
 8006cf8:	54442d18 	.word	0x54442d18
 8006cfc:	bff921fb 	.word	0xbff921fb
 8006d00:	440fffff 	.word	0x440fffff
 8006d04:	7ff00000 	.word	0x7ff00000
 8006d08:	3fdbffff 	.word	0x3fdbffff
 8006d0c:	3ff00000 	.word	0x3ff00000
 8006d10:	3ff2ffff 	.word	0x3ff2ffff
 8006d14:	40038000 	.word	0x40038000
 8006d18:	3ff80000 	.word	0x3ff80000
 8006d1c:	bff00000 	.word	0xbff00000
 8006d20:	08007208 	.word	0x08007208
 8006d24:	08007228 	.word	0x08007228

08006d28 <fabs>:
 8006d28:	ec51 0b10 	vmov	r0, r1, d0
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d32:	ec43 2b10 	vmov	d0, r2, r3
 8006d36:	4770      	bx	lr

08006d38 <_init>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	bf00      	nop
 8006d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3e:	bc08      	pop	{r3}
 8006d40:	469e      	mov	lr, r3
 8006d42:	4770      	bx	lr

08006d44 <_fini>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr
